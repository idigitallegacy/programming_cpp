        -:    0:Source:/mnt/d/labs_prog_cpp/lab1/class/variable.h
        -:    0:Graph:/mnt/d/labs_prog_cpp/lab1/cmake-build-debug-coverage/CMakeFiles/main_test.dir/test_cases.cc.gcno
        -:    0:Data:/mnt/d/labs_prog_cpp/lab1/cmake-build-debug-coverage/CMakeFiles/main_test.dir/test_cases.cc.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Михаил on 18.02.2022.
        -:    3://
        -:    4:
        -:    5:#ifndef LAB1_VARIABLE_H
        -:    6:#define LAB1_VARIABLE_H
        -:    7:
        -:    8:#endif //LAB1_VARIABLE_H
        -:    9:
        -:   10:class Variable {
        -:   11:private:
        -:   12:    double coefficient_;
        -:   13:    std::string variable_name_;
        -:   14:    double power_;
        -:   15:
function _ZN8Variable17check_if_summableERKS_S1_ called 0 returned 0% blocks executed 0%
    #####:   16:    static bool check_if_summable(const Variable &left, const Variable &right) {
    #####:   17:        return left.variable_name_ == right.variable_name_ && left.power_ == right.power_;
    %%%%%:   17-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   17-block  1
branch  3 never executed
branch  4 never executed
    %%%%%:   17-block  2
    %%%%%:   17-block  3
    %%%%%:   17-block  4
        -:   18:    }
        -:   19:
        -:   20:    static bool check_if_multipliable(const Variable &left, const Variable &right) {
        -:   21:        return left.variable_name_ == right.variable_name_;
        -:   22:    }
        -:   23:
        -:   24:    static bool check_if_divisible(const Variable &left, const Variable &right) {
        -:   25:        return left.variable_name_ == right.variable_name_ && right.coefficient_ != 0;
        -:   26:    }
        -:   27:public:
function _ZNK8Variable8get_nameB5cxx11Ev called 7 returned 100% blocks executed 100%
        7:   28:    [[nodiscard]] std::string get_name() const {
        7:   29:        return variable_name_;
        7:   29-block  0
call    0 returned 7
        -:   30:    }
        -:   31:
function _ZNK8Variable9get_powerEv called 7 returned 100% blocks executed 100%
        7:   32:    [[nodiscard]] double get_power() const {
        7:   33:        return power_;
        7:   33-block  0
        -:   34:    }
        -:   35:
function _ZNK8Variable15get_coefficientEv called 7 returned 100% blocks executed 100%
        7:   36:    [[nodiscard]] double get_coefficient() const {
        7:   37:        return coefficient_;
        7:   37-block  0
        -:   38:    }
        -:   39:
function _ZN8VariableC2EdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEd called 9 returned 100% blocks executed 100%
        9:   40:    Variable(const double coefficient = 0, const std::string &variable = "x", const double power = 0) :
        -:   41:    coefficient_(coefficient),
        -:   42:    power_(power),
        9:   43:    variable_name_(variable) {}
        9:   43-block  0
call    0 returned 9
        -:   44:
function _ZN8VariableC2ERKS_ called 20 returned 100% blocks executed 80%
       20:   45:    Variable(const Variable &copied) {
       20:   45-block  0
call    0 returned 20
    $$$$$:   45-block  1
call    1 never executed
       20:   46:        coefficient_ = copied.coefficient_;
       20:   47:        variable_name_ = copied.variable_name_;
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20:   48:        power_ = copied.power_;
       20:   49:    }
       20:   49-block  0
        -:   50:
function _ZN8VariableC2ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 62%
        1:   51:    Variable(std::string buffer) {
        1:   51-block  0
call    0 returned 1
    $$$$$:   51-block  1
call    1 never executed
        1:   52:        std::string temp_buffer;
call    0 returned 1
    $$$$$:   52-block  0
call    1 never executed
        -:   53:        int i;
        3:   54:        for (i = 0; (buffer[i] > 47 && buffer[i] < 58) || buffer[i] == '-' || buffer[i] == '+'; ++i) {
        3:   54-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   54-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 1
        2:   54-block  2
call    5 returned 2
branch  6 taken 2 (fallthrough)
branch  7 taken 0 (throw)
        2:   54-block  3
branch  8 taken 1 (fallthrough)
branch  9 taken 1
        2:   54-block  4
call   10 returned 2
branch 11 taken 2 (fallthrough)
branch 12 taken 0 (throw)
        2:   54-block  5
branch 13 taken 2 (fallthrough)
branch 14 taken 0
        2:   54-block  6
call   15 returned 2
branch 16 taken 2 (fallthrough)
branch 17 taken 0 (throw)
        2:   54-block  7
branch 18 taken 1 (fallthrough)
branch 19 taken 1
        2:   54-block  8
        1:   54-block  9
        3:   54-block 10
branch 20 taken 2 (fallthrough)
branch 21 taken 1
        2:   54-block 11
        2:   55:            temp_buffer.push_back(buffer[i]);
        2:   55-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   55-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        -:   56:        }
        -:   57:
        1:   58:        if (temp_buffer.empty())
        1:   58-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:   59:            coefficient_ = 1;
    %%%%%:   59-block  0
        -:   60:        else
        1:   61:            coefficient_ = std::stod(temp_buffer);
        1:   61-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   61-block  1
        -:   62:
        1:   63:        temp_buffer.clear();
        1:   63-block  0
call    0 returned 1
        -:   64:
       1*:   65:        if (buffer[i] < 'A' || (buffer[i] > 'Z' && buffer[i] < 'a') || buffer[i] > 'z')
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   65-block  0
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1:   65-block  1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   65-block  2
branch  8 taken 1 (fallthrough)
branch  9 taken 0
        1:   65-block  3
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
        1:   65-block  4
branch 13 taken 1 (fallthrough)
branch 14 taken 0
        1:   65-block  5
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
        1:   65-block  6
branch 18 taken 0 (fallthrough)
branch 19 taken 1
    %%%%%:   65-block  7
        1:   65-block  8
        1:   65-block  9
branch 20 taken 0 (fallthrough)
branch 21 taken 1
    #####:   66:            throw AlgebraException("Impossible input", VARIABLE_IMPOSSIBLE_NAME);
    %%%%%:   66-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:   66-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:   66-block  2
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$:   66-block  3
call   11 never executed
    $$$$$:   66-block  4
    $$$$$:   66-block  5
call   12 never executed
    $$$$$:   66-block  6
    $$$$$:   66-block  7
call   13 never executed
        -:   67:
        1:   68:        temp_buffer = buffer[i++];
        1:   68-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   68-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   69:        variable_name_ = temp_buffer[0];
        1:   69-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   69-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   70:        temp_buffer.clear();
        1:   70-block  0
call    0 returned 1
        -:   71:
        1:   72:        if (buffer[i] == '^')
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   72-block  0
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1:   73:            ++i;
        1:   73-block  0
        -:   74:
        1:   75:        if (buffer[i] == '-')
        1:   75-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   75-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####:   76:            temp_buffer.push_back(buffer[i++]);
    %%%%%:   76-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   76-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   77:
       1*:   78:        if (buffer[i] < 48 || buffer[i] > 57)
        1:   78-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   78-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1:   78-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   78-block  3
branch  8 taken 0 (fallthrough)
branch  9 taken 1
    %%%%%:   78-block  4
        1:   78-block  5
        1:   78-block  6
branch 10 taken 0 (fallthrough)
branch 11 taken 1
    #####:   79:            throw AlgebraException("Impossible input", VARIABLE_IMPOSSIBLE_NAME);
    %%%%%:   79-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:   79-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:   79-block  2
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$:   79-block  3
call   11 never executed
    $$$$$:   79-block  4
    $$$$$:   79-block  5
call   12 never executed
    $$$$$:   79-block  6
    $$$$$:   79-block  7
call   13 never executed
        -:   80:
        2:   81:        while (buffer[i] > 47 && buffer[i] < 58 && i < buffer.size())
        2:   81-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   81-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1:   81-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   81-block  3
branch  8 taken 1 (fallthrough)
branch  9 taken 0
        1:   81-block  4
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0
        1:   81-block  5
        1:   81-block  6
        2:   81-block  7
branch 13 taken 1 (fallthrough)
branch 14 taken 1
        1:   81-block  8
        1:   82:            temp_buffer.push_back(buffer[i++]);
        1:   82-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   82-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        -:   83:
        1:   84:        power_ = std::stod(temp_buffer);
        1:   84-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   84-block  1
call    3 returned 1
        1:   85:    }
        -:   86:
function _ZN8VariableaSERKS_ called 0 returned 0% blocks executed 0%
    #####:   87:    Variable &operator=(const Variable &source) {
    #####:   88:        coefficient_ = source.coefficient_;
    #####:   89:        variable_name_ = source.variable_name_;
    %%%%%:   89-block  0
call    0 never executed
    #####:   90:        power_ = source.power_;
    #####:   91:        return *this;
        -:   92:    }
        -:   93:
        -:   94:    bool operator==(const Variable &source) const {
        -:   95:        return coefficient_ == source.coefficient_ && variable_name_ == source.variable_name_ && power_ == source.power_;
        -:   96:    }
        -:   97:
        -:   98:    bool operator!=(const Variable &source) const {
        -:   99:        return !(*this == source);
        -:  100:    }
        -:  101:
        -:  102:    Variable &operator+() {
        -:  103:        return *this;
        -:  104:    }
        -:  105:
        -:  106:    Variable &operator+(const Variable &addend) const {
        -:  107:        if (!check_if_summable(*this, addend))
        -:  108:            throw AlgebraException("Variables are not summable", VARIABLE_NOT_SUMMABLE);
        -:  109:        return *(new Variable(coefficient_ + addend.coefficient_, variable_name_, power_));
        -:  110:    }
        -:  111:
        -:  112:    Variable &operator-() {
        -:  113:        return *this;
        -:  114:    }
        -:  115:
        -:  116:    Variable &operator-(const Variable &subtrahend) const {
        -:  117:        if (!check_if_summable(*this, subtrahend))
        -:  118:            throw AlgebraException("Variables are not summable", VARIABLE_NOT_SUMMABLE);
        -:  119:        return *(new Variable(coefficient_ - subtrahend.coefficient_, variable_name_, power_));
        -:  120:    }
        -:  121:
function _ZN8VariablepLERKS_ called 0 returned 0% blocks executed 0%
    #####:  122:    Variable &operator+=(const Variable &addend) {
    #####:  123:        if (!check_if_summable(*this, addend))
    %%%%%:  123-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  124:            throw AlgebraException("Variables are not summable", VARIABLE_NOT_SUMMABLE);
    %%%%%:  124-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  124-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  124-block  2
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$:  124-block  3
call   11 never executed
    $$$$$:  124-block  4
    $$$$$:  124-block  5
call   12 never executed
    $$$$$:  124-block  6
    $$$$$:  124-block  7
call   13 never executed
    #####:  125:        coefficient_ += addend.coefficient_;
    #####:  126:        return *this;
    %%%%%:  126-block  0
    %%%%%:  126-block  1
        -:  127:    }
        -:  128:
        -:  129:    Variable &operator-=(const Variable &subtrahend) {
        -:  130:        if (!check_if_summable(*this, subtrahend))
        -:  131:            throw AlgebraException("Variables are not summable", VARIABLE_NOT_SUMMABLE);
        -:  132:        coefficient_ -= subtrahend.coefficient_;
        -:  133:        return *this;
        -:  134:    }
        -:  135:
        -:  136:    Variable &operator*(const double multiplier) const {
        -:  137:        return *(new Variable(this->coefficient_ * multiplier, this->variable_name_, this->power_));
        -:  138:    }
        -:  139:
        -:  140:    Variable &operator*(const Variable &multiplier) const {
        -:  141:        if (!check_if_multipliable(*this, multiplier))
        -:  142:            throw AlgebraException("Variables are not multipliable", VARIABLE_NOT_MULTIPLIABLE);
        -:  143:        return *(new Variable(this->coefficient_ * multiplier.coefficient_,
        -:  144:                              this->variable_name_,
        -:  145:                              this->power_ + multiplier.power_));
        -:  146:    }
        -:  147:
        -:  148:    Variable &operator/(const double divider) const {
        -:  149:        if (divider == 0)
        -:  150:            throw AlgebraException("Division by zero", VARIABLE_DIVISION_BY_ZERO);
        -:  151:        return *(new Variable(this->coefficient_ / divider, this->variable_name_, this->power_));
        -:  152:    }
        -:  153:
        -:  154:    Variable &operator/(const Variable &divider) const {
        -:  155:        if (!check_if_divisible(*this, divider))
        -:  156:            throw AlgebraException("Division by zero", VARIABLE_DIVISION_BY_ZERO);
        -:  157:        return *(new Variable(this->coefficient_ / divider.coefficient_,
        -:  158:                              this->variable_name_,
        -:  159:                              this->power_ - divider.power_));
        -:  160:    }
        -:  161:
        -:  162:    Variable &operator*=(const double multiplier) {
        -:  163:        coefficient_ *= multiplier;
        -:  164:        return *this;
        -:  165:    }
        -:  166:
        -:  167:    Variable &operator*=(const Variable &multiplier) {
        -:  168:        if (!check_if_multipliable(*this, multiplier))
        -:  169:            throw AlgebraException("Variables are not multipliable", VARIABLE_NOT_MULTIPLIABLE);
        -:  170:        coefficient_ *= multiplier.coefficient_;
        -:  171:        return *this;
        -:  172:    }
        -:  173:
        -:  174:    Variable &operator/=(const double divider) {
        -:  175:        if (divider == 0)
        -:  176:            throw AlgebraException("Division by zero", VARIABLE_DIVISION_BY_ZERO);
        -:  177:        coefficient_ /= divider;
        -:  178:        return *this;
        -:  179:    }
        -:  180:
        -:  181:    Variable &operator/=(const Variable &divider) {
        -:  182:        if (!check_if_divisible(*this, divider))
        -:  183:            throw AlgebraException("Division by zero", VARIABLE_DIVISION_BY_ZERO);
        -:  184:        coefficient_ /= divider.coefficient_;
        -:  185:        power_ -= divider.power_;
        -:  186:        return *this;
        -:  187:    }
        -:  188:
        -:  189:    friend std::ostream& operator<<(std::ostream &out, const Variable &variable) noexcept;
        -:  190:
        -:  191:    friend std::istream& operator>>(std::istream &from, Variable &variable);
        -:  192:
function _ZN8VariableD2Ev called 30 returned 100% blocks executed 100%
       30:  193:    ~Variable() = default;
       30:  193-block  0
call    0 returned 30
        -:  194:};
        -:  195:
function _ZlsRSoRK8Variable called 0 returned 0% blocks executed 0%
    #####:  196:std::ostream &operator<<(std::ostream &out, const Variable &variable) noexcept {
    #####:  197:    std::string power = "^";
    %%%%%:  197-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  198:    std::string left = "(";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  199:    std::string right = ")";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  200:    std::string plus = "+";
call    0 never executed
call    1 never executed
    #####:  201:    if (variable.coefficient_ != 0) {
branch  0 never executed
branch  1 never executed
    #####:  202:        if (variable.coefficient_ > 0)
    %%%%%:  202-block  0
branch  0 never executed
branch  1 never executed
    #####:  203:            out << plus;
    %%%%%:  203-block  0
call    0 never executed
    #####:  204:        out << std::to_string(variable.coefficient_);
    %%%%%:  204-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  205:        if(variable.power_ != 0) {
branch  0 never executed
branch  1 never executed
    #####:  206:            out << variable.variable_name_ << power;
    %%%%%:  206-block  0
call    0 never executed
call    1 never executed
    #####:  207:            if (variable.power_ > 0)
branch  0 never executed
branch  1 never executed
    #####:  208:                out << std::to_string(variable.power_);
    %%%%%:  208-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:  209:            else {
    #####:  210:                out << left << std::to_string(variable.power_) << right;
    %%%%%:  210-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  211:            }
        -:  212:        }
        -:  213:    }
    #####:  214:    return out;
    %%%%%:  214-block  0
call    0 never executed
        -:  215:}
        -:  216:
function _ZrsRSiR8Variable called 0 returned 0% blocks executed 0%
    #####:  217:std::istream &operator>>(std::istream &from, Variable &variable) {
    #####:  218:    std::string buffer;
    %%%%%:  218-block  0
call    0 never executed
    $$$$$:  218-block  1
call    1 never executed
    #####:  219:    from >> buffer;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  220:
    #####:  221:    variable = Variable(buffer);
    %%%%%:  221-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  221-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  221-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  221-block  3
call    9 never executed
call   10 never executed
    $$$$$:  221-block  4
call   11 never executed
    $$$$$:  221-block  5
    $$$$$:  221-block  6
call   12 never executed
    $$$$$:  221-block  7
        -:  222:
    #####:  223:    return from;
call    0 never executed
    %%%%%:  223-block  0
        -:  224:}
        -:  225:
