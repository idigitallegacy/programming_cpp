        -:    0:Source:/mnt/d/labs_prog_cpp/lab1/class/triangle.h
        -:    0:Graph:/mnt/d/labs_prog_cpp/lab1/cmake-build-debug-coverage/CMakeFiles/main_test.dir/test_cases.cc.gcno
        -:    0:Data:/mnt/d/labs_prog_cpp/lab1/cmake-build-debug-coverage/CMakeFiles/main_test.dir/test_cases.cc.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Михаил on 09.02.2021.
        -:    3://
        -:    4:
        -:    5:#ifndef LABS_PROGRAMMING_TRIANGLE_H
        -:    6:#ifdef LABS_PROGRAMMING_POLYGON_H
        -:    7:#define LABS_PROGRAMMING_TRIANGLE_H
        -:    8:
        -:    9:class Triangle : public Polygon {
        -:   10:private:
        -:   11:    /// Checks if [source] is a triangle.
function _ZN8Triangle17check_if_triangleERKSt6vectorI5PointSaIS1_EE called 6 returned 83% blocks executed 38%
        6:   12:    static bool check_if_triangle(const std::vector<Point> &source) {
        6:   13:        if (source.size() < 3)
        6:   13-block  0
call    0 returned 6
branch  1 taken 0 (fallthrough)
branch  2 taken 6
    #####:   14:            throw FigureException("Too few points to initialize a triangle", TOO_FEW_POINTS);
    %%%%%:   14-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:   14-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:   14-block  2
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$:   14-block  3
call   11 never executed
    $$$$$:   14-block  4
    $$$$$:   14-block  5
call   12 never executed
    $$$$$:   14-block  6
    $$$$$:   14-block  7
call   13 never executed
        6:   15:        if (source.size() > 3)
        6:   15-block  0
call    0 returned 6
branch  1 taken 1 (fallthrough)
branch  2 taken 5
        1:   16:            throw FigureException("Too much points to initialize a triangle", TOO_MUCH_POINTS);
        1:   16-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:   16-block  1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   16-block  2
call    8 returned 1
call    9 returned 1
call   10 returned 0
    $$$$$:   16-block  3
call   11 never executed
    $$$$$:   16-block  4
    $$$$$:   16-block  5
call   12 never executed
    $$$$$:   16-block  6
    $$$$$:   16-block  7
call   13 never executed
        -:   17:
        5:   18:        if (!check_if_convex(source))
        5:   18-block  0
call    0 returned 5
branch  1 taken 0 (fallthrough)
branch  2 taken 5
    #####:   19:            throw FigureException("New shape is not convex", NOT_CONVEX);
    %%%%%:   19-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:   19-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:   19-block  2
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$:   19-block  3
call   11 never executed
    $$$$$:   19-block  4
    $$$$$:   19-block  5
call   12 never executed
    $$$$$:   19-block  6
    $$$$$:   19-block  7
call   13 never executed
        -:   20:
       20:   21:        for (long long i = 0; i < source.size(); ++i) {
        5:   21-block  0
       20:   21-block  1
call    0 returned 20
branch  1 taken 15 (fallthrough)
branch  2 taken 5
       15:   21-block  2
       15:   22:            if (!check_if_unique(source, i, source[i]))
       15:   22-block  0
call    0 returned 15
call    1 returned 15
branch  2 taken 0 (fallthrough)
branch  3 taken 15
    #####:   23:                return false;
    %%%%%:   23-block  0
        -:   24:        }
        5:   25:        return true;
        5:   25-block  0
        -:   26:    }
        -:   27:
        -:   28:public:
        -:   29:    /// Changes the coordinates of point to (new_x; new_y). Skips if the point was not found, point
        -:   30:    /// located at (new_x; new_y) is already exists at the polyline or changing the point destroys the triangle.
function _ZN8Triangle12change_pointERK5Pointdd called 3 returned 33% blocks executed 36%
        3:   31:    void change_point(const Point &point, const double new_x, const double new_y) final {
        6:   32:        std::vector<Point> tmp = points_;
        3:   32-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        1:   32-block  1
call    3 returned 1
        2:   32-block  2
call    4 returned 2
        3:   33:        Polygon::change_point(point, new_x, new_y);
        3:   33-block  0
call    0 returned 3
branch  1 taken 1 (fallthrough)
branch  2 taken 2 (throw)
        1:   34:        if (!check_if_triangle(points_)) {
        1:   34-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   34-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####:   35:            points_ = tmp;
    %%%%%:   35-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   36:            throw FigureException("New figure is not a triangle.", NOT_A_TRIANGLE);
    %%%%%:   36-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:   36-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:   36-block  2
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$:   36-block  3
call   11 never executed
    $$$$$:   36-block  4
    $$$$$:   36-block  5
call   12 never executed
    $$$$$:   36-block  6
    $$$$$:   36-block  7
call   13 never executed
        -:   37:        }
        1:   38:    }
        -:   39:
function _ZN8Triangle10push_pointERK5Point called 0 returned 0% blocks executed 0%
    #####:   40:    void push_point(const Point &point) override {
    #####:   41:        throw FigureException("Pushing a point destroys figure", STRUCTURE_DESTROYING);
    %%%%%:   41-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:   41-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:   41-block  2
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$:   41-block  3
call   11 never executed
    $$$$$:   41-block  4
    $$$$$:   41-block  5
call   12 never executed
    $$$$$:   41-block  6
    $$$$$:   41-block  7
call   13 never executed
        -:   42:    }
        -:   43:
        -:   44:    explicit Triangle(const Point pts[], const unsigned long long count = 3) : Polygon(pts, count) {
        -:   45:        if (!check_if_triangle(points_))
        -:   46:            throw FigureException("New figure is not a triangle.", NOT_A_TRIANGLE);
        -:   47:    }
        -:   48:
function _ZN8TriangleC2ERKSt6vectorI5PointSaIS1_EE called 7 returned 57% blocks executed 29%
        8:   49:    explicit Triangle(const std::vector<Point> &pts) : Polygon(pts) {
        7:   49-block  0
call    0 returned 5
        1:   49-block  1
call    1 returned 1
        5:   50:        if (!check_if_triangle(pts))
call    0 returned 5
branch  1 taken 4 (fallthrough)
branch  2 taken 1 (throw)
        4:   50-block  0
branch  3 taken 0 (fallthrough)
branch  4 taken 4
    #####:   51:            throw FigureException("New figure is not a triangle.", NOT_A_TRIANGLE);
    %%%%%:   51-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:   51-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:   51-block  2
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$:   51-block  3
call   11 never executed
    $$$$$:   51-block  4
    $$$$$:   51-block  5
call   12 never executed
    $$$$$:   51-block  6
    $$$$$:   51-block  7
call   13 never executed
        4:   52:    }
        4:   52-block  0
        -:   53:
        -:   54:    explicit Triangle(const Polygon &source) : Polygon(source) {
        -:   55:        if (!check_if_triangle(source.get_polyline()))
        -:   56:            throw FigureException("New figure is not a triangle.", NOT_A_TRIANGLE);
        -:   57:        points_ = source.get_polyline();
        -:   58:    }
        -:   59:
        -:   60:#ifdef LABS_PROGRAMMING_CORRECTPOLYGON_H
        -:   61:
        -:   62:    explicit Triangle(const CorrectPolygon &source) : Polygon(source.get_polyline()) {
        -:   63:        if (!check_if_triangle(points_))
        -:   64:            throw FigureException("New figure is not a triangle.", NOT_A_TRIANGLE);
        -:   65:    }
        -:   66:
        -:   67:#endif
        -:   68:
        -:   69:    Triangle(const Triangle &source) noexcept = default;
        -:   70:
        -:   71:    Triangle &operator=(const std::vector<Point> &source) {
        -:   72:        if (!check_if_triangle(source))
        -:   73:            throw FigureException("New figure is not a triangle.", NOT_A_TRIANGLE);
        -:   74:        points_ = source;
        -:   75:        return *this;
        -:   76:    }
        -:   77:
        -:   78:    Triangle &operator=(const Triangle &source) noexcept {
        -:   79:        points_ = source.points_;
        -:   80:        return *this;
        -:   81:    }
        -:   82:};
        -:   83:
        -:   84:#endif //LABS_PROGRAMMING_POLYGON_H
        -:   85:#endif //LABS_PROGRAMMING_TRIANGLE_H
