        -:    0:Source:/mnt/d/labs_prog_cpp/lab1/class/polygon.h
        -:    0:Graph:/mnt/d/labs_prog_cpp/lab1/cmake-build-debug-coverage/CMakeFiles/main_test.dir/test_cases.cc.gcno
        -:    0:Data:/mnt/d/labs_prog_cpp/lab1/cmake-build-debug-coverage/CMakeFiles/main_test.dir/test_cases.cc.gcda
        -:    0:Runs:1
        -:    1:#ifndef LABS_PROGRAMMING_POLYGON_H
        -:    2:#ifdef LABS_PROGRAMMING_POINT_H
        -:    3:
        -:    4:#define LABS_PROGRAMMING_POLYGON_H
        -:    5:
        -:    6:class Polygon : public ClosedPolyline {
        -:    7:protected:
        -:    8:    /// Checks if an array of points is convex
function _ZN7Polygon15check_if_convexERKSt6vectorI5PointSaIS1_EE called 59 returned 100% blocks executed 100%
       59:    9:    static bool check_if_convex(const std::vector<Point> &source) noexcept {
       59:   10:        double direction = 0;
      202:   11:        for (int i = 1; i < source.size(); ++i) {
       59:   11-block  0
      202:   11-block  1
call    0 returned 202
branch  1 taken 148 (fallthrough)
branch  2 taken 54
      143:   11-block  2
      148:   12:            Point AB(source[i].getX() - source[i - 1].getX(),
call    0 returned 148
call    1 returned 148
call    2 returned 148
      296:   13:                     source[i].getY() - source[i - 1].getY());
      148:   13-block  0
call    0 returned 148
call    1 returned 148
call    2 returned 148
call    3 returned 148
call    4 returned 148
call    5 returned 148
      148:   14:            Point BC(source[(i + 1) % source.size()].getX() - source[i].getX(),
call    0 returned 148
call    1 returned 148
call    2 returned 148
call    3 returned 148
      296:   15:                     source[(i + 1) % source.size()].getY() - source[i].getY());
call    0 returned 148
call    1 returned 148
call    2 returned 148
call    3 returned 148
call    4 returned 148
call    5 returned 148
call    6 returned 148
        -:   16:
        -:   17:
      148:   18:            if (i == 1) {
branch  0 taken 59 (fallthrough)
branch  1 taken 89
       59:   19:                direction = AB.getX() * BC.getY() - AB.getY() * BC.getX();
       59:   19-block  0
call    0 returned 59
call    1 returned 59
call    2 returned 59
call    3 returned 59
       59:   20:                continue;
        -:   21:            }
       89:   22:            double tmp = AB.getX() * BC.getY() - AB.getY() * BC.getX();
       89:   22-block  0
call    0 returned 89
call    1 returned 89
call    2 returned 89
call    3 returned 89
       89:   23:            if (direction < 0 && tmp > 0 || direction > 0 && tmp < 0)
branch  0 taken 3 (fallthrough)
branch  1 taken 86
        3:   23-block  0
branch  2 taken 2 (fallthrough)
branch  3 taken 1
       88:   23-block  1
branch  4 taken 82 (fallthrough)
branch  5 taken 6
       82:   23-block  2
branch  6 taken 4 (fallthrough)
branch  7 taken 78
        5:   24:                return false;
        5:   24-block  0
       84:   25:            direction = tmp;
       84:   25-block  0
        -:   26:        }
        -:   27:
       54:   28:        double square = 0;
      187:   29:        for (unsigned long long i = 0; i < source.size() - 1; ++i) {
       54:   29-block  0
      187:   29-block  1
call    0 returned 187
branch  1 taken 133 (fallthrough)
branch  2 taken 54
      133:   30:            square += source[i].getX() * source[i + 1].getY() - source[i + 1].getX() * source[i].getY();
      133:   30-block  0
call    0 returned 133
call    1 returned 133
call    2 returned 133
call    3 returned 133
call    4 returned 133
call    5 returned 133
call    6 returned 133
call    7 returned 133
        -:   31:        }
       54:   32:        square += source[source.size() - 1].getX() * source[0].getY() -
       54:   32-block  0
call    0 returned 54
call    1 returned 54
call    2 returned 54
call    3 returned 54
call    4 returned 54
       54:   33:                  source[0].getX() * source[source.size() - 1].getY();
call    0 returned 54
call    1 returned 54
call    2 returned 54
call    3 returned 54
call    4 returned 54
       54:   34:        if (std::abs((float) square) == 0) return false;
call    0 returned 54
branch  1 taken 3 (fallthrough)
branch  2 taken 51
        3:   34-block  0
       51:   35:        return true;
       51:   35-block  0
        -:   36:    }
        -:   37:
        -:   38:public:
        -:   39:    /// Returns a square of a polygon
function _ZNK7Polygon10get_squareEv called 7 returned 100% blocks executed 96%
        7:   40:    [[nodiscard]] virtual double get_square() const noexcept {
       7*:   41:        if (points_.size() < 3) return 0;
        7:   41-block  0
call    0 returned 7
branch  1 taken 0 (fallthrough)
branch  2 taken 7
    %%%%%:   41-block  1
        7:   42:        double square = 0;
       23:   43:        for (unsigned long long i = 0; i < points_.size() - 1; ++i) {
        7:   43-block  0
       23:   43-block  1
call    0 returned 23
branch  1 taken 16 (fallthrough)
branch  2 taken 7
       16:   44:            square += points_[i].getX() * points_[i + 1].getY() - points_[i + 1].getX() * points_[i].getY();
       16:   44-block  0
call    0 returned 16
call    1 returned 16
call    2 returned 16
call    3 returned 16
call    4 returned 16
call    5 returned 16
call    6 returned 16
call    7 returned 16
        -:   45:        }
        7:   46:        square += points_[points_.size() - 1].getX() * points_[0].getY() -
        7:   46-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
        7:   47:                  points_[0].getX() * points_[points_.size() - 1].getY();
call    0 returned 7
call    1 returned 7
call    2 returned 7
call    3 returned 7
call    4 returned 7
        7:   48:        return std::abs(square) / 2;
call    0 returned 7
        -:   49:    }
        -:   50:
        -:   51:    /// Returns a perimeter of a polygon
function _ZNK7Polygon13get_perimeterEv called 5 returned 100% blocks executed 100%
        5:   52:    [[nodiscard]] double get_perimeter() const noexcept {
        5:   53:        return get_length();
        5:   53-block  0
call    0 returned 5
        -:   54:    }
        -:   55:
        -:   56:    /// Changes the coordinates of point to (new_x; new_y). Skips if the point was not found, point
        -:   57:    /// located at (new_x; new_y) is already exists at the polyline or changing the point comes to unconvex polygon.
function _ZN7Polygon12change_pointERK5Pointdd called 10 returned 40% blocks executed 60%
       10:   58:    void change_point(const Point &point, double new_x, double new_y) override {
       10:   59:        if (!is_exists(point))
       10:   59-block  0
call    0 returned 10
branch  1 taken 2 (fallthrough)
branch  2 taken 8
        2:   60:            throw FigureException("Point not found", POINT_NOT_FOUND);
        2:   60-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
        2:   60-block  1
call    5 returned 2
branch  6 taken 2 (fallthrough)
branch  7 taken 0 (throw)
        2:   60-block  2
call    8 returned 2
call    9 returned 2
call   10 returned 0
    $$$$$:   60-block  3
call   11 never executed
    $$$$$:   60-block  4
    $$$$$:   60-block  5
call   12 never executed
    $$$$$:   60-block  6
    $$$$$:   60-block  7
call   13 never executed
        8:   61:        else if (is_exists(Point(new_x, new_y))) {
        8:   61-block  0
call    0 returned 8
call    1 returned 8
branch  2 taken 2 (fallthrough)
branch  3 taken 6
        2:   62:            throw FigureException("Point is already exists. Use erase() method.", POINT_ALREADY_EXISTS);
        2:   62-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
        2:   62-block  1
call    5 returned 2
branch  6 taken 2 (fallthrough)
branch  7 taken 0 (throw)
        2:   62-block  2
call    8 returned 2
call    9 returned 2
call   10 returned 0
    $$$$$:   62-block  3
call   11 never executed
    $$$$$:   62-block  4
    $$$$$:   62-block  5
call   12 never executed
    $$$$$:   62-block  6
    $$$$$:   62-block  7
call   13 never executed
        -:   63:        } else {
       12:   64:            std::vector<Point> tmp = points_;
        6:   64-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        4:   64-block  1
call    3 returned 4
        2:   64-block  2
call    4 returned 2
        6:   65:            ClosedPolyline::change_point(point, new_x, new_y);
        6:   65-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:   66:            if (!check_if_convex(points_)) {
        6:   66-block  0
call    0 returned 6
branch  1 taken 2 (fallthrough)
branch  2 taken 4
        2:   67:                points_ = tmp;
        2:   67-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   68:                throw FigureException("New figure is not convex", NOT_CONVEX);
        2:   68-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
        2:   68-block  1
call    5 returned 2
branch  6 taken 2 (fallthrough)
branch  7 taken 0 (throw)
        2:   68-block  2
call    8 returned 2
call    9 returned 2
call   10 returned 2
    $$$$$:   68-block  3
call   11 never executed
    $$$$$:   68-block  4
    $$$$$:   68-block  5
call   12 never executed
    $$$$$:   68-block  6
    $$$$$:   68-block  7
call   13 never executed
        -:   69:            }
        -:   70:        }
        4:   71:    }
        -:   72:
        -:   73:    /// Adds point if it's a unique point and a polygon stays convex
function _ZN7Polygon10push_pointERK5Point called 2 returned 50% blocks executed 45%
        2:   74:    void push_point(const Point &point) override {
        2:   75:        if (is_exists(point))
        2:   75-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####:   76:            throw FigureException("Point is already exists", POINT_ALREADY_EXISTS);
    %%%%%:   76-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:   76-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:   76-block  2
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$:   76-block  3
call   11 never executed
    $$$$$:   76-block  4
    $$$$$:   76-block  5
call   12 never executed
    $$$$$:   76-block  6
    $$$$$:   76-block  7
call   13 never executed
        -:   77:        else {
        4:   78:            std::vector<Point> tmp = points_;
        2:   78-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        1:   78-block  1
call    3 returned 1
        1:   78-block  2
call    4 returned 1
        2:   79:            points_.push_back(point);
        2:   79-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   80:            if (!check_if_convex(points_)) {
        2:   80-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1:   81:                points_ = tmp;
        1:   81-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   82:                throw FigureException("New polygon is not convex.", NOT_CONVEX);
        1:   82-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:   82-block  1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   82-block  2
call    8 returned 1
call    9 returned 1
call   10 returned 1
    $$$$$:   82-block  3
call   11 never executed
    $$$$$:   82-block  4
    $$$$$:   82-block  5
call   12 never executed
    $$$$$:   82-block  6
    $$$$$:   82-block  7
call   13 never executed
        -:   83:            }
        -:   84:        }
        1:   85:    }
        -:   86:
        -:   87:    explicit Polygon(const Point source[], const unsigned long long count = 3) : ClosedPolyline(source, count) {
        -:   88:        if (!check_if_convex(points_) || count < 3)
        -:   89:            throw FigureException("New polygon is not convex.", NOT_CONVEX);
        -:   90:    }
        -:   91:
function _ZN7PolygonC2ERKSt6vectorI5PointSaIS1_EE called 24 returned 71% blocks executed 39%
       29:   92:    explicit Polygon(const std::vector<Point> &source) : ClosedPolyline(source) {
       24:   92-block  0
call    0 returned 22
        5:   92-block  1
call    1 returned 5
       22:   93:        if (source.size() < 3)
call    0 returned 22
branch  1 taken 0 (fallthrough)
branch  2 taken 22
    #####:   94:            throw FigureException("Too few points to initialize polygon.", TOO_FEW_POINTS);
    %%%%%:   94-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:   94-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:   94-block  2
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$:   94-block  3
call   11 never executed
    $$$$$:   94-block  4
    $$$$$:   94-block  5
call   12 never executed
    $$$$$:   94-block  6
    $$$$$:   94-block  7
call   13 never executed
       22:   95:        if (!check_if_convex(points_))
       22:   95-block  0
call    0 returned 22
branch  1 taken 5 (fallthrough)
branch  2 taken 17
        5:   96:            throw FigureException("New polygon is not convex.", NOT_CONVEX);
        5:   96-block  0
call    0 returned 5
call    1 returned 5
call    2 returned 5
branch  3 taken 5 (fallthrough)
branch  4 taken 0 (throw)
        5:   96-block  1
call    5 returned 5
branch  6 taken 5 (fallthrough)
branch  7 taken 0 (throw)
        5:   96-block  2
call    8 returned 5
call    9 returned 5
call   10 returned 5
    $$$$$:   96-block  3
call   11 never executed
    $$$$$:   96-block  4
    $$$$$:   96-block  5
call   12 never executed
    $$$$$:   96-block  6
    $$$$$:   96-block  7
call   13 never executed
       17:   97:    }
       17:   97-block  0
        -:   98:
        -:   99:    explicit Polygon(const ClosedPolyline &source) : ClosedPolyline(source) {
        -:  100:        if (source.get_size() < 3)
        -:  101:            throw FigureException("Too few points to initialize polygon.", TOO_FEW_POINTS);
        -:  102:        if (!check_if_convex(points_))
        -:  103:            throw FigureException("New polygon is not convex.", NOT_CONVEX);
        -:  104:    }
        -:  105:
        -:  106:    /// This constructor is only used for dynamic polymorphism
function _ZN7PolygonC2Ev called 10 returned 100% blocks executed 24%
       10:  107:    Polygon() : ClosedPolyline() {
       10:  107-block  0
call    0 returned 10
    $$$$$:  107-block  1
call    1 never executed
       10:  108:        if (!check_if_convex(points_))
call    0 returned 10
branch  1 taken 0 (fallthrough)
branch  2 taken 10
    #####:  109:            throw FigureException("Shape is not convex", NOT_CONVEX);
    %%%%%:  109-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  109-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  109-block  2
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$:  109-block  3
call   11 never executed
    $$$$$:  109-block  4
    $$$$$:  109-block  5
call   12 never executed
    $$$$$:  109-block  6
    $$$$$:  109-block  7
call   13 never executed
       10:  110:    }
       10:  110-block  0
        -:  111:
        -:  112:    Polygon(const Polygon &source) : ClosedPolyline(source.points_) {};
        -:  113:
function _ZN7PolygonaSERKS_ called 4 returned 100% blocks executed 100%
        4:  114:    Polygon &operator=(const Polygon &source) {
        4:  115:        points_ = source.points_;
        4:  115-block  0
call    0 returned 4
        4:  116:        return *this;
        -:  117:    }
        -:  118:};
        -:  119:
        -:  120:#endif //LABS_PROGRAMMING_POINT_H
        -:  121:#endif //LABS_PROGRAMMING_POLYGON_H
