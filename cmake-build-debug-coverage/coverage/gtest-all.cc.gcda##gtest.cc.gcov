        -:    0:Source:/mnt/d/labs_prog_cpp/lab1/cmake-build-debug-coverage/_deps/googletest-src/googletest/src/gtest.cc
        -:    0:Graph:/mnt/d/labs_prog_cpp/lab1/cmake-build-debug-coverage/_deps/googletest-build/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/mnt/d/labs_prog_cpp/lab1/cmake-build-debug-coverage/_deps/googletest-build/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30://
        -:   31:// The Google C++ Testing and Mocking Framework (Google Test)
        -:   32:
        -:   33:#include "gtest/gtest.h"
        -:   34:#include "gtest/internal/custom/gtest.h"
        -:   35:#include "gtest/gtest-spi.h"
        -:   36:
        -:   37:#include <ctype.h>
        -:   38:#include <stdarg.h>
        -:   39:#include <stdio.h>
        -:   40:#include <stdlib.h>
        -:   41:#include <time.h>
        -:   42:#include <wchar.h>
        -:   43:#include <wctype.h>
        -:   44:
        -:   45:#include <algorithm>
        -:   46:#include <chrono>  // NOLINT
        -:   47:#include <cmath>
        -:   48:#include <cstdint>
        -:   49:#include <iomanip>
        -:   50:#include <limits>
        -:   51:#include <list>
        -:   52:#include <map>
        -:   53:#include <ostream>  // NOLINT
        -:   54:#include <sstream>
        -:   55:#include <vector>
        -:   56:
        -:   57:#if GTEST_OS_LINUX
        -:   58:
        -:   59:# include <fcntl.h>  // NOLINT
        -:   60:# include <limits.h>  // NOLINT
        -:   61:# include <sched.h>  // NOLINT
        -:   62:// Declares vsnprintf().  This header is not available on Windows.
        -:   63:# include <strings.h>  // NOLINT
        -:   64:# include <sys/mman.h>  // NOLINT
        -:   65:# include <sys/time.h>  // NOLINT
        -:   66:# include <unistd.h>  // NOLINT
        -:   67:# include <string>
        -:   68:
        -:   69:#elif GTEST_OS_ZOS
        -:   70:# include <sys/time.h>  // NOLINT
        -:   71:
        -:   72:// On z/OS we additionally need strings.h for strcasecmp.
        -:   73:# include <strings.h>  // NOLINT
        -:   74:
        -:   75:#elif GTEST_OS_WINDOWS_MOBILE  // We are on Windows CE.
        -:   76:
        -:   77:# include <windows.h>  // NOLINT
        -:   78:# undef min
        -:   79:
        -:   80:#elif GTEST_OS_WINDOWS  // We are on Windows proper.
        -:   81:
        -:   82:# include <windows.h>  // NOLINT
        -:   83:# undef min
        -:   84:
        -:   85:#ifdef _MSC_VER
        -:   86:# include <crtdbg.h>  // NOLINT
        -:   87:#endif
        -:   88:
        -:   89:# include <io.h>  // NOLINT
        -:   90:# include <sys/timeb.h>  // NOLINT
        -:   91:# include <sys/types.h>  // NOLINT
        -:   92:# include <sys/stat.h>  // NOLINT
        -:   93:
        -:   94:# if GTEST_OS_WINDOWS_MINGW
        -:   95:#  include <sys/time.h>  // NOLINT
        -:   96:# endif  // GTEST_OS_WINDOWS_MINGW
        -:   97:
        -:   98:#else
        -:   99:
        -:  100:// cpplint thinks that the header is already included, so we want to
        -:  101:// silence it.
        -:  102:# include <sys/time.h>  // NOLINT
        -:  103:# include <unistd.h>  // NOLINT
        -:  104:
        -:  105:#endif  // GTEST_OS_LINUX
        -:  106:
        -:  107:#if GTEST_HAS_EXCEPTIONS
        -:  108:# include <stdexcept>
        -:  109:#endif
        -:  110:
        -:  111:#if GTEST_CAN_STREAM_RESULTS_
        -:  112:# include <arpa/inet.h>  // NOLINT
        -:  113:# include <netdb.h>  // NOLINT
        -:  114:# include <sys/socket.h>  // NOLINT
        -:  115:# include <sys/types.h>  // NOLINT
        -:  116:#endif
        -:  117:
        -:  118:#include "src/gtest-internal-inl.h"
        -:  119:
        -:  120:#if GTEST_OS_WINDOWS
        -:  121:# define vsnprintf _vsnprintf
        -:  122:#endif  // GTEST_OS_WINDOWS
        -:  123:
        -:  124:#if GTEST_OS_MAC
        -:  125:#ifndef GTEST_OS_IOS
        -:  126:#include <crt_externs.h>
        -:  127:#endif
        -:  128:#endif
        -:  129:
        -:  130:#if GTEST_HAS_ABSL
        -:  131:#include "absl/debugging/failure_signal_handler.h"
        -:  132:#include "absl/debugging/stacktrace.h"
        -:  133:#include "absl/debugging/symbolize.h"
        -:  134:#include "absl/strings/str_cat.h"
        -:  135:#endif  // GTEST_HAS_ABSL
        -:  136:
        -:  137:namespace testing {
        -:  138:
        -:  139:using internal::CountIf;
        -:  140:using internal::ForEach;
        -:  141:using internal::GetElementOr;
        -:  142:using internal::Shuffle;
        -:  143:
        -:  144:// Constants.
        -:  145:
        -:  146:// A test whose test suite name or test name matches this filter is
        -:  147:// disabled and not run.
        -:  148:static const char kDisableTestFilter[] = "DISABLED_*:*/DISABLED_*";
        -:  149:
        -:  150:// A test suite whose name matches this filter is considered a death
        -:  151:// test suite and will be run before test suites whose name doesn't
        -:  152:// match this filter.
        -:  153:static const char kDeathTestSuiteFilter[] = "*DeathTest:*DeathTest/*";
        -:  154:
        -:  155:// A test filter that matches everything.
        -:  156:static const char kUniversalFilter[] = "*";
        -:  157:
        -:  158:// The default output format.
        -:  159:static const char kDefaultOutputFormat[] = "xml";
        -:  160:// The default output file.
        -:  161:static const char kDefaultOutputFile[] = "test_detail";
        -:  162:
        -:  163:// The environment variable name for the test shard index.
        -:  164:static const char kTestShardIndex[] = "GTEST_SHARD_INDEX";
        -:  165:// The environment variable name for the total number of test shards.
        -:  166:static const char kTestTotalShards[] = "GTEST_TOTAL_SHARDS";
        -:  167:// The environment variable name for the test shard status file.
        -:  168:static const char kTestShardStatusFile[] = "GTEST_SHARD_STATUS_FILE";
        -:  169:
        -:  170:namespace internal {
        -:  171:
        -:  172:// The text used in failure messages to indicate the start of the
        -:  173:// stack trace.
        -:  174:const char kStackTraceMarker[] = "\nStack trace:\n";
        -:  175:
        -:  176:// g_help_flag is true if and only if the --help flag or an equivalent form
        -:  177:// is specified on the command line.
        -:  178:bool g_help_flag = false;
        -:  179:
        -:  180:// Utilty function to Open File for Writing
function _ZN7testing8internalL18OpenFileForWritingERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  181:static FILE* OpenFileForWriting(const std::string& output_file) {
    #####:  182:  FILE* fileout = nullptr;
    #####:  183:  FilePath output_file_path(output_file);
    %%%%%:  183-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  183-block  1
call    4 never executed
    #####:  184:  FilePath output_dir(output_file_path.RemoveFileName());
    %%%%%:  184-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  184-block  1
call    3 never executed
        -:  185:
    #####:  186:  if (output_dir.CreateDirectoriesRecursively()) {
    %%%%%:  186-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  186-block  1
branch  3 never executed
branch  4 never executed
    #####:  187:    fileout = posix::FOpen(output_file.c_str(), "w");
    %%%%%:  187-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  187-block  1
        -:  188:  }
    #####:  189:  if (fileout == nullptr) {
    %%%%%:  189-block  0
branch  0 never executed
branch  1 never executed
    #####:  190:    GTEST_LOG_(FATAL) << "Unable to open file \"" << output_file << "\"";
    %%%%%:  190-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  190-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  190-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  190-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  190-block  4
call   13 never executed
    $$$$$:  190-block  5
call   14 never executed
    $$$$$:  190-block  6
        -:  191:  }
    #####:  192:  return fileout;
    %%%%%:  192-block  0
call    0 never executed
    %%%%%:  192-block  1
        -:  193:}
        -:  194:
        -:  195:}  // namespace internal
        -:  196:
        -:  197:// Bazel passes in the argument to '--test_filter' via the TESTBRIDGE_TEST_ONLY
        -:  198:// environment variable.
function _ZN7testingL16GetDefaultFilterEv called 1 returned 100% blocks executed 80%
        1:  199:static const char* GetDefaultFilter() {
        -:  200:  const char* const testbridge_test_only =
        1:  201:      internal::posix::GetEnv("TESTBRIDGE_TEST_ONLY");
        1:  201-block  0
call    0 returned 1
        1:  202:  if (testbridge_test_only != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  203:    return testbridge_test_only;
    %%%%%:  203-block  0
        -:  204:  }
        1:  205:  return kUniversalFilter;
        1:  205-block  0
        -:  206:}
        -:  207:
        -:  208:// Bazel passes in the argument to '--test_runner_fail_fast' via the
        -:  209:// TESTBRIDGE_TEST_RUNNER_FAIL_FAST environment variable.
function _ZN7testingL18GetDefaultFailFastEv called 1 returned 100% blocks executed 80%
        1:  210:static bool GetDefaultFailFast() {
        -:  211:  const char* const testbridge_test_runner_fail_fast =
        1:  212:      internal::posix::GetEnv("TESTBRIDGE_TEST_RUNNER_FAIL_FAST");
        1:  212-block  0
call    0 returned 1
        1:  213:  if (testbridge_test_runner_fail_fast != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  214:    return strcmp(testbridge_test_runner_fail_fast, "1") == 0;
    %%%%%:  214-block  0
        -:  215:  }
        1:  216:  return false;
        1:  216-block  0
        -:  217:}
        -:  218:
        -:  219:GTEST_DEFINE_bool_(
        -:  220:    fail_fast, internal::BoolFromGTestEnv("fail_fast", GetDefaultFailFast()),
        -:  221:    "True if and only if a test failure should stop further test execution.");
        -:  222:
        -:  223:GTEST_DEFINE_bool_(
        -:  224:    also_run_disabled_tests,
        -:  225:    internal::BoolFromGTestEnv("also_run_disabled_tests", false),
        -:  226:    "Run disabled tests too, in addition to the tests normally being run.");
        -:  227:
        -:  228:GTEST_DEFINE_bool_(
        -:  229:    break_on_failure, internal::BoolFromGTestEnv("break_on_failure", false),
        -:  230:    "True if and only if a failed assertion should be a debugger "
        -:  231:    "break-point.");
        -:  232:
        -:  233:GTEST_DEFINE_bool_(catch_exceptions,
        -:  234:                   internal::BoolFromGTestEnv("catch_exceptions", true),
        -:  235:                   "True if and only if " GTEST_NAME_
        -:  236:                   " should catch exceptions and treat them as test failures.");
        -:  237:
        -:  238:GTEST_DEFINE_string_(
        -:  239:    color,
        -:  240:    internal::StringFromGTestEnv("color", "auto"),
        -:  241:    "Whether to use colors in the output.  Valid values: yes, no, "
        -:  242:    "and auto.  'auto' means to use colors if the output is "
        -:  243:    "being sent to a terminal and the TERM environment variable "
        -:  244:    "is set to a terminal type that supports colors.");
        -:  245:
        -:  246:GTEST_DEFINE_string_(
        -:  247:    filter,
        -:  248:    internal::StringFromGTestEnv("filter", GetDefaultFilter()),
        -:  249:    "A colon-separated list of glob (not regex) patterns "
        -:  250:    "for filtering the tests to run, optionally followed by a "
        -:  251:    "'-' and a : separated list of negative patterns (tests to "
        -:  252:    "exclude).  A test is run if it matches one of the positive "
        -:  253:    "patterns and does not match any of the negative patterns.");
        -:  254:
        -:  255:GTEST_DEFINE_bool_(
        -:  256:    install_failure_signal_handler,
        -:  257:    internal::BoolFromGTestEnv("install_failure_signal_handler", false),
        -:  258:    "If true and supported on the current platform, " GTEST_NAME_ " should "
        -:  259:    "install a signal handler that dumps debugging information when fatal "
        -:  260:    "signals are raised.");
        -:  261:
        -:  262:GTEST_DEFINE_bool_(list_tests, false,
        -:  263:                   "List all tests without running them.");
        -:  264:
        -:  265:// The net priority order after flag processing is thus:
        -:  266://   --gtest_output command line flag
        -:  267://   GTEST_OUTPUT environment variable
        -:  268://   XML_OUTPUT_FILE environment variable
        -:  269://   ''
        -:  270:GTEST_DEFINE_string_(
        -:  271:    output,
        -:  272:    internal::StringFromGTestEnv("output",
        -:  273:      internal::OutputFlagAlsoCheckEnvVar().c_str()),
        -:  274:    "A format (defaults to \"xml\" but can be specified to be \"json\"), "
        -:  275:    "optionally followed by a colon and an output file name or directory. "
        -:  276:    "A directory is indicated by a trailing pathname separator. "
        -:  277:    "Examples: \"xml:filename.xml\", \"xml::directoryname/\". "
        -:  278:    "If a directory is specified, output files will be created "
        -:  279:    "within that directory, with file-names based on the test "
        -:  280:    "executable's name and, if necessary, made unique by adding "
        -:  281:    "digits.");
        -:  282:
        -:  283:GTEST_DEFINE_bool_(
        -:  284:    brief, internal::BoolFromGTestEnv("brief", false),
        -:  285:    "True if only test failures should be displayed in text output.");
        -:  286:
        -:  287:GTEST_DEFINE_bool_(print_time, internal::BoolFromGTestEnv("print_time", true),
        -:  288:                   "True if and only if " GTEST_NAME_
        -:  289:                   " should display elapsed time in text output.");
        -:  290:
        -:  291:GTEST_DEFINE_bool_(print_utf8, internal::BoolFromGTestEnv("print_utf8", true),
        -:  292:                   "True if and only if " GTEST_NAME_
        -:  293:                   " prints UTF8 characters as text.");
        -:  294:
        -:  295:GTEST_DEFINE_int32_(
        -:  296:    random_seed,
        -:  297:    internal::Int32FromGTestEnv("random_seed", 0),
        -:  298:    "Random number seed to use when shuffling test orders.  Must be in range "
        -:  299:    "[1, 99999], or 0 to use a seed based on the current time.");
        -:  300:
        -:  301:GTEST_DEFINE_int32_(
        -:  302:    repeat,
        -:  303:    internal::Int32FromGTestEnv("repeat", 1),
        -:  304:    "How many times to repeat each test.  Specify a negative number "
        -:  305:    "for repeating forever.  Useful for shaking out flaky tests.");
        -:  306:
        -:  307:GTEST_DEFINE_bool_(show_internal_stack_frames, false,
        -:  308:                   "True if and only if " GTEST_NAME_
        -:  309:                   " should include internal stack frames when "
        -:  310:                   "printing test failure stack traces.");
        -:  311:
        -:  312:GTEST_DEFINE_bool_(shuffle, internal::BoolFromGTestEnv("shuffle", false),
        -:  313:                   "True if and only if " GTEST_NAME_
        -:  314:                   " should randomize tests' order on every run.");
        -:  315:
        -:  316:GTEST_DEFINE_int32_(
        -:  317:    stack_trace_depth,
        -:  318:    internal::Int32FromGTestEnv("stack_trace_depth", kMaxStackTraceDepth),
        -:  319:    "The maximum number of stack frames to print when an "
        -:  320:    "assertion fails.  The valid range is 0 through 100, inclusive.");
        -:  321:
        -:  322:GTEST_DEFINE_string_(
        -:  323:    stream_result_to,
        -:  324:    internal::StringFromGTestEnv("stream_result_to", ""),
        -:  325:    "This flag specifies the host name and the port number on which to stream "
        -:  326:    "test results. Example: \"localhost:555\". The flag is effective only on "
        -:  327:    "Linux.");
        -:  328:
        -:  329:GTEST_DEFINE_bool_(
        -:  330:    throw_on_failure,
        -:  331:    internal::BoolFromGTestEnv("throw_on_failure", false),
        -:  332:    "When this flag is specified, a failed assertion will throw an exception "
        -:  333:    "if exceptions are enabled or exit the program with a non-zero code "
        -:  334:    "otherwise. For use with an external test framework.");
        -:  335:
        -:  336:#if GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  337:GTEST_DEFINE_string_(
        -:  338:    flagfile,
        -:  339:    internal::StringFromGTestEnv("flagfile", ""),
        -:  340:    "This flag specifies the flagfile to read command-line flags from.");
        -:  341:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  342:
        -:  343:namespace internal {
        -:  344:
        -:  345:// Generates a random number from [0, range), using a Linear
        -:  346:// Congruential Generator (LCG).  Crashes if 'range' is 0 or greater
        -:  347:// than kMaxRange.
function _ZN7testing8internal6Random8GenerateEj called 0 returned 0% blocks executed 0%
    #####:  348:uint32_t Random::Generate(uint32_t range) {
        -:  349:  // These constants are the same as are used in glibc's rand(3).
        -:  350:  // Use wider types than necessary to prevent unsigned overflow diagnostics.
    #####:  351:  state_ = static_cast<uint32_t>(1103515245ULL*state_ + 12345U) % kMaxRange;
        -:  352:
    #####:  353:  GTEST_CHECK_(range > 0)
    %%%%%:  353-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  353-block  1
call    3 never executed
call    4 never executed
    %%%%%:  353-block  2
call    5 never executed
    $$$$$:  353-block  3
call    6 never executed
    $$$$$:  353-block  4
call    7 never executed
    #####:  354:      << "Cannot generate a number in the range [0, 0).";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  354-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  355:  GTEST_CHECK_(range <= kMaxRange)
    %%%%%:  355-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  355-block  1
call    3 never executed
call    4 never executed
    %%%%%:  355-block  2
call    5 never executed
    $$$$$:  355-block  3
call    6 never executed
    #####:  356:      << "Generation of a number in [0, " << range << ") was requested, "
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  356-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  356-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  357:      << "but this can only generate numbers in [0, " << kMaxRange << ").";
    %%%%%:  357-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  357-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  357-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  357-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -:  358:
        -:  359:  // Converting via modulus introduces a bit of downward bias, but
        -:  360:  // it's simple, and a linear congruential generator isn't too good
        -:  361:  // to begin with.
    #####:  362:  return state_ % range;
    %%%%%:  362-block  0
    %%%%%:  362-block  1
        -:  363:}
        -:  364:
        -:  365:// GTestIsInitialized() returns true if and only if the user has initialized
        -:  366:// Google Test.  Useful for catching the user mistake of not initializing
        -:  367:// Google Test before calling RUN_ALL_TESTS().
function _ZN7testing8internalL18GTestIsInitializedEv called 2 returned 100% blocks executed 100%
        2:  368:static bool GTestIsInitialized() { return GetArgvs().size() > 0; }
        2:  368-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
        -:  369:
        -:  370:// Iterates over a vector of TestSuites, keeping a running sum of the
        -:  371:// results of calling a given int-returning method on each.
        -:  372:// Returns the sum.
function _ZN7testing8internalL20SumOverTestSuiteListERKSt6vectorIPNS_9TestSuiteESaIS3_EEMS2_KFivE called 5 returned 100% blocks executed 91%
        5:  373:static int SumOverTestSuiteList(const std::vector<TestSuite*>& case_list,
        -:  374:                                int (TestSuite::*method)() const) {
        5:  375:  int sum = 0;
       45:  376:  for (size_t i = 0; i < case_list.size(); i++) {
        5:  376-block  0
       45:  376-block  1
call    0 returned 45
branch  1 taken 40 (fallthrough)
branch  2 taken 5
      40*:  377:    sum += (case_list[i]->*method)();
       40:  377-block  0
call    0 returned 40
branch  1 taken 0 (fallthrough)
branch  2 taken 40
    %%%%%:  377-block  1
       40:  377-block  2
       40:  377-block  3
call    3 returned 40
        -:  378:  }
        5:  379:  return sum;
        5:  379-block  0
        -:  380:}
        -:  381:
        -:  382:// Returns true if and only if the test suite passed.
function _ZN7testing8internalL15TestSuitePassedEPKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####:  383:static bool TestSuitePassed(const TestSuite* test_suite) {
    #####:  384:  return test_suite->should_run() && test_suite->Passed();
    %%%%%:  384-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  384-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  384-block  2
    %%%%%:  384-block  3
    %%%%%:  384-block  4
        -:  385:}
        -:  386:
        -:  387:// Returns true if and only if the test suite failed.
function _ZN7testing8internalL15TestSuiteFailedEPKNS_9TestSuiteE called 16 returned 100% blocks executed 88%
       16:  388:static bool TestSuiteFailed(const TestSuite* test_suite) {
      16*:  389:  return test_suite->should_run() && test_suite->Failed();
       16:  389-block  0
call    0 returned 16
branch  1 taken 16 (fallthrough)
branch  2 taken 0
       16:  389-block  1
call    3 returned 16
branch  4 taken 0 (fallthrough)
branch  5 taken 16
    %%%%%:  389-block  2
       16:  389-block  3
       16:  389-block  4
        -:  390:}
        -:  391:
        -:  392:// Returns true if and only if test_suite contains at least one test that
        -:  393:// should run.
function _ZN7testing8internalL18ShouldRunTestSuiteEPKNS_9TestSuiteE called 16 returned 100% blocks executed 100%
       16:  394:static bool ShouldRunTestSuite(const TestSuite* test_suite) {
       16:  395:  return test_suite->should_run();
       16:  395-block  0
call    0 returned 16
        -:  396:}
        -:  397:
        -:  398:// AssertHelper constructor.
function _ZN7testing8internal12AssertHelperC2ENS_14TestPartResult4TypeEPKciS5_ called 0 returned 0% blocks executed 0%
    #####:  399:AssertHelper::AssertHelper(TestPartResult::Type type,
        -:  400:                           const char* file,
        -:  401:                           int line,
    #####:  402:                           const char* message)
    #####:  403:    : data_(new AssertHelperData(type, file, line, message)) {
    %%%%%:  403-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  403-block  1
call    4 never executed
    #####:  404:}
    %%%%%:  404-block  0
        -:  405:
function _ZN7testing8internal12AssertHelperD2Ev called 0 returned 0% blocks executed 0%
    #####:  406:AssertHelper::~AssertHelper() {
    #####:  407:  delete data_;
    %%%%%:  407-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  407-block  1
call    2 never executed
call    3 never executed
    #####:  408:}
        -:  409:
        -:  410:// Message assignment, for assertion streaming support.
function _ZNK7testing8internal12AssertHelperaSERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####:  411:void AssertHelper::operator=(const Message& message) const {
        -:  412:  UnitTest::GetInstance()->
    #####:  413:    AddTestPartResult(data_->type, data_->file, data_->line,
    %%%%%:  413-block  0
call    0 never executed
    %%%%%:  413-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  414:                      AppendUserMessage(data_->message, message),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  414-block  0
call    3 never executed
    $$$$$:  414-block  1
call    4 never executed
    $$$$$:  414-block  2
        -:  415:                      UnitTest::GetInstance()->impl()
    #####:  416:                      ->CurrentOsStackTraceExceptTop(1)
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    $$$$$:  416-block  0
call    4 never executed
        -:  417:                      // Skips the stack frame for this function itself.
        -:  418:                      );  // NOLINT
    #####:  419:}
        -:  420:
        -:  421:namespace {
        -:  422:
        -:  423:// When TEST_P is found without a matching INSTANTIATE_TEST_SUITE_P
        -:  424:// to creates test cases for it, a syntetic test case is
        -:  425:// inserted to report ether an error or a log message.
        -:  426://
        -:  427:// This configuration bit will likely be removed at some point.
        -:  428:constexpr bool kErrorOnUninstantiatedParameterizedTest = true;
        -:  429:constexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;
        -:  430:
        -:  431:// A test that fails at a given file/line location with a given message.
        -:  432:class FailureTest : public Test {
        -:  433: public:
function _ZN7testing8internal12_GLOBAL__N_111FailureTestC2ERKNS0_12CodeLocationENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####:  434:  explicit FailureTest(const CodeLocation& loc, std::string error_message,
        -:  435:                       bool as_error)
    #####:  436:      : loc_(loc),
    #####:  437:        error_message_(std::move(error_message)),
    #####:  438:        as_error_(as_error) {}
    %%%%%:  438-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  438-block  1
call    4 never executed
call    5 never executed
    $$$$$:  438-block  2
call    6 never executed
        -:  439:
function _ZN7testing8internal12_GLOBAL__N_111FailureTest8TestBodyEv called 0 returned 0% blocks executed 0%
    #####:  440:  void TestBody() override {
    #####:  441:    if (as_error_) {
    %%%%%:  441-block  0
branch  0 never executed
branch  1 never executed
    #####:  442:      AssertHelper(TestPartResult::kNonFatalFailure, loc_.file.c_str(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  442-block  0
call    3 never executed
    $$$$$:  442-block  1
call    4 never executed
    $$$$$:  442-block  2
    #####:  443:                   loc_.line, "") = Message() << error_message_;
    %%%%%:  443-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  443-block  1
call    4 never executed
    %%%%%:  443-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    $$$$$:  443-block  3
call    9 never executed
        -:  444:    } else {
    #####:  445:      std::cout << error_message_ << std::endl;
    %%%%%:  445-block  0
call    0 never executed
call    1 never executed
        -:  446:    }
    #####:  447:  }
    %%%%%:  447-block  0
        -:  448:
        -:  449: private:
        -:  450:  const CodeLocation loc_;
        -:  451:  const std::string error_message_;
        -:  452:  const bool as_error_;
        -:  453:};
        -:  454:
        -:  455:
        -:  456:}  // namespace
        -:  457:
function _ZN7testing8internal33GetIgnoredParameterizedTestSuitesB5cxx11Ev called 1 returned 100% blocks executed 100%
        1:  458:std::set<std::string>* GetIgnoredParameterizedTestSuites() {
        1:  459:  return UnitTest::GetInstance()->impl()->ignored_parameterized_test_suites();
        1:  459-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -:  460:}
        -:  461:
        -:  462:// Add a given test_suit to the list of them allow to go un-instantiated.
function _ZN7testing8internal13MarkAsIgnoredC2EPKc called 0 returned 0% blocks executed 0%
    #####:  463:MarkAsIgnored::MarkAsIgnored(const char* test_suite) {
    #####:  464:  GetIgnoredParameterizedTestSuites()->insert(test_suite);
    %%%%%:  464-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  464-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  464-block  2
call    8 never executed
call    9 never executed
    $$$$$:  464-block  3
call   10 never executed
    $$$$$:  464-block  4
    $$$$$:  464-block  5
call   11 never executed
    #####:  465:}
        -:  466:
        -:  467:// If this parameterized test suite has no instantiations (and that
        -:  468:// has not been marked as okay), emit a test case reporting that.
function _ZN7testing8internal23InsertSyntheticTestCaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_12CodeLocationEb called 0 returned 0% blocks executed 0%
    #####:  469:void InsertSyntheticTestCase(const std::string& name, CodeLocation location,
        -:  470:                             bool has_test_p) {
    #####:  471:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
    %%%%%:  471-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  472:  if (ignored.find(name) != ignored.end()) return;
    %%%%%:  472-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  472-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  472-block  2
    $$$$$:  472-block  3
        -:  473:
    #####:  474:  const char kMissingInstantiation[] =  //
        -:  475:      " is defined via TEST_P, but never instantiated. None of the test cases "
        -:  476:      "will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only "
        -:  477:      "ones provided expand to nothing."
        -:  478:      "\n\n"
        -:  479:      "Ideally, TEST_P definitions should only ever be included as part of "
        -:  480:      "binaries that intend to use them. (As opposed to, for example, being "
        -:  481:      "placed in a library that may be linked in to get other utilities.)";
        -:  482:
    #####:  483:  const char kMissingTestCase[] =  //
        -:  484:      " is instantiated via INSTANTIATE_TEST_SUITE_P, but no tests are "
        -:  485:      "defined via TEST_P . No test cases will run."
        -:  486:      "\n\n"
        -:  487:      "Ideally, INSTANTIATE_TEST_SUITE_P should only ever be invoked from "
        -:  488:      "code that always depend on code that provides TEST_P. Failing to do "
        -:  489:      "so is often an indication of dead code, e.g. the last TEST_P was "
        -:  490:      "removed but the rest got left behind.";
        -:  491:
        -:  492:  std::string message =
    #####:  493:      "Parameterized test suite " + name +
    %%%%%:  493-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  493-block  1
    %%%%%:  493-block  2
    %%%%%:  493-block  3
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  493-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
    $$$$$:  493-block  5
    $$$$$:  493-block  6
    #####:  494:      (has_test_p ? kMissingInstantiation : kMissingTestCase) +
    %%%%%:  494-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  494-block  1
        -:  495:      "\n\n"
        -:  496:      "To suppress this error for this test suite, insert the following line "
        -:  497:      "(in a non-header) in the namespace it is defined in:"
        -:  498:      "\n\n"
    #####:  499:      "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" + name + ");";
    %%%%%:  499-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  499-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
    $$$$$:  499-block  2
    $$$$$:  499-block  3
call    8 never executed
        -:  500:
    #####:  501:  std::string full_name = "UninstantiatedParameterizedTestSuite<" + name + ">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  501-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  501-block  1
    $$$$$:  501-block  2
call    6 never executed
    #####:  502:  RegisterTest(  //
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  502-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  502-block  1
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%:  502-block  2
call   11 never executed
call   12 never executed
    $$$$$:  502-block  3
call   13 never executed
    $$$$$:  502-block  4
        -:  503:      "GoogleTestVerification", full_name.c_str(),
        -:  504:      nullptr,  // No type parameter.
        -:  505:      nullptr,  // No value parameter.
function _ZZN7testing8internal23InsertSyntheticTestCaseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS0_12CodeLocationEbENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  506:      location.file.c_str(), location.line, [message, location] {
    #####:  507:        return new FailureTest(location, message,
    #####:  508:                               kErrorOnUninstantiatedParameterizedTest);
    %%%%%:  508-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  508-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  508-block  2
call    7 never executed
    %%%%%:  508-block  3
    $$$$$:  508-block  4
call    8 never executed
    $$$$$:  508-block  5
call    9 never executed
        -:  509:      });
        -:  510:}
        -:  511:
function _ZN7testing8internal34RegisterTypeParameterizedTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  512:void RegisterTypeParameterizedTestSuite(const char* test_suite_name,
        -:  513:                                        CodeLocation code_location) {
    #####:  514:  GetUnitTestImpl()->type_parameterized_test_registry().RegisterTestSuite(
    %%%%%:  514-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  514-block  1
call    6 never executed
    $$$$$:  514-block  2
call    7 never executed
        -:  515:      test_suite_name, code_location);
    #####:  516:}
        -:  517:
function _ZN7testing8internal47RegisterTypeParameterizedTestSuiteInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  518:void RegisterTypeParameterizedTestSuiteInstantiation(const char* case_name) {
        -:  519:  GetUnitTestImpl()
    #####:  520:      ->type_parameterized_test_registry()
    %%%%%:  520-block  0
call    0 never executed
call    1 never executed
    #####:  521:      .RegisterInstantiation(case_name);
call    0 never executed
    #####:  522:}
        -:  523:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry17RegisterTestSuiteEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####:  524:void TypeParameterizedTestSuiteRegistry::RegisterTestSuite(
        -:  525:    const char* test_suite_name, CodeLocation code_location) {
    #####:  526:  suites_.emplace(std::string(test_suite_name),
    %%%%%:  526-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  526-block  1
call    4 never executed
call    5 never executed
    $$$$$:  526-block  2
call    6 never executed
    $$$$$:  526-block  3
    $$$$$:  526-block  4
call    7 never executed
    $$$$$:  526-block  5
    #####:  527:                 TypeParameterizedTestSuiteInfo(code_location));
    %%%%%:  527-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  527-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
    $$$$$:  527-block  2
call    9 never executed
    $$$$$:  527-block  3
    $$$$$:  527-block  4
call   10 never executed
    #####:  528:}
        -:  529:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry21RegisterInstantiationEPKc called 0 returned 0% blocks executed 0%
    #####:  530:void TypeParameterizedTestSuiteRegistry::RegisterInstantiation(
        -:  531:        const char* test_suite_name) {
    #####:  532:  auto it = suites_.find(std::string(test_suite_name));
    %%%%%:  532-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  532-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  532-block  2
call    7 never executed
call    8 never executed
    $$$$$:  532-block  3
call    9 never executed
    $$$$$:  532-block  4
    $$$$$:  532-block  5
call   10 never executed
    $$$$$:  532-block  6
    #####:  533:  if (it != suites_.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  534:    it->second.instantiated = true;
    %%%%%:  534-block  0
call    0 never executed
        -:  535:  } else {
    #####:  536:    GTEST_LOG_(ERROR) << "Unknown type parameterized test suit '"
    %%%%%:  536-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  536-block  1
call    3 never executed
    %%%%%:  536-block  2
call    4 never executed
    $$$$$:  536-block  3
call    5 never executed
    $$$$$:  536-block  4
    #####:  537:                      << test_suite_name << "'";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  537-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  537-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  538:  }
    #####:  539:}
    %%%%%:  539-block  0
        -:  540:
function _ZN7testing8internal34TypeParameterizedTestSuiteRegistry22CheckForInstantiationsEv called 1 returned 100% blocks executed 12%
        1:  541:void TypeParameterizedTestSuiteRegistry::CheckForInstantiations() {
        1:  542:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
        1:  542-block  0
call    0 returned 1
       1*:  543:  for (const auto& testcase : suites_) {
call    0 returned 1
call    1 returned 1
        1:  543-block  0
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  543-block  1
call    5 never executed
    %%%%%:  543-block  2
call    6 never executed
    #####:  544:    if (testcase.second.instantiated) continue;
branch  0 never executed
branch  1 never executed
    %%%%%:  544-block  0
    %%%%%:  544-block  1
    #####:  545:    if (ignored.find(testcase.first) != ignored.end()) continue;
    %%%%%:  545-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  545-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  545-block  2
    $$$$$:  545-block  3
        -:  546:
        -:  547:    std::string message =
    #####:  548:        "Type parameterized test suite " + testcase.first +
    %%%%%:  548-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  548-block  1
    $$$$$:  548-block  2
        -:  549:        " is defined via REGISTER_TYPED_TEST_SUITE_P, but never instantiated "
        -:  550:        "via INSTANTIATE_TYPED_TEST_SUITE_P. None of the test cases will run."
        -:  551:        "\n\n"
        -:  552:        "Ideally, TYPED_TEST_P definitions should only ever be included as "
        -:  553:        "part of binaries that intend to use them. (As opposed to, for "
        -:  554:        "example, being placed in a library that may be linked in to get other "
        -:  555:        "utilities.)"
        -:  556:        "\n\n"
        -:  557:        "To suppress this error for this test suite, insert the following line "
        -:  558:        "(in a non-header) in the namespace it is defined in:"
        -:  559:        "\n\n"
    #####:  560:        "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" +
    %%%%%:  560-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  560-block  1
    #####:  561:        testcase.first + ");";
    %%%%%:  561-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  561-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$:  561-block  2
call    7 never executed
        -:  562:
        -:  563:    std::string full_name =
    #####:  564:        "UninstantiatedTypeParameterizedTestSuite<" + testcase.first + ">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  564-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  564-block  1
    $$$$$:  564-block  2
call    6 never executed
    #####:  565:    RegisterTest(  //
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  565-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  565-block  1
call   10 never executed
call   11 never executed
    $$$$$:  565-block  2
call   12 never executed
    $$$$$:  565-block  3
        -:  566:        "GoogleTestVerification", full_name.c_str(),
        -:  567:        nullptr,  // No type parameter.
        -:  568:        nullptr,  // No value parameter.
        -:  569:        testcase.second.code_location.file.c_str(),
function _ZZN7testing8internal34TypeParameterizedTestSuiteRegistry22CheckForInstantiationsEvENKUlvE_clEv called 0 returned 0% blocks executed 0%
    #####:  570:        testcase.second.code_location.line, [message, testcase] {
    %%%%%:  570-block  0
call    0 never executed
    #####:  571:          return new FailureTest(testcase.second.code_location, message,
    #####:  572:                                 kErrorOnUninstantiatedTypeParameterizedTest);
    %%%%%:  572-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  572-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  572-block  2
call    7 never executed
    %%%%%:  572-block  3
    $$$$$:  572-block  4
call    8 never executed
    $$$$$:  572-block  5
call    9 never executed
        -:  573:        });
        -:  574:  }
        1:  575:}
        1:  575-block  0
        -:  576:
        -:  577:// A copy of all command line arguments.  Set by InitGoogleTest().
        -:  578:static ::std::vector<std::string> g_argvs;
        -:  579:
function _ZN7testing8internal8GetArgvsB5cxx11Ev called 2 returned 100% blocks executed 100%
        2:  580:::std::vector<std::string> GetArgvs() {
        -:  581:#if defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  582:  // GTEST_CUSTOM_GET_ARGVS_() may return a container of std::string or
        -:  583:  // ::string. This code converts it to the appropriate type.
        -:  584:  const auto& custom = GTEST_CUSTOM_GET_ARGVS_();
        -:  585:  return ::std::vector<std::string>(custom.begin(), custom.end());
        -:  586:#else   // defined(GTEST_CUSTOM_GET_ARGVS_)
        2:  587:  return g_argvs;
        2:  587-block  0
call    0 returned 2
        -:  588:#endif  // defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  589:}
        -:  590:
        -:  591:// Returns the current application's name, removing directory path if that
        -:  592:// is present.
function _ZN7testing8internal24GetCurrentExecutableNameEv called 0 returned 0% blocks executed 0%
    #####:  593:FilePath GetCurrentExecutableName() {
    #####:  594:  FilePath result;
    %%%%%:  594-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  594-block  1
call    3 never executed
    $$$$$:  594-block  2
call    4 never executed
        -:  595:
        -:  596:#if GTEST_OS_WINDOWS || GTEST_OS_OS2
        -:  597:  result.Set(FilePath(GetArgvs()[0]).RemoveExtension("exe"));
        -:  598:#else
    #####:  599:  result.Set(FilePath(GetArgvs()[0]));
    %%%%%:  599-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  599-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  599-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:  599-block  3
call   10 never executed
call   11 never executed
    $$$$$:  599-block  4
call   12 never executed
    $$$$$:  599-block  5
    $$$$$:  599-block  6
call   13 never executed
    $$$$$:  599-block  7
        -:  600:#endif  // GTEST_OS_WINDOWS
        -:  601:
    #####:  602:  return result.RemoveDirectoryName();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  602-block  0
        -:  603:}
        -:  604:
        -:  605:// Functions for processing the gtest_output flag.
        -:  606:
        -:  607:// Returns the output format, or "" for normal printed output.
function _ZN7testing8internal15UnitTestOptions15GetOutputFormatB5cxx11Ev called 1 returned 100% blocks executed 50%
        1:  608:std::string UnitTestOptions::GetOutputFormat() {
        1:  609:  const char* const gtest_output_flag = GTEST_FLAG(output).c_str();
        1:  609-block  0
call    0 returned 1
        1:  610:  const char* const colon = strchr(gtest_output_flag, ':');
        -:  611:  return (colon == nullptr)
        -:  612:             ? std::string(gtest_output_flag)
        -:  613:             : std::string(gtest_output_flag,
       1*:  614:                           static_cast<size_t>(colon - gtest_output_flag));
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  614-block  0
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    %%%%%:  614-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
        1:  614-block  2
branch 10 taken 0 (fallthrough)
branch 11 taken 1
    %%%%%:  614-block  3
call   12 never executed
        1:  614-block  4
branch 13 taken 1 (fallthrough)
branch 14 taken 0
        1:  614-block  5
call   15 returned 1
        1:  614-block  6
        1:  614-block  7
    $$$$$:  614-block  8
branch 16 never executed
branch 17 never executed
    $$$$$:  614-block  9
call   18 never executed
    $$$$$:  614-block 10
    $$$$$:  614-block 11
branch 19 never executed
branch 20 never executed
    $$$$$:  614-block 12
call   21 never executed
        -:  615:}
        -:  616:
        -:  617:// Returns the name of the requested output file, or the default if none
        -:  618:// was explicitly specified.
function _ZN7testing8internal15UnitTestOptions27GetAbsolutePathToOutputFileB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####:  619:std::string UnitTestOptions::GetAbsolutePathToOutputFile() {
    #####:  620:  const char* const gtest_output_flag = GTEST_FLAG(output).c_str();
    %%%%%:  620-block  0
call    0 never executed
        -:  621:
    #####:  622:  std::string format = GetOutputFormat();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  622-block  0
call    3 never executed
    $$$$$:  622-block  1
call    4 never executed
    #####:  623:  if (format.empty())
    %%%%%:  623-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  624:    format = std::string(kDefaultOutputFormat);
    %%%%%:  624-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  624-block  1
call    4 never executed
call    5 never executed
call    6 never executed
    $$$$$:  624-block  2
call    7 never executed
    $$$$$:  624-block  3
        -:  625:
    #####:  626:  const char* const colon = strchr(gtest_output_flag, ':');
    #####:  627:  if (colon == nullptr)
    %%%%%:  627-block  0
branch  0 never executed
branch  1 never executed
    #####:  628:    return internal::FilePath::MakeFileName(
    %%%%%:  628-block  0
call    0 never executed
    %%%%%:  628-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  628-block  2
call    4 never executed
    $$$$$:  628-block  3
call    5 never executed
    $$$$$:  628-block  4
    #####:  629:        internal::FilePath(
    %%%%%:  629-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  629-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  629-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$:  629-block  3
call   14 never executed
    $$$$$:  629-block  4
    $$$$$:  629-block  5
call   15 never executed
    $$$$$:  629-block  6
    $$$$$:  629-block  7
call   16 never executed
    $$$$$:  629-block  8
        -:  630:            UnitTest::GetInstance()->original_working_dir()),
    #####:  631:        internal::FilePath(kDefaultOutputFile), 0,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  631-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    $$$$$:  631-block  1
call   10 never executed
    $$$$$:  631-block  2
    $$$$$:  631-block  3
call   11 never executed
    $$$$$:  631-block  4
    $$$$$:  631-block  5
call   12 never executed
    $$$$$:  631-block  6
    #####:  632:        format.c_str()).string();
    %%%%%:  632-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  633:
    #####:  634:  internal::FilePath output_name(colon + 1);
    %%%%%:  634-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  634-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    %%%%%:  634-block  2
call    8 never executed
    $$$$$:  634-block  3
    $$$$$:  634-block  4
    $$$$$:  634-block  5
call    9 never executed
    #####:  635:  if (!output_name.IsAbsolutePath())
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  636:    output_name = internal::FilePath::ConcatPaths(
    %%%%%:  636-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  636-block  1
call    3 never executed
    $$$$$:  636-block  2
call    4 never executed
    $$$$$:  636-block  3
    #####:  637:        internal::FilePath(UnitTest::GetInstance()->original_working_dir()),
    %%%%%:  637-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  637-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  637-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
    $$$$$:  637-block  3
call   14 never executed
    $$$$$:  637-block  4
    $$$$$:  637-block  5
call   15 never executed
    $$$$$:  637-block  6
    $$$$$:  637-block  7
call   16 never executed
    $$$$$:  637-block  8
    #####:  638:        internal::FilePath(colon + 1));
    %%%%%:  638-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  638-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  638-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$:  638-block  3
call   13 never executed
    $$$$$:  638-block  4
    $$$$$:  638-block  5
call   14 never executed
    $$$$$:  638-block  6
    $$$$$:  638-block  7
call   15 never executed
    $$$$$:  638-block  8
        -:  639:
    #####:  640:  if (!output_name.IsDirectory())
    %%%%%:  640-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  641:    return output_name.string();
    %%%%%:  641-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  642:
        -:  643:  internal::FilePath result(internal::FilePath::GenerateUniqueFileName(
    #####:  644:      output_name, internal::GetCurrentExecutableName(),
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:  644-block  0
    #####:  645:      GetOutputFormat().c_str()));
    %%%%%:  645-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  645-block  1
call    3 never executed
    %%%%%:  645-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  645-block  3
call    7 never executed
    $$$$$:  645-block  4
    $$$$$:  645-block  5
call    8 never executed
    #####:  646:  return result.string();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  647:}
        -:  648:
        -:  649:// Returns true if and only if the wildcard pattern matches the string. Each
        -:  650:// pattern consists of regular characters, single-character wildcards (?), and
        -:  651:// multi-character wildcards (*).
        -:  652://
        -:  653:// This function implements a linear-time string globbing algorithm based on
        -:  654:// https://research.swtch.com/glob.
function _ZN7testing8internalL20PatternMatchesStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKcSA_ called 88 returned 100% blocks executed 87%
       88:  655:static bool PatternMatchesString(const std::string& name_str,
        -:  656:                                 const char* pattern, const char* pattern_end) {
       88:  657:  const char* name = name_str.c_str();
       88:  657-block  0
call    0 returned 88
       88:  658:  const char* const name_begin = name;
       88:  659:  const char* const name_end = name + name_str.size();
call    0 returned 88
        -:  660:
       88:  661:  const char* pattern_next = pattern;
       88:  662:  const char* name_next = name;
        -:  663:
     1265:  664:  while (pattern < pattern_end || name < name_end) {
     1265:  664-block  0
branch  0 taken 243 (fallthrough)
branch  1 taken 1022
      243:  664-block  1
branch  2 taken 231 (fallthrough)
branch  3 taken 12
     1177:  664-block  2
     1253:  665:    if (pattern < pattern_end) {
     1253:  665-block  0
branch  0 taken 1022 (fallthrough)
branch  1 taken 231
     1022:  666:      switch (*pattern) {
     1022:  666-block  0
branch  0 taken 408
branch  1 taken 0
branch  2 taken 614
      408:  667:        default:  // Match an ordinary character.
      408:  668:          if (name < name_end && *name == *pattern) {
      408:  668-block  0
branch  0 taken 368 (fallthrough)
branch  1 taken 40
      368:  668-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 367
        1:  669:            ++pattern;
        1:  670:            ++name;
        1:  671:            continue;
        1:  671-block  0
        -:  672:          }
      407:  673:          break;
      407:  673-block  0
    #####:  674:        case '?':  // Match any single character.
    #####:  675:          if (name < name_end) {
    %%%%%:  675-block  0
branch  0 never executed
branch  1 never executed
    #####:  676:            ++pattern;
    #####:  677:            ++name;
    #####:  678:            continue;
    %%%%%:  678-block  0
        -:  679:          }
    #####:  680:          break;
    %%%%%:  680-block  0
      614:  681:        case '*':
        -:  682:          // Match zero or more characters. Start by skipping over the wildcard
        -:  683:          // and matching zero characters from name. If that fails, restart and
        -:  684:          // match one more character than the last attempt.
      614:  685:          pattern_next = pattern;
      614:  686:          name_next = name + 1;
      614:  687:          ++pattern;
      614:  688:          continue;
      614:  688-block  0
        -:  689:      }
        -:  690:    }
        -:  691:    // Failed to match a character. Restart if possible.
      638:  692:    if (name_begin < name_next && name_next <= name_end) {
      638:  692-block  0
branch  0 taken 602 (fallthrough)
branch  1 taken 36
      602:  692-block  1
branch  2 taken 562 (fallthrough)
branch  3 taken 40
      562:  693:      pattern = pattern_next;
      562:  694:      name = name_next;
      562:  695:      continue;
      562:  695-block  0
        -:  696:    }
       76:  697:    return false;
       76:  697-block  0
        -:  698:  }
       12:  699:  return true;
       12:  699-block  0
        -:  700:}
        -:  701:
function _ZN7testing8internal15UnitTestOptions13MatchesFilterERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPKc called 56 returned 100% blocks executed 100%
       56:  702:bool UnitTestOptions::MatchesFilter(const std::string& name_str,
        -:  703:                                    const char* filter) {
        -:  704:  // The filter is a list of patterns separated by colons (:).
       56:  705:  const char* pattern = filter;
       56:  705-block  0
        -:  706:  while (true) {
        -:  707:    // Find the bounds of this pattern.
       88:  708:    const char* const next_sep = strchr(pattern, ':');
       88:  709:    const char* const pattern_end =
       88:  710:        next_sep != nullptr ? next_sep : pattern + strlen(pattern);
       88:  710-block  0
branch  0 taken 56 (fallthrough)
branch  1 taken 32
       56:  710-block  1
       32:  710-block  2
        -:  711:
        -:  712:    // Check if this pattern matches name_str.
       88:  713:    if (PatternMatchesString(name_str, pattern, pattern_end)) {
       88:  713-block  0
call    0 returned 88
branch  1 taken 12 (fallthrough)
branch  2 taken 76
       12:  714:      return true;
       12:  714-block  0
        -:  715:    }
        -:  716:
        -:  717:    // Give up on this pattern. However, if we found a pattern separator (:),
        -:  718:    // advance to the next pattern (skipping over the separator) and restart.
       76:  719:    if (next_sep == nullptr) {
       76:  719-block  0
branch  0 taken 44 (fallthrough)
branch  1 taken 32
       44:  720:      return false;
       44:  720-block  0
        -:  721:    }
       32:  722:    pattern = next_sep + 1;
       32:  723:  }
       32:  723-block  0
        -:  724:  return true;
        -:  725:}
        -:  726:
        -:  727:// Returns true if and only if the user-specified filter matches the test
        -:  728:// suite name and the test name.
function _ZN7testing8internal15UnitTestOptions17FilterMatchesTestERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 12 returned 100% blocks executed 45%
       12:  729:bool UnitTestOptions::FilterMatchesTest(const std::string& test_suite_name,
        -:  730:                                        const std::string& test_name) {
       24:  731:  const std::string& full_name = test_suite_name + "." + test_name.c_str();
       12:  731-block  0
call    0 returned 12
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0 (throw)
       12:  731-block  1
call    4 returned 12
branch  5 taken 12 (fallthrough)
branch  6 taken 0 (throw)
       12:  731-block  2
call    7 returned 12
call    8 returned 12
    $$$$$:  731-block  3
call    9 never executed
    $$$$$:  731-block  4
    $$$$$:  731-block  5
call   10 never executed
        -:  732:
        -:  733:  // Split --gtest_filter at '-', if there is one, to separate into
        -:  734:  // positive filter and negative filter portions
       12:  735:  const char* const p = GTEST_FLAG(filter).c_str();
call    0 returned 12
       12:  736:  const char* const dash = strchr(p, '-');
       24:  737:  std::string positive;
call    0 returned 12
call    1 returned 12
    $$$$$:  737-block  0
call    2 never executed
       12:  738:  std::string negative;
call    0 returned 12
    $$$$$:  738-block  0
call    1 never executed
       12:  739:  if (dash == nullptr) {
branch  0 taken 12 (fallthrough)
branch  1 taken 0
       12:  740:    positive = GTEST_FLAG(filter).c_str();  // Whole string is a positive filter
       12:  740-block  0
call    0 returned 12
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0 (throw)
       12:  741:    negative = "";
       12:  741-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
        -:  742:  } else {
    #####:  743:    positive = std::string(p, dash);   // Everything up to the dash
    %%%%%:  743-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  743-block  1
call    4 never executed
call    5 never executed
call    6 never executed
    $$$$$:  743-block  2
call    7 never executed
    $$$$$:  743-block  3
    #####:  744:    negative = std::string(dash + 1);  // Everything after the dash
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  744-block  0
call    4 never executed
call    5 never executed
call    6 never executed
    $$$$$:  744-block  1
call    7 never executed
    $$$$$:  744-block  2
    #####:  745:    if (positive.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  746:      // Treat '-test1' as the same as '*-test1'
    #####:  747:      positive = kUniversalFilter;
    %%%%%:  747-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  748:    }
        -:  749:  }
        -:  750:
        -:  751:  // A filter is a colon-separated list of patterns.  It matches a
        -:  752:  // test if any pattern in it matches the test.
      24*:  753:  return (MatchesFilter(full_name, positive.c_str()) &&
       12:  753-block  0
call    0 returned 12
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0
       12:  753-block  1
    %%%%%:  753-block  2
       36:  754:          !MatchesFilter(full_name, negative.c_str()));
       12:  754-block  0
call    0 returned 12
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0
       12:  754-block  1
call    4 returned 12
       12:  754-block  2
        -:  755:}
        -:  756:
        -:  757:#if GTEST_HAS_SEH
        -:  758:// Returns EXCEPTION_EXECUTE_HANDLER if Google Test should handle the
        -:  759:// given SEH exception, or EXCEPTION_CONTINUE_SEARCH otherwise.
        -:  760:// This function is useful as an __except condition.
        -:  761:int UnitTestOptions::GTestShouldProcessSEH(DWORD exception_code) {
        -:  762:  // Google Test should handle a SEH exception if:
        -:  763:  //   1. the user wants it to, AND
        -:  764:  //   2. this is not a breakpoint exception, AND
        -:  765:  //   3. this is not a C++ exception (VC++ implements them via SEH,
        -:  766:  //      apparently).
        -:  767:  //
        -:  768:  // SEH exception code for C++ exceptions.
        -:  769:  // (see http://support.microsoft.com/kb/185294 for more information).
        -:  770:  const DWORD kCxxExceptionCode = 0xe06d7363;
        -:  771:
        -:  772:  bool should_handle = true;
        -:  773:
        -:  774:  if (!GTEST_FLAG(catch_exceptions))
        -:  775:    should_handle = false;
        -:  776:  else if (exception_code == EXCEPTION_BREAKPOINT)
        -:  777:    should_handle = false;
        -:  778:  else if (exception_code == kCxxExceptionCode)
        -:  779:    should_handle = false;
        -:  780:
        -:  781:  return should_handle ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH;
        -:  782:}
        -:  783:#endif  // GTEST_HAS_SEH
        -:  784:
        -:  785:}  // namespace internal
        -:  786:
        -:  787:// The c'tor sets this object as the test part result reporter used by
        -:  788:// Google Test.  The 'result' parameter specifies where to report the
        -:  789:// results. Intercepts only failures from the current thread.
function _ZN7testing32ScopedFakeTestPartResultReporterC2EPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  790:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  791:    TestPartResultArray* result)
        -:  792:    : intercept_mode_(INTERCEPT_ONLY_CURRENT_THREAD),
    #####:  793:      result_(result) {
    %%%%%:  793-block  0
call    0 never executed
    $$$$$:  793-block  1
call    1 never executed
    #####:  794:  Init();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  795:}
    %%%%%:  795-block  0
        -:  796:
        -:  797:// The c'tor sets this object as the test part result reporter used by
        -:  798:// Google Test.  The 'result' parameter specifies where to report the
        -:  799:// results.
function _ZN7testing32ScopedFakeTestPartResultReporterC2ENS0_13InterceptModeEPNS_19TestPartResultArrayE called 0 returned 0% blocks executed 0%
    #####:  800:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  801:    InterceptMode intercept_mode, TestPartResultArray* result)
        -:  802:    : intercept_mode_(intercept_mode),
    #####:  803:      result_(result) {
    %%%%%:  803-block  0
call    0 never executed
    $$$$$:  803-block  1
call    1 never executed
    #####:  804:  Init();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  805:}
    %%%%%:  805-block  0
        -:  806:
function _ZN7testing32ScopedFakeTestPartResultReporter4InitEv called 0 returned 0% blocks executed 0%
    #####:  807:void ScopedFakeTestPartResultReporter::Init() {
    #####:  808:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  808-block  0
call    0 never executed
    #####:  809:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed
branch  1 never executed
    #####:  810:    old_reporter_ = impl->GetGlobalTestPartResultReporter();
    %%%%%:  810-block  0
call    0 never executed
    #####:  811:    impl->SetGlobalTestPartResultReporter(this);
call    0 never executed
        -:  812:  } else {
    #####:  813:    old_reporter_ = impl->GetTestPartResultReporterForCurrentThread();
    %%%%%:  813-block  0
call    0 never executed
    #####:  814:    impl->SetTestPartResultReporterForCurrentThread(this);
call    0 never executed
        -:  815:  }
    #####:  816:}
        -:  817:
        -:  818:// The d'tor restores the test part result reporter used by Google Test
        -:  819:// before.
    #####:  820:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    #####:  821:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    #####:  822:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
    #####:  823:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  824:  } else {
    #####:  825:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  826:  }
    #####:  827:}
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD0Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD0Ev called 0 returned 0% blocks executed 0%
    #####:  820:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
        -:  821:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        -:  822:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
        -:  823:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  824:  } else {
        -:  825:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  826:  }
    #####:  827:}
    %%%%%:  827-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD2Ev:
function _ZN7testing32ScopedFakeTestPartResultReporterD2Ev called 0 returned 0% blocks executed 0%
    #####:  820:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    %%%%%:  820-block  0
call    0 never executed
    #####:  821:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  821-block  0
call    0 never executed
    #####:  822:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
branch  0 never executed
branch  1 never executed
    #####:  823:    impl->SetGlobalTestPartResultReporter(old_reporter_);
    %%%%%:  823-block  0
call    0 never executed
        -:  824:  } else {
    #####:  825:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
    %%%%%:  825-block  0
call    0 never executed
        -:  826:  }
    #####:  827:}
------------------
        -:  828:
        -:  829:// Increments the test part result count and remembers the result.
        -:  830:// This method is from the TestPartResultReporterInterface interface.
function _ZN7testing32ScopedFakeTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  831:void ScopedFakeTestPartResultReporter::ReportTestPartResult(
        -:  832:    const TestPartResult& result) {
    #####:  833:  result_->Append(result);
    %%%%%:  833-block  0
call    0 never executed
    #####:  834:}
        -:  835:
        -:  836:namespace internal {
        -:  837:
        -:  838:// Returns the type ID of ::testing::Test.  We should always call this
        -:  839:// instead of GetTypeId< ::testing::Test>() to get the type ID of
        -:  840:// testing::Test.  This is to work around a suspected linker bug when
        -:  841:// using Google Test as a framework on Mac OS X.  The bug causes
        -:  842:// GetTypeId< ::testing::Test>() to return different values depending
        -:  843:// on whether the call is from the Google Test framework itself or
        -:  844:// from user test code.  GetTestTypeId() is guaranteed to always
        -:  845:// return the same value, as it always calls GetTypeId<>() from the
        -:  846:// gtest.cc, which is within the Google Test framework.
function _ZN7testing8internal13GetTestTypeIdEv called 13 returned 100% blocks executed 100%
       13:  847:TypeId GetTestTypeId() {
       13:  848:  return GetTypeId<Test>();
       13:  848-block  0
call    0 returned 13
        -:  849:}
        -:  850:
        -:  851:// The value of GetTestTypeId() as seen from within the Google Test
        -:  852:// library.  This is solely for testing GetTestTypeId().
        -:  853:extern const TypeId kTestTypeIdInGoogleTest = GetTestTypeId();
        -:  854:
        -:  855:// This predicate-formatter checks that 'results' contains a test part
        -:  856:// failure of the given type and that the failure message contains the
        -:  857:// given substring.
function _ZN7testing8internalL13HasOneFailureEPKcS2_S2_RKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  858:static AssertionResult HasOneFailure(const char* /* results_expr */,
        -:  859:                                     const char* /* type_expr */,
        -:  860:                                     const char* /* substr_expr */,
        -:  861:                                     const TestPartResultArray& results,
        -:  862:                                     TestPartResult::Type type,
        -:  863:                                     const std::string& substr) {
        -:  864:  const std::string expected(type == TestPartResult::kFatalFailure ?
        -:  865:                        "1 fatal failure" :
    #####:  866:                        "1 non-fatal failure");
    %%%%%:  866-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  866-block  1
    %%%%%:  866-block  2
    %%%%%:  866-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$:  866-block  4
    $$$$$:  866-block  5
call    7 never executed
    #####:  867:  Message msg;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  867-block  0
call    3 never executed
    $$$$$:  867-block  1
call    4 never executed
    #####:  868:  if (results.size() != 1) {
    %%%%%:  868-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  869:    msg << "Expected: " << expected << "\n"
    %%%%%:  869-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  869-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  869-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  870:        << "  Actual: " << results.size() << " failures";
    %%%%%:  870-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  870-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  870-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:  870-block  3
    #####:  871:    for (int i = 0; i < results.size(); i++) {
    %%%%%:  871-block  0
    %%%%%:  871-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  871-block  2
    #####:  872:      msg << "\n" << results.GetTestPartResult(i);
    %%%%%:  872-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  872-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  872-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  873:    }
    #####:  874:    return AssertionFailure() << msg;
    %%%%%:  874-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  874-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  874-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  874-block  3
call    9 never executed
    $$$$$:  874-block  4
call   10 never executed
    $$$$$:  874-block  5
        -:  875:  }
        -:  876:
    #####:  877:  const TestPartResult& r = results.GetTestPartResult(0);
    %%%%%:  877-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  878:  if (r.type() != type) {
    %%%%%:  878-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  879:    return AssertionFailure() << "Expected: " << expected << "\n"
    %%%%%:  879-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  879-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  879-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  879-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  879-block  4
call   12 never executed
    $$$$$:  879-block  5
call   13 never executed
    $$$$$:  879-block  6
    #####:  880:                              << "  Actual:\n"
    %%%%%:  880-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  881:                              << r;
    %%%%%:  881-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  881-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  882:  }
        -:  883:
    #####:  884:  if (strstr(r.message(), substr.c_str()) == nullptr) {
    %%%%%:  884-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  885:    return AssertionFailure() << "Expected: " << expected << " containing \""
    %%%%%:  885-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  885-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  885-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:  885-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  885-block  4
call   12 never executed
    $$$$$:  885-block  5
call   13 never executed
    $$$$$:  885-block  6
    #####:  886:                              << substr << "\"\n"
    %%%%%:  886-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  886-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  887:                              << "  Actual:\n"
    %%%%%:  887-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  888:                              << r;
    %%%%%:  888-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  888-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  889:  }
        -:  890:
    #####:  891:  return AssertionSuccess();
    %%%%%:  891-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  892:}
        -:  893:
        -:  894:// The constructor of SingleFailureChecker remembers where to look up
        -:  895:// test part results, what type of failure we expect, and what
        -:  896:// substring the failure message should contain.
function _ZN7testing8internal20SingleFailureCheckerC2EPKNS_19TestPartResultArrayENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:  897:SingleFailureChecker::SingleFailureChecker(const TestPartResultArray* results,
        -:  898:                                           TestPartResult::Type type,
    #####:  899:                                           const std::string& substr)
    #####:  900:    : results_(results), type_(type), substr_(substr) {}
    %%%%%:  900-block  0
call    0 never executed
        -:  901:
        -:  902:// The destructor of SingleFailureChecker verifies that the given
        -:  903:// TestPartResultArray contains exactly one failure that has the given
        -:  904:// type and contains the given substring.  If that's not the case, a
        -:  905:// non-fatal failure will be generated.
function _ZN7testing8internal20SingleFailureCheckerD2Ev called 0 returned 0% blocks executed 0%
    #####:  906:SingleFailureChecker::~SingleFailureChecker() {
call    0 never executed
    #####:  907:  EXPECT_PRED_FORMAT3(HasOneFailure, *results_, type_, substr_);
    %%%%%:  907-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  907-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
    %%%%%:  907-block  2
call   10 never executed
    #####:  908:}
        -:  909:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1:  910:DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter(
        1:  911:    UnitTestImpl* unit_test) : unit_test_(unit_test) {}
        1:  911-block  0
call    0 returned 1
        -:  912:
function _ZN7testing8internal35DefaultGlobalTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  913:void DefaultGlobalTestPartResultReporter::ReportTestPartResult(
        -:  914:    const TestPartResult& result) {
    #####:  915:  unit_test_->current_test_result()->AddTestPartResult(result);
    %%%%%:  915-block  0
call    0 never executed
call    1 never executed
    #####:  916:  unit_test_->listeners()->repeater()->OnTestPartResult(result);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  917:}
        -:  918:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporterC2EPNS0_12UnitTestImplE called 1 returned 100% blocks executed 100%
        1:  919:DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter(
        1:  920:    UnitTestImpl* unit_test) : unit_test_(unit_test) {}
        1:  920-block  0
call    0 returned 1
        -:  921:
function _ZN7testing8internal38DefaultPerThreadTestPartResultReporter20ReportTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####:  922:void DefaultPerThreadTestPartResultReporter::ReportTestPartResult(
        -:  923:    const TestPartResult& result) {
    #####:  924:  unit_test_->GetGlobalTestPartResultReporter()->ReportTestPartResult(result);
    %%%%%:  924-block  0
call    0 never executed
call    1 never executed
    #####:  925:}
        -:  926:
        -:  927:// Returns the global test part result reporter.
        -:  928:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl31GetGlobalTestPartResultReporterEv called 0 returned 0% blocks executed 0%
    #####:  929:UnitTestImpl::GetGlobalTestPartResultReporter() {
    #####:  930:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%:  930-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  931:  return global_test_part_result_repoter_;
    %%%%%:  931-block  0
call    0 never executed
    %%%%%:  931-block  1
        -:  932:}
        -:  933:
        -:  934:// Sets the global test part result reporter.
function _ZN7testing8internal12UnitTestImpl31SetGlobalTestPartResultReporterEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####:  935:void UnitTestImpl::SetGlobalTestPartResultReporter(
        -:  936:    TestPartResultReporterInterface* reporter) {
    #####:  937:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%:  937-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  938:  global_test_part_result_repoter_ = reporter;
    %%%%%:  938-block  0
call    0 never executed
    #####:  939:}
        -:  940:
        -:  941:// Returns the test part result reporter for the current thread.
        -:  942:TestPartResultReporterInterface*
function _ZN7testing8internal12UnitTestImpl41GetTestPartResultReporterForCurrentThreadEv called 0 returned 0% blocks executed 0%
    #####:  943:UnitTestImpl::GetTestPartResultReporterForCurrentThread() {
    #####:  944:  return per_thread_test_part_result_reporter_.get();
    %%%%%:  944-block  0
call    0 never executed
        -:  945:}
        -:  946:
        -:  947:// Sets the test part result reporter for the current thread.
function _ZN7testing8internal12UnitTestImpl41SetTestPartResultReporterForCurrentThreadEPNS_31TestPartResultReporterInterfaceE called 0 returned 0% blocks executed 0%
    #####:  948:void UnitTestImpl::SetTestPartResultReporterForCurrentThread(
        -:  949:    TestPartResultReporterInterface* reporter) {
    #####:  950:  per_thread_test_part_result_reporter_.set(reporter);
    %%%%%:  950-block  0
call    0 never executed
    #####:  951:}
        -:  952:
        -:  953:// Gets the number of successful test suites.
function _ZNK7testing8internal12UnitTestImpl27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####:  954:int UnitTestImpl::successful_test_suite_count() const {
    #####:  955:  return CountIf(test_suites_, TestSuitePassed);
    %%%%%:  955-block  0
call    0 never executed
        -:  956:}
        -:  957:
        -:  958:// Gets the number of failed test suites.
function _ZNK7testing8internal12UnitTestImpl23failed_test_suite_countEv called 2 returned 100% blocks executed 100%
        2:  959:int UnitTestImpl::failed_test_suite_count() const {
        2:  960:  return CountIf(test_suites_, TestSuiteFailed);
        2:  960-block  0
call    0 returned 2
        -:  961:}
        -:  962:
        -:  963:// Gets the number of all test suites.
function _ZNK7testing8internal12UnitTestImpl22total_test_suite_countEv called 9 returned 100% blocks executed 100%
        9:  964:int UnitTestImpl::total_test_suite_count() const {
        9:  965:  return static_cast<int>(test_suites_.size());
        9:  965-block  0
call    0 returned 9
        -:  966:}
        -:  967:
        -:  968:// Gets the number of all test suites that contain at least one test
        -:  969:// that should run.
function _ZNK7testing8internal12UnitTestImpl23test_suite_to_run_countEv called 2 returned 100% blocks executed 100%
        2:  970:int UnitTestImpl::test_suite_to_run_count() const {
        2:  971:  return CountIf(test_suites_, ShouldRunTestSuite);
        2:  971-block  0
call    0 returned 2
        -:  972:}
        -:  973:
        -:  974:// Gets the number of successful tests.
function _ZNK7testing8internal12UnitTestImpl21successful_test_countEv called 1 returned 100% blocks executed 100%
        1:  975:int UnitTestImpl::successful_test_count() const {
        1:  976:  return SumOverTestSuiteList(test_suites_, &TestSuite::successful_test_count);
        1:  976-block  0
call    0 returned 1
        -:  977:}
        -:  978:
        -:  979:// Gets the number of skipped tests.
function _ZNK7testing8internal12UnitTestImpl18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1:  980:int UnitTestImpl::skipped_test_count() const {
        1:  981:  return SumOverTestSuiteList(test_suites_, &TestSuite::skipped_test_count);
        1:  981-block  0
call    0 returned 1
        -:  982:}
        -:  983:
        -:  984:// Gets the number of failed tests.
function _ZNK7testing8internal12UnitTestImpl17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####:  985:int UnitTestImpl::failed_test_count() const {
    #####:  986:  return SumOverTestSuiteList(test_suites_, &TestSuite::failed_test_count);
    %%%%%:  986-block  0
call    0 never executed
        -:  987:}
        -:  988:
        -:  989:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8internal12UnitTestImpl30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1:  990:int UnitTestImpl::reportable_disabled_test_count() const {
        1:  991:  return SumOverTestSuiteList(test_suites_,
        1:  991-block  0
call    0 returned 1
        1:  992:                              &TestSuite::reportable_disabled_test_count);
        -:  993:}
        -:  994:
        -:  995:// Gets the number of disabled tests.
function _ZNK7testing8internal12UnitTestImpl19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####:  996:int UnitTestImpl::disabled_test_count() const {
    #####:  997:  return SumOverTestSuiteList(test_suites_, &TestSuite::disabled_test_count);
    %%%%%:  997-block  0
call    0 never executed
        -:  998:}
        -:  999:
        -: 1000:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8internal12UnitTestImpl21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1001:int UnitTestImpl::reportable_test_count() const {
    #####: 1002:  return SumOverTestSuiteList(test_suites_, &TestSuite::reportable_test_count);
    %%%%%: 1002-block  0
call    0 never executed
        -: 1003:}
        -: 1004:
        -: 1005:// Gets the number of all tests.
function _ZNK7testing8internal12UnitTestImpl16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 1006:int UnitTestImpl::total_test_count() const {
    #####: 1007:  return SumOverTestSuiteList(test_suites_, &TestSuite::total_test_count);
    %%%%%: 1007-block  0
call    0 never executed
        -: 1008:}
        -: 1009:
        -: 1010:// Gets the number of tests that should run.
function _ZNK7testing8internal12UnitTestImpl17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 1011:int UnitTestImpl::test_to_run_count() const {
        2: 1012:  return SumOverTestSuiteList(test_suites_, &TestSuite::test_to_run_count);
        2: 1012-block  0
call    0 returned 2
        -: 1013:}
        -: 1014:
        -: 1015:// Returns the current OS stack trace as an std::string.
        -: 1016://
        -: 1017:// The maximum number of stack frames to be included is specified by
        -: 1018:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 1019:// specifies the number of top frames to be skipped, which doesn't
        -: 1020:// count against the number of frames to be included.
        -: 1021://
        -: 1022:// For example, if Foo() calls Bar(), which in turn calls
        -: 1023:// CurrentOsStackTraceExceptTop(1), Foo() will be included in the
        -: 1024:// trace but Bar() and CurrentOsStackTraceExceptTop() won't.
function _ZN7testing8internal12UnitTestImpl28CurrentOsStackTraceExceptTopB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 1025:std::string UnitTestImpl::CurrentOsStackTraceExceptTop(int skip_count) {
    #####: 1026:  return os_stack_trace_getter()->CurrentStackTrace(
    %%%%%: 1026-block  0
call    0 never executed
        -: 1027:      static_cast<int>(GTEST_FLAG(stack_trace_depth)),
        -: 1028:      skip_count + 1
        -: 1029:      // Skips the user-specified number of frames plus this function
        -: 1030:      // itself.
    #####: 1031:      );  // NOLINT
call    0 never executed
        -: 1032:}
        -: 1033:
        -: 1034:// Returns the current time in milliseconds.
function _ZN7testing8internal15GetTimeInMillisEv called 43 returned 100% blocks executed 80%
       43: 1035:TimeInMillis GetTimeInMillis() {
       43: 1036:  return std::chrono::duration_cast<std::chrono::milliseconds>(
       43: 1037:             std::chrono::system_clock::now() -
call    0 returned 43
    $$$$$: 1037-block  0
    $$$$$: 1037-block  1
      129: 1038:             std::chrono::system_clock::from_time_t(0))
       43: 1038-block  0
call    0 returned 43
call    1 returned 43
branch  2 taken 43 (fallthrough)
branch  3 taken 0 (throw)
       43: 1038-block  1
call    4 returned 43
branch  5 taken 43 (fallthrough)
branch  6 taken 0 (throw)
       86: 1039:      .count();
       43: 1039-block  0
call    0 returned 43
       43: 1039-block  1
        -: 1040:}
        -: 1041:
        -: 1042:// Utilities
        -: 1043:
        -: 1044:// class String.
        -: 1045:
        -: 1046:#if GTEST_OS_WINDOWS_MOBILE
        -: 1047:// Creates a UTF-16 wide string from the given ANSI string, allocating
        -: 1048:// memory using new. The caller is responsible for deleting the return
        -: 1049:// value using delete[]. Returns the wide string, or NULL if the
        -: 1050:// input is NULL.
        -: 1051:LPCWSTR String::AnsiToUtf16(const char* ansi) {
        -: 1052:  if (!ansi) return nullptr;
        -: 1053:  const int length = strlen(ansi);
        -: 1054:  const int unicode_length =
        -: 1055:      MultiByteToWideChar(CP_ACP, 0, ansi, length, nullptr, 0);
        -: 1056:  WCHAR* unicode = new WCHAR[unicode_length + 1];
        -: 1057:  MultiByteToWideChar(CP_ACP, 0, ansi, length,
        -: 1058:                      unicode, unicode_length);
        -: 1059:  unicode[unicode_length] = 0;
        -: 1060:  return unicode;
        -: 1061:}
        -: 1062:
        -: 1063:// Creates an ANSI string from the given wide string, allocating
        -: 1064:// memory using new. The caller is responsible for deleting the return
        -: 1065:// value using delete[]. Returns the ANSI string, or NULL if the
        -: 1066:// input is NULL.
        -: 1067:const char* String::Utf16ToAnsi(LPCWSTR utf16_str)  {
        -: 1068:  if (!utf16_str) return nullptr;
        -: 1069:  const int ansi_length = WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, nullptr,
        -: 1070:                                              0, nullptr, nullptr);
        -: 1071:  char* ansi = new char[ansi_length + 1];
        -: 1072:  WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, ansi, ansi_length, nullptr,
        -: 1073:                      nullptr);
        -: 1074:  ansi[ansi_length] = 0;
        -: 1075:  return ansi;
        -: 1076:}
        -: 1077:
        -: 1078:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1079:
        -: 1080:// Compares two C strings.  Returns true if and only if they have the same
        -: 1081:// content.
        -: 1082://
        -: 1083:// Unlike strcmp(), this function can handle NULL argument(s).  A NULL
        -: 1084:// C string is considered different to any non-NULL C string,
        -: 1085:// including the empty string.
function _ZN7testing8internal6String13CStringEqualsEPKcS3_ called 3 returned 100% blocks executed 67%
        3: 1086:bool String::CStringEquals(const char * lhs, const char * rhs) {
       3*: 1087:  if (lhs == nullptr) return rhs == nullptr;
        3: 1087-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    %%%%%: 1087-block  1
        -: 1088:
       3*: 1089:  if (rhs == nullptr) return false;
        3: 1089-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    %%%%%: 1089-block  1
        -: 1090:
        3: 1091:  return strcmp(lhs, rhs) == 0;
        3: 1091-block  0
        -: 1092:}
        -: 1093:
        -: 1094:#if GTEST_HAS_STD_WSTRING
        -: 1095:
        -: 1096:// Converts an array of wide chars to a narrow string using the UTF-8
        -: 1097:// encoding, and streams the result to the given Message object.
function _ZN7testing8internalL24StreamWideCharsToMessageEPKwmPNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 1098:static void StreamWideCharsToMessage(const wchar_t* wstr, size_t length,
        -: 1099:                                     Message* msg) {
    #####: 1100:  for (size_t i = 0; i != length; ) {  // NOLINT
    %%%%%: 1100-block  0
    %%%%%: 1100-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 1100-block  2
    #####: 1101:    if (wstr[i] != L'\0') {
    %%%%%: 1101-block  0
branch  0 never executed
branch  1 never executed
    #####: 1102:      *msg << WideStringToUtf8(wstr + i, static_cast<int>(length - i));
    %%%%%: 1102-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1102-block  1
call    4 never executed
    $$$$$: 1102-block  2
call    5 never executed
    $$$$$: 1102-block  3
call    6 never executed
    #####: 1103:      while (i != length && wstr[i] != L'\0')
    %%%%%: 1103-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1103-block  1
branch  2 never executed
branch  3 never executed
    #####: 1104:        i++;
    %%%%%: 1104-block  0
        -: 1105:    } else {
    #####: 1106:      *msg << '\0';
    %%%%%: 1106-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1107:      i++;
    %%%%%: 1107-block  0
        -: 1108:    }
        -: 1109:  }
    #####: 1110:}
    %%%%%: 1110-block  0
        -: 1111:
        -: 1112:#endif  // GTEST_HAS_STD_WSTRING
        -: 1113:
function _ZN7testing8internal11SplitStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcPSt6vectorIS6_SaIS6_EE called 0 returned 0% blocks executed 0%
    #####: 1114:void SplitString(const ::std::string& str, char delimiter,
        -: 1115:                 ::std::vector< ::std::string>* dest) {
    #####: 1116:  ::std::vector< ::std::string> parsed;
    %%%%%: 1116-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1116-block  1
call    2 never executed
    #####: 1117:  ::std::string::size_type pos = 0;
    #####: 1118:  while (::testing::internal::AlwaysTrue()) {
    %%%%%: 1118-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1118-block  1
branch  3 never executed
branch  4 never executed
    #####: 1119:    const ::std::string::size_type colon = str.find(delimiter, pos);
    %%%%%: 1119-block  0
call    0 never executed
    #####: 1120:    if (colon == ::std::string::npos) {
branch  0 never executed
branch  1 never executed
    #####: 1121:      parsed.push_back(str.substr(pos));
    %%%%%: 1121-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1121-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1121-block  2
call    6 never executed
    $$$$$: 1121-block  3
call    7 never executed
    $$$$$: 1121-block  4
    #####: 1122:      break;
        -: 1123:    } else {
    #####: 1124:      parsed.push_back(str.substr(pos, colon - pos));
    %%%%%: 1124-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1124-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1124-block  2
call    6 never executed
    $$$$$: 1124-block  3
call    7 never executed
    $$$$$: 1124-block  4
    #####: 1125:      pos = colon + 1;
        -: 1126:    }
        -: 1127:  }
    #####: 1128:  dest->swap(parsed);
    %%%%%: 1128-block  0
call    0 never executed
    #####: 1129:}
        -: 1130:
        -: 1131:}  // namespace internal
        -: 1132:
        -: 1133:// Constructs an empty Message.
        -: 1134:// We allocate the stringstream separately because otherwise each use of
        -: 1135:// ASSERT/EXPECT in a procedure adds over 200 bytes to the procedure's
        -: 1136:// stack frame leading to huge stack frames in some cases; gcc does not reuse
        -: 1137:// the stack space.
function _ZN7testing7MessageC2Ev called 85 returned 100% blocks executed 73%
       85: 1138:Message::Message() : ss_(new ::std::stringstream) {
       85: 1138-block  0
call    0 returned 85
call    1 returned 85
branch  2 taken 85 (fallthrough)
branch  3 taken 0 (throw)
       85: 1138-block  1
call    4 returned 85
    $$$$$: 1138-block  2
call    5 never executed
    $$$$$: 1138-block  3
call    6 never executed
        -: 1139:  // By default, we want there to be enough precision when printing
        -: 1140:  // a double to a Message.
       85: 1141:  *ss_ << std::setprecision(std::numeric_limits<double>::digits10 + 2);
call    0 returned 85
call    1 returned 85
call    2 returned 85
branch  3 taken 85 (fallthrough)
branch  4 taken 0 (throw)
       85: 1142:}
       85: 1142-block  0
        -: 1143:
        -: 1144:// These two overloads allow streaming a wide C string to a Message
        -: 1145:// using the UTF-8 encoding.
function _ZN7testing7MessagelsEPKw called 0 returned 0% blocks executed 0%
    #####: 1146:Message& Message::operator <<(const wchar_t* wide_c_str) {
    #####: 1147:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1147-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1147-block  1
call    4 never executed
    %%%%%: 1147-block  2
    $$$$$: 1147-block  3
call    5 never executed
        -: 1148:}
function _ZN7testing7MessagelsEPw called 0 returned 0% blocks executed 0%
    #####: 1149:Message& Message::operator <<(wchar_t* wide_c_str) {
    #####: 1150:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1150-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1150-block  1
call    4 never executed
    %%%%%: 1150-block  2
    $$$$$: 1150-block  3
call    5 never executed
        -: 1151:}
        -: 1152:
        -: 1153:#if GTEST_HAS_STD_WSTRING
        -: 1154:// Converts the given wide string to a narrow string using the UTF-8
        -: 1155:// encoding, and streams the result to this Message object.
function _ZN7testing7MessagelsERKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEE called 0 returned 0% blocks executed 0%
    #####: 1156:Message& Message::operator <<(const ::std::wstring& wstr) {
    #####: 1157:  internal::StreamWideCharsToMessage(wstr.c_str(), wstr.length(), this);
    %%%%%: 1157-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1158:  return *this;
        -: 1159:}
        -: 1160:#endif  // GTEST_HAS_STD_WSTRING
        -: 1161:
        -: 1162:// Gets the text streamed to this object so far as an std::string.
        -: 1163:// Each '\0' character in the buffer is replaced with "\\0".
function _ZNK7testing7Message9GetStringB5cxx11Ev called 85 returned 100% blocks executed 100%
       85: 1164:std::string Message::GetString() const {
       85: 1165:  return internal::StringStreamToString(ss_.get());
       85: 1165-block  0
call    0 returned 85
call    1 returned 85
        -: 1166:}
        -: 1167:
        -: 1168:// AssertionResult constructors.
        -: 1169:// Used in EXPECT_TRUE/FALSE(assertion_result).
function _ZN7testing15AssertionResultC2ERKS0_ called 0 returned 0% blocks executed 0%
    #####: 1170:AssertionResult::AssertionResult(const AssertionResult& other)
    #####: 1171:    : success_(other.success_),
    #####: 1172:      message_(other.message_.get() != nullptr
    #####: 1173:                   ? new ::std::string(*other.message_)
    %%%%%: 1173-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 1173-block  1
call    5 never executed
    #####: 1174:                   : static_cast< ::std::string*>(nullptr)) {}
    %%%%%: 1174-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1174-block  1
    %%%%%: 1174-block  2
    %%%%%: 1174-block  3
call    3 never executed
        -: 1175:
        -: 1176:// Swaps two AssertionResults.
function _ZN7testing15AssertionResult4swapERS0_ called 0 returned 0% blocks executed 0%
    #####: 1177:void AssertionResult::swap(AssertionResult& other) {
        -: 1178:  using std::swap;
    #####: 1179:  swap(success_, other.success_);
    %%%%%: 1179-block  0
call    0 never executed
    #####: 1180:  swap(message_, other.message_);
call    0 never executed
    #####: 1181:}
        -: 1182:
        -: 1183:// Returns the assertion's negation. Used with EXPECT/ASSERT_FALSE.
function _ZNK7testing15AssertionResultntEv called 0 returned 0% blocks executed 0%
    #####: 1184:AssertionResult AssertionResult::operator!() const {
    #####: 1185:  AssertionResult negation(!success_);
    %%%%%: 1185-block  0
call    0 never executed
    #####: 1186:  if (message_.get() != nullptr) negation << *message_;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1186-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    #####: 1187:  return negation;
    %%%%%: 1187-block  0
    %%%%%: 1187-block  1
        -: 1188:}
        -: 1189:
        -: 1190:// Makes a successful assertion result.
function _ZN7testing16AssertionSuccessEv called 15 returned 100% blocks executed 100%
       15: 1191:AssertionResult AssertionSuccess() {
       15: 1192:  return AssertionResult(true);
       15: 1192-block  0
call    0 returned 15
        -: 1193:}
        -: 1194:
        -: 1195:// Makes a failed assertion result.
function _ZN7testing16AssertionFailureEv called 0 returned 0% blocks executed 0%
    #####: 1196:AssertionResult AssertionFailure() {
    #####: 1197:  return AssertionResult(false);
    %%%%%: 1197-block  0
call    0 never executed
        -: 1198:}
        -: 1199:
        -: 1200:// Makes a failed assertion result with the given failure message.
        -: 1201:// Deprecated; use AssertionFailure() << message.
function _ZN7testing16AssertionFailureERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 1202:AssertionResult AssertionFailure(const Message& message) {
    #####: 1203:  return AssertionFailure() << message;
    %%%%%: 1203-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1203-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1203-block  2
call    7 never executed
    %%%%%: 1203-block  3
    $$$$$: 1203-block  4
call    8 never executed
        -: 1204:}
        -: 1205:
        -: 1206:namespace internal {
        -: 1207:
        -: 1208:namespace edit_distance {
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorImSaImEES6_ called 0 returned 0% blocks executed 0%
    #####: 1209:std::vector<EditType> CalculateOptimalEdits(const std::vector<size_t>& left,
        -: 1210:                                            const std::vector<size_t>& right) {
        -: 1211:  std::vector<std::vector<double> > costs(
    #####: 1212:      left.size() + 1, std::vector<double>(right.size() + 1));
    %%%%%: 1212-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1212-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 1212-block  2
    $$$$$: 1212-block  3
    $$$$$: 1212-block  4
    $$$$$: 1212-block  5
call   13 never executed
        -: 1213:  std::vector<std::vector<EditType> > best_move(
    #####: 1214:      left.size() + 1, std::vector<EditType>(right.size() + 1));
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1214-block  0
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
    %%%%%: 1214-block  1
call   12 never executed
    $$$$$: 1214-block  2
    $$$$$: 1214-block  3
    $$$$$: 1214-block  4
    $$$$$: 1214-block  5
call   13 never executed
        -: 1215:
        -: 1216:  // Populate for empty right.
    #####: 1217:  for (size_t l_i = 0; l_i < costs.size(); ++l_i) {
    %%%%%: 1217-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1218:    costs[l_i][0] = static_cast<double>(l_i);
    %%%%%: 1218-block  0
call    0 never executed
call    1 never executed
    #####: 1219:    best_move[l_i][0] = kRemove;
call    0 never executed
call    1 never executed
        -: 1220:  }
        -: 1221:  // Populate for empty left.
    #####: 1222:  for (size_t r_i = 1; r_i < costs[0].size(); ++r_i) {
    %%%%%: 1222-block  0
    %%%%%: 1222-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1223:    costs[0][r_i] = static_cast<double>(r_i);
    %%%%%: 1223-block  0
call    0 never executed
call    1 never executed
    #####: 1224:    best_move[0][r_i] = kAdd;
call    0 never executed
call    1 never executed
        -: 1225:  }
        -: 1226:
    #####: 1227:  for (size_t l_i = 0; l_i < left.size(); ++l_i) {
    %%%%%: 1227-block  0
    %%%%%: 1227-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1227-block  2
    #####: 1228:    for (size_t r_i = 0; r_i < right.size(); ++r_i) {
    %%%%%: 1228-block  0
    %%%%%: 1228-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1228-block  2
    #####: 1229:      if (left[l_i] == right[r_i]) {
    %%%%%: 1229-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1230:        // Found a match. Consume it.
    #####: 1231:        costs[l_i + 1][r_i + 1] = costs[l_i][r_i];
    %%%%%: 1231-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####: 1232:        best_move[l_i + 1][r_i + 1] = kMatch;
call    0 never executed
call    1 never executed
    #####: 1233:        continue;
        -: 1234:      }
        -: 1235:
    #####: 1236:      const double add = costs[l_i + 1][r_i];
    %%%%%: 1236-block  0
call    0 never executed
call    1 never executed
    #####: 1237:      const double remove = costs[l_i][r_i + 1];
call    0 never executed
call    1 never executed
    #####: 1238:      const double replace = costs[l_i][r_i];
call    0 never executed
call    1 never executed
    #####: 1239:      if (add < remove && add < replace) {
branch  0 never executed
branch  1 never executed
    %%%%%: 1239-block  0
branch  2 never executed
branch  3 never executed
    #####: 1240:        costs[l_i + 1][r_i + 1] = add + 1;
    %%%%%: 1240-block  0
call    0 never executed
call    1 never executed
    #####: 1241:        best_move[l_i + 1][r_i + 1] = kAdd;
call    0 never executed
call    1 never executed
    #####: 1242:      } else if (remove < add && remove < replace) {
    %%%%%: 1242-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1242-block  1
branch  2 never executed
branch  3 never executed
    #####: 1243:        costs[l_i + 1][r_i + 1] = remove + 1;
    %%%%%: 1243-block  0
call    0 never executed
call    1 never executed
    #####: 1244:        best_move[l_i + 1][r_i + 1] = kRemove;
call    0 never executed
call    1 never executed
        -: 1245:      } else {
        -: 1246:        // We make replace a little more expensive than add/remove to lower
        -: 1247:        // their priority.
    #####: 1248:        costs[l_i + 1][r_i + 1] = replace + 1.00001;
    %%%%%: 1248-block  0
call    0 never executed
call    1 never executed
    #####: 1249:        best_move[l_i + 1][r_i + 1] = kReplace;
call    0 never executed
call    1 never executed
        -: 1250:      }
        -: 1251:    }
        -: 1252:  }
        -: 1253:
        -: 1254:  // Reconstruct the best path. We do it in reverse order.
    #####: 1255:  std::vector<EditType> best_path;
    %%%%%: 1255-block  0
call    0 never executed
    #####: 1256:  for (size_t l_i = left.size(), r_i = right.size(); l_i > 0 || r_i > 0;) {
call    0 never executed
call    1 never executed
    %%%%%: 1256-block  0
branch  2 never executed
branch  3 never executed
    %%%%%: 1256-block  1
branch  4 never executed
branch  5 never executed
    #####: 1257:    EditType move = best_move[l_i][r_i];
    %%%%%: 1257-block  0
call    0 never executed
call    1 never executed
    #####: 1258:    best_path.push_back(move);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1259:    l_i -= move != kAdd;
    #####: 1260:    r_i -= move != kRemove;
    %%%%%: 1260-block  0
        -: 1261:  }
    #####: 1262:  std::reverse(best_path.begin(), best_path.end());
    %%%%%: 1262-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 1263:  return best_path;
    %%%%%: 1263-block  0
    %%%%%: 1263-block  1
        -: 1264:}
        -: 1265:
        -: 1266:namespace {
        -: 1267:
        -: 1268:// Helper class to convert string into ids with deduplication.
        -: 1269:class InternalStrings {
        -: 1270: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_115InternalStrings5GetIdERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1271:  size_t GetId(const std::string& str) {
    #####: 1272:    IdMap::iterator it = ids_.find(str);
    %%%%%: 1272-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1273:    if (it != ids_.end()) return it->second;
    %%%%%: 1273-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1273-block  1
call    4 never executed
    #####: 1274:    size_t id = ids_.size();
    %%%%%: 1274-block  0
call    0 never executed
    #####: 1275:    return ids_[str] = id;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1275-block  0
        -: 1276:  }
        -: 1277:
        -: 1278: private:
        -: 1279:  typedef std::map<std::string, size_t> IdMap;
        -: 1280:  IdMap ids_;
        -: 1281:};
        -: 1282:
        -: 1283:}  // namespace
        -: 1284:
function _ZN7testing8internal13edit_distance21CalculateOptimalEditsERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_ called 0 returned 0% blocks executed 0%
    #####: 1285:std::vector<EditType> CalculateOptimalEdits(
        -: 1286:    const std::vector<std::string>& left,
        -: 1287:    const std::vector<std::string>& right) {
    #####: 1288:  std::vector<size_t> left_ids, right_ids;
    %%%%%: 1288-block  0
call    0 never executed
call    1 never executed
    %%%%%: 1288-block  1
call    2 never executed
call    3 never executed
    $$$$$: 1288-block  2
call    4 never executed
    $$$$$: 1288-block  3
call    5 never executed
        -: 1289:  {
    #####: 1290:    InternalStrings intern_table;
call    0 never executed
    %%%%%: 1290-block  0
call    1 never executed
    $$$$$: 1290-block  1
call    2 never executed
    #####: 1291:    for (size_t i = 0; i < left.size(); ++i) {
    %%%%%: 1291-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1292:      left_ids.push_back(intern_table.GetId(left[i]));
    %%%%%: 1292-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1292-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1292-block  2
    $$$$$: 1292-block  3
        -: 1293:    }
    #####: 1294:    for (size_t i = 0; i < right.size(); ++i) {
    %%%%%: 1294-block  0
    %%%%%: 1294-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1295:      right_ids.push_back(intern_table.GetId(right[i]));
    %%%%%: 1295-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1295-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1295-block  2
    $$$$$: 1295-block  3
        -: 1296:    }
        -: 1297:  }
    #####: 1298:  return CalculateOptimalEdits(left_ids, right_ids);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1298-block  0
        -: 1299:}
        -: 1300:
        -: 1301:namespace {
        -: 1302:
        -: 1303:// Helper class that holds the state for one hunk and prints it out to the
        -: 1304:// stream.
        -: 1305:// It reorders adds/removes when possible to group all removes before all
        -: 1306:// adds. It also adds the hunk header before printint into the stream.
        -: 1307:class Hunk {
        -: 1308: public:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14HunkC2Emm called 0 returned 0% blocks executed 0%
    #####: 1309:  Hunk(size_t left_start, size_t right_start)
    #####: 1310:      : left_start_(left_start),
        -: 1311:        right_start_(right_start),
        -: 1312:        adds_(),
        -: 1313:        removes_(),
    #####: 1314:        common_() {}
    %%%%%: 1314-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 1315:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk8PushLineEcPKc called 0 returned 0% blocks executed 0%
    #####: 1316:  void PushLine(char edit, const char* line) {
    #####: 1317:    switch (edit) {
    %%%%%: 1317-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1318:      case ' ':
    #####: 1319:        ++common_;
    #####: 1320:        FlushEdits();
    %%%%%: 1320-block  0
call    0 never executed
    #####: 1321:        hunk_.push_back(std::make_pair(' ', line));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1321-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1321-block  1
    $$$$$: 1321-block  2
call    6 never executed
    #####: 1322:        break;
    %%%%%: 1322-block  0
    #####: 1323:      case '-':
    #####: 1324:        ++removes_;
    #####: 1325:        hunk_removes_.push_back(std::make_pair('-', line));
    %%%%%: 1325-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1325-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1325-block  2
    $$$$$: 1325-block  3
call    6 never executed
    #####: 1326:        break;
    %%%%%: 1326-block  0
    #####: 1327:      case '+':
    #####: 1328:        ++adds_;
    #####: 1329:        hunk_adds_.push_back(std::make_pair('+', line));
    %%%%%: 1329-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1329-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 1329-block  2
    #####: 1330:        break;
    %%%%%: 1330-block  0
        -: 1331:    }
    #####: 1332:  }
    %%%%%: 1332-block  0
        -: 1333:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk7PrintToEPSo called 0 returned 0% blocks executed 0%
    #####: 1334:  void PrintTo(std::ostream* os) {
    #####: 1335:    PrintHeader(os);
    %%%%%: 1335-block  0
call    0 never executed
    #####: 1336:    FlushEdits();
call    0 never executed
    #####: 1337:    for (std::list<std::pair<char, const char*> >::const_iterator it =
    #####: 1338:             hunk_.begin();
call    0 never executed
call    1 never executed
    #####: 1339:         it != hunk_.end(); ++it) {
    %%%%%: 1339-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1339-block  1
call    5 never executed
    #####: 1340:      *os << it->first << it->second << "\n";
    %%%%%: 1340-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1340-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1340-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
        -: 1341:    }
    #####: 1342:  }
    %%%%%: 1342-block  0
        -: 1343:
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk9has_editsEv called 0 returned 0% blocks executed 0%
    #####: 1344:  bool has_edits() const { return adds_ || removes_; }
    %%%%%: 1344-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1344-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1344-block  2
    %%%%%: 1344-block  3
    %%%%%: 1344-block  4
        -: 1345:
        -: 1346: private:
function _ZN7testing8internal13edit_distance12_GLOBAL__N_14Hunk10FlushEditsEv called 0 returned 0% blocks executed 0%
    #####: 1347:  void FlushEdits() {
    #####: 1348:    hunk_.splice(hunk_.end(), hunk_removes_);
    %%%%%: 1348-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1349:    hunk_.splice(hunk_.end(), hunk_adds_);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 1350:  }
        -: 1351:
        -: 1352:  // Print a unified diff header for one hunk.
        -: 1353:  // The format is
        -: 1354:  //   "@@ -<left_start>,<left_length> +<right_start>,<right_length> @@"
        -: 1355:  // where the left/right parts are omitted if unnecessary.
function _ZNK7testing8internal13edit_distance12_GLOBAL__N_14Hunk11PrintHeaderEPSo called 0 returned 0% blocks executed 0%
    #####: 1356:  void PrintHeader(std::ostream* ss) const {
    #####: 1357:    *ss << "@@ ";
    %%%%%: 1357-block  0
call    0 never executed
    #####: 1358:    if (removes_) {
branch  0 never executed
branch  1 never executed
    #####: 1359:      *ss << "-" << left_start_ << "," << (removes_ + common_);
    %%%%%: 1359-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1360:    }
    #####: 1361:    if (removes_ && adds_) {
    %%%%%: 1361-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1361-block  1
branch  2 never executed
branch  3 never executed
    #####: 1362:      *ss << " ";
    %%%%%: 1362-block  0
call    0 never executed
        -: 1363:    }
    #####: 1364:    if (adds_) {
    %%%%%: 1364-block  0
branch  0 never executed
branch  1 never executed
    #####: 1365:      *ss << "+" << right_start_ << "," << (adds_ + common_);
    %%%%%: 1365-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 1366:    }
    #####: 1367:    *ss << " @@\n";
    %%%%%: 1367-block  0
call    0 never executed
    #####: 1368:  }
        -: 1369:
        -: 1370:  size_t left_start_, right_start_;
        -: 1371:  size_t adds_, removes_, common_;
        -: 1372:  std::list<std::pair<char, const char*> > hunk_, hunk_adds_, hunk_removes_;
        -: 1373:};
        -: 1374:
        -: 1375:}  // namespace
        -: 1376:
        -: 1377:// Create a list of diff hunks in Unified diff format.
        -: 1378:// Each hunk has a header generated by PrintHeader above plus a body with
        -: 1379:// lines prefixed with ' ' for no change, '-' for deletion and '+' for
        -: 1380:// addition.
        -: 1381:// 'context' represents the desired unchanged prefix/suffix around the diff.
        -: 1382:// If two hunks are close enough that their contexts overlap, then they are
        -: 1383:// joined into one hunk.
function _ZN7testing8internal13edit_distance17CreateUnifiedDiffERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS8_EESC_m called 0 returned 0% blocks executed 0%
    #####: 1384:std::string CreateUnifiedDiff(const std::vector<std::string>& left,
        -: 1385:                              const std::vector<std::string>& right,
        -: 1386:                              size_t context) {
    #####: 1387:  const std::vector<EditType> edits = CalculateOptimalEdits(left, right);
    %%%%%: 1387-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 1387-block  1
call    4 never executed
        -: 1388:
    #####: 1389:  size_t l_i = 0, r_i = 0, edit_i = 0;
    #####: 1390:  std::stringstream ss;
    %%%%%: 1390-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1390-block  1
call    3 never executed
    $$$$$: 1390-block  2
call    4 never executed
    #####: 1391:  while (edit_i < edits.size()) {
    %%%%%: 1391-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1391-block  1
        -: 1392:    // Find first edit.
    #####: 1393:    while (edit_i < edits.size() && edits[edit_i] == kMatch) {
    %%%%%: 1393-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1393-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1393-block  2
    %%%%%: 1393-block  3
    %%%%%: 1393-block  4
branch  6 never executed
branch  7 never executed
    #####: 1394:      ++l_i;
    #####: 1395:      ++r_i;
    #####: 1396:      ++edit_i;
    %%%%%: 1396-block  0
        -: 1397:    }
        -: 1398:
        -: 1399:    // Find the first line to include in the hunk.
    #####: 1400:    const size_t prefix_context = std::min(l_i, context);
    %%%%%: 1400-block  0
call    0 never executed
    #####: 1401:    Hunk hunk(l_i - prefix_context + 1, r_i - prefix_context + 1);
call    0 never executed
    $$$$$: 1401-block  0
call    1 never executed
    #####: 1402:    for (size_t i = prefix_context; i > 0; --i) {
    %%%%%: 1402-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1402-block  1
    #####: 1403:      hunk.PushLine(' ', left[l_i - i].c_str());
    %%%%%: 1403-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1404:    }
        -: 1405:
        -: 1406:    // Iterate the edits until we found enough suffix for the hunk or the input
        -: 1407:    // is over.
    #####: 1408:    size_t n_suffix = 0;
    %%%%%: 1408-block  0
    #####: 1409:    for (; edit_i < edits.size(); ++edit_i) {
    %%%%%: 1409-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1410:      if (n_suffix >= context) {
    %%%%%: 1410-block  0
branch  0 never executed
branch  1 never executed
        -: 1411:        // Continue only if the next hunk is very close.
    #####: 1412:        auto it = edits.begin() + static_cast<int>(edit_i);
    %%%%%: 1412-block  0
call    0 never executed
call    1 never executed
    #####: 1413:        while (it != edits.end() && *it == kMatch) ++it;
    %%%%%: 1413-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1413-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1413-block  2
    %%%%%: 1413-block  3
    %%%%%: 1413-block  4
branch  7 never executed
branch  8 never executed
    %%%%%: 1413-block  5
call    9 never executed
    #####: 1414:        if (it == edits.end() ||
    %%%%%: 1414-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1414-block  1
    %%%%%: 1414-block  2
    #####: 1415:            static_cast<size_t>(it - edits.begin()) - edit_i >= context) {
    %%%%%: 1415-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1415-block  1
branch  4 never executed
branch  5 never executed
        -: 1416:          // There is no next edit or it is too far away.
    #####: 1417:          break;
    %%%%%: 1417-block  0
        -: 1418:        }
        -: 1419:      }
        -: 1420:
    #####: 1421:      EditType edit = edits[edit_i];
    %%%%%: 1421-block  0
call    0 never executed
        -: 1422:      // Reset count when a non match is found.
    #####: 1423:      n_suffix = edit == kMatch ? n_suffix + 1 : 0;
branch  0 never executed
branch  1 never executed
    %%%%%: 1423-block  0
    %%%%%: 1423-block  1
        -: 1424:
    #####: 1425:      if (edit == kMatch || edit == kRemove || edit == kReplace) {
    %%%%%: 1425-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1425-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1425-block  2
branch  4 never executed
branch  5 never executed
    #####: 1426:        hunk.PushLine(edit == kMatch ? ' ' : '-', left[l_i].c_str());
    %%%%%: 1426-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1426-block  1
    %%%%%: 1426-block  2
    %%%%%: 1426-block  3
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 1427:      }
    #####: 1428:      if (edit == kAdd || edit == kReplace) {
    %%%%%: 1428-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1428-block  1
branch  2 never executed
branch  3 never executed
    #####: 1429:        hunk.PushLine('+', right[r_i].c_str());
    %%%%%: 1429-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1430:      }
        -: 1431:
        -: 1432:      // Advance indices, depending on edit type.
    #####: 1433:      l_i += edit != kAdd;
    #####: 1434:      r_i += edit != kRemove;
    %%%%%: 1434-block  0
        -: 1435:    }
        -: 1436:
    #####: 1437:    if (!hunk.has_edits()) {
    %%%%%: 1437-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1438:      // We are done. We don't want this hunk.
    #####: 1439:      break;
    %%%%%: 1439-block  0
        -: 1440:    }
        -: 1441:
    #####: 1442:    hunk.PrintTo(&ss);
    %%%%%: 1442-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1443:  }
    #####: 1444:  return ss.str();
    %%%%%: 1444-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1444-block  1
        -: 1445:}
        -: 1446:
        -: 1447:}  // namespace edit_distance
        -: 1448:
        -: 1449:namespace {
        -: 1450:
        -: 1451:// The string representation of the values received in EqFailure() are already
        -: 1452:// escaped. Split them on escaped '\n' boundaries. Leave all other escaped
        -: 1453:// characters the same.
function _ZN7testing8internal12_GLOBAL__N_118SplitEscapedStringERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 1454:std::vector<std::string> SplitEscapedString(const std::string& str) {
    #####: 1455:  std::vector<std::string> lines;
    %%%%%: 1455-block  0
call    0 never executed
    #####: 1456:  size_t start = 0, end = str.size();
call    0 never executed
    #####: 1457:  if (end > 2 && str[0] == '"' && str[end - 1] == '"') {
branch  0 never executed
branch  1 never executed
    %%%%%: 1457-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1457-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1457-block  2
    %%%%%: 1457-block  3
    %%%%%: 1457-block  4
branch  8 never executed
branch  9 never executed
    #####: 1458:    ++start;
    #####: 1459:    --end;
    %%%%%: 1459-block  0
        -: 1460:  }
    #####: 1461:  bool escaped = false;
    #####: 1462:  for (size_t i = start; i + 1 < end; ++i) {
    %%%%%: 1462-block  0
    %%%%%: 1462-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 1462-block  2
    #####: 1463:    if (escaped) {
    %%%%%: 1463-block  0
branch  0 never executed
branch  1 never executed
    #####: 1464:      escaped = false;
    #####: 1465:      if (str[i] == 'n') {
    %%%%%: 1465-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1466:        lines.push_back(str.substr(start, i - start - 1));
    %%%%%: 1466-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1466-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1466-block  2
call    6 never executed
    $$$$$: 1466-block  3
call    7 never executed
    $$$$$: 1466-block  4
    #####: 1467:        start = i + 1;
        -: 1468:      }
        -: 1469:    } else {
    #####: 1470:      escaped = str[i] == '\\';
    %%%%%: 1470-block  0
call    0 never executed
        -: 1471:    }
        -: 1472:  }
    #####: 1473:  lines.push_back(str.substr(start, end - start));
    %%%%%: 1473-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1473-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1473-block  2
call    6 never executed
    $$$$$: 1473-block  3
call    7 never executed
    $$$$$: 1473-block  4
    #####: 1474:  return lines;
    %%%%%: 1474-block  0
        -: 1475:}
        -: 1476:
        -: 1477:}  // namespace
        -: 1478:
        -: 1479:// Constructs and returns the message for an equality assertion
        -: 1480:// (e.g. ASSERT_EQ, EXPECT_STREQ, etc) failure.
        -: 1481://
        -: 1482:// The first four parameters are the expressions used in the assertion
        -: 1483:// and their values, as strings.  For example, for ASSERT_EQ(foo, bar)
        -: 1484:// where foo is 5 and bar is 6, we have:
        -: 1485://
        -: 1486://   lhs_expression: "foo"
        -: 1487://   rhs_expression: "bar"
        -: 1488://   lhs_value:      "5"
        -: 1489://   rhs_value:      "6"
        -: 1490://
        -: 1491:// The ignoring_case parameter is true if and only if the assertion is a
        -: 1492:// *_STRCASEEQ*.  When it's true, the string "Ignoring case" will
        -: 1493:// be inserted into the message.
function _ZN7testing8internal9EqFailureEPKcS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_b called 0 returned 0% blocks executed 0%
    #####: 1494:AssertionResult EqFailure(const char* lhs_expression,
        -: 1495:                          const char* rhs_expression,
        -: 1496:                          const std::string& lhs_value,
        -: 1497:                          const std::string& rhs_value,
        -: 1498:                          bool ignoring_case) {
    #####: 1499:  Message msg;
    %%%%%: 1499-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1499-block  1
call    3 never executed
    #####: 1500:  msg << "Expected equality of these values:";
    %%%%%: 1500-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1501:  msg << "\n  " << lhs_expression;
    %%%%%: 1501-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1501-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1502:  if (lhs_value != lhs_expression) {
    %%%%%: 1502-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1502-block  1
branch  3 never executed
branch  4 never executed
    #####: 1503:    msg << "\n    Which is: " << lhs_value;
    %%%%%: 1503-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1503-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1504:  }
    #####: 1505:  msg << "\n  " << rhs_expression;
    %%%%%: 1505-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1505-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1506:  if (rhs_value != rhs_expression) {
    %%%%%: 1506-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1506-block  1
branch  3 never executed
branch  4 never executed
    #####: 1507:    msg << "\n    Which is: " << rhs_value;
    %%%%%: 1507-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1507-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1508:  }
        -: 1509:
    #####: 1510:  if (ignoring_case) {
    %%%%%: 1510-block  0
branch  0 never executed
branch  1 never executed
    #####: 1511:    msg << "\nIgnoring case";
    %%%%%: 1511-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1512:  }
        -: 1513:
    #####: 1514:  if (!lhs_value.empty() && !rhs_value.empty()) {
    %%%%%: 1514-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1514-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1514-block  2
    %%%%%: 1514-block  3
    %%%%%: 1514-block  4
branch  6 never executed
branch  7 never executed
        -: 1515:    const std::vector<std::string> lhs_lines =
    #####: 1516:        SplitEscapedString(lhs_value);
    %%%%%: 1516-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 1516-block  1
call    4 never executed
        -: 1517:    const std::vector<std::string> rhs_lines =
    #####: 1518:        SplitEscapedString(rhs_value);
    %%%%%: 1518-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1518-block  1
call    3 never executed
    $$$$$: 1518-block  2
call    4 never executed
    #####: 1519:    if (lhs_lines.size() > 1 || rhs_lines.size() > 1) {
    %%%%%: 1519-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1519-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1519-block  2
    %%%%%: 1519-block  3
    %%%%%: 1519-block  4
branch  6 never executed
branch  7 never executed
    #####: 1520:      msg << "\nWith diff:\n"
    %%%%%: 1520-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1521:          << edit_distance::CreateUnifiedDiff(lhs_lines, rhs_lines);
    %%%%%: 1521-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1521-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1521-block  2
call    6 never executed
    $$$$$: 1521-block  3
call    7 never executed
    $$$$$: 1521-block  4
        -: 1522:    }
        -: 1523:  }
        -: 1524:
    #####: 1525:  return AssertionFailure() << msg;
    %%%%%: 1525-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1525-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1525-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1525-block  3
call    9 never executed
call   10 never executed
    %%%%%: 1525-block  4
    $$$$$: 1525-block  5
call   11 never executed
    $$$$$: 1525-block  6
        -: 1526:}
        -: 1527:
        -: 1528:// Constructs a failure message for Boolean assertions such as EXPECT_TRUE.
function _ZN7testing8internal30GetBoolAssertionFailureMessageB5cxx11ERKNS_15AssertionResultEPKcS5_S5_ called 0 returned 0% blocks executed 0%
    #####: 1529:std::string GetBoolAssertionFailureMessage(
        -: 1530:    const AssertionResult& assertion_result,
        -: 1531:    const char* expression_text,
        -: 1532:    const char* actual_predicate_value,
        -: 1533:    const char* expected_predicate_value) {
    #####: 1534:  const char* actual_message = assertion_result.message();
    %%%%%: 1534-block  0
call    0 never executed
    #####: 1535:  Message msg;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1535-block  0
call    3 never executed
    $$$$$: 1535-block  1
call    4 never executed
    #####: 1536:  msg << "Value of: " << expression_text
    %%%%%: 1536-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1536-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1537:      << "\n  Actual: " << actual_predicate_value;
    %%%%%: 1537-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1537-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1538:  if (actual_message[0] != '\0')
    %%%%%: 1538-block  0
branch  0 never executed
branch  1 never executed
    #####: 1539:    msg << " (" << actual_message << ")";
    %%%%%: 1539-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1539-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1539-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1540:  msg << "\nExpected: " << expected_predicate_value;
    %%%%%: 1540-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1540-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1541:  return msg.GetString();
    %%%%%: 1541-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1541-block  1
        -: 1542:}
        -: 1543:
        -: 1544:// Helper function for implementing ASSERT_NEAR.
function _ZN7testing8internal20DoubleNearPredFormatEPKcS2_S2_ddd called 0 returned 0% blocks executed 0%
    #####: 1545:AssertionResult DoubleNearPredFormat(const char* expr1,
        -: 1546:                                     const char* expr2,
        -: 1547:                                     const char* abs_error_expr,
        -: 1548:                                     double val1,
        -: 1549:                                     double val2,
        -: 1550:                                     double abs_error) {
    #####: 1551:  const double diff = fabs(val1 - val2);
    #####: 1552:  if (diff <= abs_error) return AssertionSuccess();
    %%%%%: 1552-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1552-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 1553:
        -: 1554:  // Find the value which is closest to zero.
    #####: 1555:  const double min_abs = std::min(fabs(val1), fabs(val2));
    %%%%%: 1555-block  0
call    0 never executed
        -: 1556:  // Find the distance to the next double from that value.
        -: 1557:  const double epsilon =
    #####: 1558:      nextafter(min_abs, std::numeric_limits<double>::infinity()) - min_abs;
call    0 never executed
        -: 1559:  // Detect the case where abs_error is so small that EXPECT_NEAR is
        -: 1560:  // effectively the same as EXPECT_EQUAL, and give an informative error
        -: 1561:  // message so that the situation can be more easily understood without
        -: 1562:  // requiring exotic floating-point knowledge.
        -: 1563:  // Don't do an epsilon check if abs_error is zero because that implies
        -: 1564:  // that an equality check was actually intended.
    #####: 1565:  if (!(std::isnan)(val1) && !(std::isnan)(val2) && abs_error > 0 &&
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1565-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1565-block  1
branch  6 never executed
branch  7 never executed
    %%%%%: 1565-block  2
    %%%%%: 1565-block  3
    %%%%%: 1565-block  4
branch  8 never executed
branch  9 never executed
    #####: 1566:      abs_error < epsilon) {
    %%%%%: 1566-block  0
branch  0 never executed
branch  1 never executed
    #####: 1567:    return AssertionFailure()
    %%%%%: 1567-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1567-block  1
call    3 never executed
    $$$$$: 1567-block  2
call    4 never executed
    $$$$$: 1567-block  3
    #####: 1568:           << "The difference between " << expr1 << " and " << expr2 << " is "
    %%%%%: 1568-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1568-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1568-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1568-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1568-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1569:           << diff << ", where\n"
    %%%%%: 1569-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1569-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1570:           << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1570-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1570-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1570-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1570-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1571:           << expr2 << " evaluates to " << val2 << ".\nThe abs_error parameter "
    %%%%%: 1571-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1571-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1571-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1571-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1572:           << abs_error_expr << " evaluates to " << abs_error
    %%%%%: 1572-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1572-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1572-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 1573:           << " which is smaller than the minimum distance between doubles for "
    #####: 1574:              "numbers of this magnitude which is "
    %%%%%: 1574-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1575:           << epsilon
    %%%%%: 1575-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1576:           << ", thus making this EXPECT_NEAR check equivalent to "
    #####: 1577:              "EXPECT_EQUAL. Consider using EXPECT_DOUBLE_EQ instead.";
    %%%%%: 1577-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1577-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 1578:  }
    #####: 1579:  return AssertionFailure()
    %%%%%: 1579-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1579-block  1
call    3 never executed
    $$$$$: 1579-block  2
call    4 never executed
    $$$$$: 1579-block  3
    #####: 1580:      << "The difference between " << expr1 << " and " << expr2
    %%%%%: 1580-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1580-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1580-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1580-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1581:      << " is " << diff << ", which exceeds " << abs_error_expr << ", where\n"
    %%%%%: 1581-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1581-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1581-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1581-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1581-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####: 1582:      << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1582-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1582-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1582-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1582-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1583:      << expr2 << " evaluates to " << val2 << ", and\n"
    %%%%%: 1583-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1583-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1583-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1583-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1584:      << abs_error_expr << " evaluates to " << abs_error << ".";
    %%%%%: 1584-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1584-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1584-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1584-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1584-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1585:}
        -: 1586:
        -: 1587:
        -: 1588:// Helper template for implementing FloatLE() and DoubleLE().
        -: 1589:template <typename RawType>
    #####: 1590:AssertionResult FloatingPointLE(const char* expr1,
        -: 1591:                                const char* expr2,
        -: 1592:                                RawType val1,
        -: 1593:                                RawType val2) {
        -: 1594:  // Returns success if val1 is less than val2,
    #####: 1595:  if (val1 < val2) {
    #####: 1596:    return AssertionSuccess();
        -: 1597:  }
        -: 1598:
        -: 1599:  // or if val1 is almost equal to val2.
    #####: 1600:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    #####: 1601:  if (lhs.AlmostEquals(rhs)) {
    #####: 1602:    return AssertionSuccess();
        -: 1603:  }
        -: 1604:
        -: 1605:  // Note that the above two checks will both fail if either val1 or
        -: 1606:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1607:  // any predicate involving a NaN must return false.
        -: 1608:
    #####: 1609:  ::std::stringstream val1_ss;
    #####: 1610:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1611:          << val1;
        -: 1612:
    #####: 1613:  ::std::stringstream val2_ss;
    #####: 1614:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1615:          << val2;
        -: 1616:
        -: 1617:  return AssertionFailure()
    #####: 1618:      << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    #####: 1619:      << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    #####: 1620:      << StringStreamToString(&val2_ss);
        -: 1621:}
------------------
_ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1590:AssertionResult FloatingPointLE(const char* expr1,
        -: 1591:                                const char* expr2,
        -: 1592:                                RawType val1,
        -: 1593:                                RawType val2) {
        -: 1594:  // Returns success if val1 is less than val2,
    #####: 1595:  if (val1 < val2) {
    %%%%%: 1595-block  0
branch  0 never executed
branch  1 never executed
    #####: 1596:    return AssertionSuccess();
    %%%%%: 1596-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1597:  }
        -: 1598:
        -: 1599:  // or if val1 is almost equal to val2.
    #####: 1600:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1600-block  0
call    0 never executed
call    1 never executed
    #####: 1601:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1601-block  0
branch  3 never executed
branch  4 never executed
    #####: 1602:    return AssertionSuccess();
    %%%%%: 1602-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1603:  }
        -: 1604:
        -: 1605:  // Note that the above two checks will both fail if either val1 or
        -: 1606:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1607:  // any predicate involving a NaN must return false.
        -: 1608:
    #####: 1609:  ::std::stringstream val1_ss;
    %%%%%: 1609-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 1609-block  1
call    4 never executed
    #####: 1610:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1610-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1611:          << val1;
    %%%%%: 1611-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1612:
    #####: 1613:  ::std::stringstream val2_ss;
    %%%%%: 1613-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1613-block  1
call    3 never executed
    #####: 1614:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1614-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1615:          << val2;
    %%%%%: 1615-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1616:
        -: 1617:  return AssertionFailure()
    #####: 1618:      << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1618-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1618-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1618-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1618-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1618-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1618-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
    $$$$$: 1618-block  6
call   19 never executed
    $$$$$: 1618-block  7
    #####: 1619:      << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1619-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1619-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1619-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1619-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    $$$$$: 1619-block  4
call   13 never executed
    $$$$$: 1619-block  5
    #####: 1620:      << StringStreamToString(&val2_ss);
    %%%%%: 1620-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1620-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1620-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1620-block  3
call    9 never executed
call   10 never executed
    $$$$$: 1620-block  4
call   11 never executed
    $$$$$: 1620-block  5
        -: 1621:}
------------------
_ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_:
function _ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_ called 0 returned 0% blocks executed 0%
    #####: 1590:AssertionResult FloatingPointLE(const char* expr1,
        -: 1591:                                const char* expr2,
        -: 1592:                                RawType val1,
        -: 1593:                                RawType val2) {
        -: 1594:  // Returns success if val1 is less than val2,
    #####: 1595:  if (val1 < val2) {
    %%%%%: 1595-block  0
branch  0 never executed
branch  1 never executed
    #####: 1596:    return AssertionSuccess();
    %%%%%: 1596-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1597:  }
        -: 1598:
        -: 1599:  // or if val1 is almost equal to val2.
    #####: 1600:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1600-block  0
call    0 never executed
call    1 never executed
    #####: 1601:  if (lhs.AlmostEquals(rhs)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1601-block  0
branch  3 never executed
branch  4 never executed
    #####: 1602:    return AssertionSuccess();
    %%%%%: 1602-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1603:  }
        -: 1604:
        -: 1605:  // Note that the above two checks will both fail if either val1 or
        -: 1606:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1607:  // any predicate involving a NaN must return false.
        -: 1608:
    #####: 1609:  ::std::stringstream val1_ss;
    %%%%%: 1609-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 1609-block  1
call    4 never executed
    #####: 1610:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1610-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1611:          << val1;
    %%%%%: 1611-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1612:
    #####: 1613:  ::std::stringstream val2_ss;
    %%%%%: 1613-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1613-block  1
call    3 never executed
    #####: 1614:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1614-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1615:          << val2;
    %%%%%: 1615-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1616:
        -: 1617:  return AssertionFailure()
    #####: 1618:      << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1618-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1618-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1618-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1618-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1618-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 1618-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
    $$$$$: 1618-block  6
call   19 never executed
    $$$$$: 1618-block  7
    #####: 1619:      << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1619-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1619-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1619-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1619-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
    $$$$$: 1619-block  4
call   13 never executed
    $$$$$: 1619-block  5
    #####: 1620:      << StringStreamToString(&val2_ss);
    %%%%%: 1620-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1620-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1620-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1620-block  3
call    9 never executed
call   10 never executed
    $$$$$: 1620-block  4
call   11 never executed
    $$$$$: 1620-block  5
        -: 1621:}
------------------
        -: 1622:
        -: 1623:}  // namespace internal
        -: 1624:
        -: 1625:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1626:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing7FloatLEEPKcS1_ff called 0 returned 0% blocks executed 0%
    #####: 1627:AssertionResult FloatLE(const char* expr1, const char* expr2,
        -: 1628:                        float val1, float val2) {
    #####: 1629:  return internal::FloatingPointLE<float>(expr1, expr2, val1, val2);
    %%%%%: 1629-block  0
call    0 never executed
        -: 1630:}
        -: 1631:
        -: 1632:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1633:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
function _ZN7testing8DoubleLEEPKcS1_dd called 0 returned 0% blocks executed 0%
    #####: 1634:AssertionResult DoubleLE(const char* expr1, const char* expr2,
        -: 1635:                         double val1, double val2) {
    #####: 1636:  return internal::FloatingPointLE<double>(expr1, expr2, val1, val2);
    %%%%%: 1636-block  0
call    0 never executed
        -: 1637:}
        -: 1638:
        -: 1639:namespace internal {
        -: 1640:
        -: 1641:// The helper function for {ASSERT|EXPECT}_STREQ.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_S2_S2_ called 1 returned 100% blocks executed 29%
        1: 1642:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 1643:                               const char* rhs_expression,
        -: 1644:                               const char* lhs,
        -: 1645:                               const char* rhs) {
        1: 1646:  if (String::CStringEquals(lhs, rhs)) {
        1: 1646-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 1647:    return AssertionSuccess();
        1: 1647-block  0
call    0 returned 1
        -: 1648:  }
        -: 1649:
        -: 1650:  return EqFailure(lhs_expression,
        -: 1651:                   rhs_expression,
    #####: 1652:                   PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1652-block  0
call    3 never executed
    $$$$$: 1652-block  1
call    4 never executed
    $$$$$: 1652-block  2
    #####: 1653:                   PrintToString(rhs),
    %%%%%: 1653-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1653-block  1
call    2 never executed
    #####: 1654:                   false);
    %%%%%: 1654-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1655:}
        -: 1656:
        -: 1657:// The helper function for {ASSERT|EXPECT}_STRCASEEQ.
function _ZN7testing8internal18CmpHelperSTRCASEEQEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1658:AssertionResult CmpHelperSTRCASEEQ(const char* lhs_expression,
        -: 1659:                                   const char* rhs_expression,
        -: 1660:                                   const char* lhs,
        -: 1661:                                   const char* rhs) {
    #####: 1662:  if (String::CaseInsensitiveCStringEquals(lhs, rhs)) {
    %%%%%: 1662-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1663:    return AssertionSuccess();
    %%%%%: 1663-block  0
call    0 never executed
        -: 1664:  }
        -: 1665:
        -: 1666:  return EqFailure(lhs_expression,
        -: 1667:                   rhs_expression,
    #####: 1668:                   PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1668-block  0
call    3 never executed
    $$$$$: 1668-block  1
call    4 never executed
    $$$$$: 1668-block  2
    #####: 1669:                   PrintToString(rhs),
    %%%%%: 1669-block  0
call    0 never executed
call    1 never executed
    $$$$$: 1669-block  1
call    2 never executed
    #####: 1670:                   true);
    %%%%%: 1670-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1671:}
        -: 1672:
        -: 1673:// The helper function for {ASSERT|EXPECT}_STRNE.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1674:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 1675:                               const char* s2_expression,
        -: 1676:                               const char* s1,
        -: 1677:                               const char* s2) {
    #####: 1678:  if (!String::CStringEquals(s1, s2)) {
    %%%%%: 1678-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1679:    return AssertionSuccess();
    %%%%%: 1679-block  0
call    0 never executed
        -: 1680:  } else {
    #####: 1681:    return AssertionFailure() << "Expected: (" << s1_expression << ") != ("
    %%%%%: 1681-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1681-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1681-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 1681-block  3
call   10 never executed
    $$$$$: 1681-block  4
call   11 never executed
    #####: 1682:                              << s2_expression << "), actual: \""
    %%%%%: 1682-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1682-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1683:                              << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1683-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1683-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1683-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1683-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1683-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1684:  }
        -: 1685:}
        -: 1686:
        -: 1687:// The helper function for {ASSERT|EXPECT}_STRCASENE.
function _ZN7testing8internal18CmpHelperSTRCASENEEPKcS2_S2_S2_ called 0 returned 0% blocks executed 0%
    #####: 1688:AssertionResult CmpHelperSTRCASENE(const char* s1_expression,
        -: 1689:                                   const char* s2_expression,
        -: 1690:                                   const char* s1,
        -: 1691:                                   const char* s2) {
    #####: 1692:  if (!String::CaseInsensitiveCStringEquals(s1, s2)) {
    %%%%%: 1692-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1693:    return AssertionSuccess();
    %%%%%: 1693-block  0
call    0 never executed
        -: 1694:  } else {
    #####: 1695:    return AssertionFailure()
    %%%%%: 1695-block  0
call    0 never executed
    %%%%%: 1695-block  1
call    1 never executed
    $$$$$: 1695-block  2
call    2 never executed
    #####: 1696:        << "Expected: (" << s1_expression << ") != ("
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1696-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1696-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1697:        << s2_expression << ") (ignoring case), actual: \""
    %%%%%: 1697-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1697-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1698:        << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1698-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1698-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1698-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1698-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1698-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1699:  }
        -: 1700:}
        -: 1701:
        -: 1702:}  // namespace internal
        -: 1703:
        -: 1704:namespace {
        -: 1705:
        -: 1706:// Helper functions for implementing IsSubString() and IsNotSubstring().
        -: 1707:
        -: 1708:// This group of overloaded functions return true if and only if needle
        -: 1709:// is a substring of haystack.  NULL is considered a substring of
        -: 1710:// itself only.
        -: 1711:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 1712:bool IsSubstringPred(const char* needle, const char* haystack) {
    #####: 1713:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1713-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1713-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1713-block  2
        -: 1714:
    #####: 1715:  return strstr(haystack, needle) != nullptr;
    %%%%%: 1715-block  0
        -: 1716:}
        -: 1717:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredEPKwS2_ called 0 returned 0% blocks executed 0%
    #####: 1718:bool IsSubstringPred(const wchar_t* needle, const wchar_t* haystack) {
    #####: 1719:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1719-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1719-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 1719-block  2
        -: 1720:
    #####: 1721:  return wcsstr(haystack, needle) != nullptr;
    %%%%%: 1721-block  0
        -: 1722:}
        -: 1723:
        -: 1724:// StringType here can be either ::std::string or ::std::wstring.
        -: 1725:template <typename StringType>
    #####: 1726:bool IsSubstringPred(const StringType& needle,
        -: 1727:                     const StringType& haystack) {
    #####: 1728:  return haystack.find(needle) != StringType::npos;
        -: 1729:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1726:bool IsSubstringPred(const StringType& needle,
        -: 1727:                     const StringType& haystack) {
    #####: 1728:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1728-block  0
call    0 never executed
        -: 1729:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_:
function _ZN7testing12_GLOBAL__N_115IsSubstringPredINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKT_SA_ called 0 returned 0% blocks executed 0%
    #####: 1726:bool IsSubstringPred(const StringType& needle,
        -: 1727:                     const StringType& haystack) {
    #####: 1728:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1728-block  0
call    0 never executed
        -: 1729:}
------------------
        -: 1730:
        -: 1731:// This function implements either IsSubstring() or IsNotSubstring(),
        -: 1732:// depending on the value of the expected_to_be_substring parameter.
        -: 1733:// StringType here can be const char*, const wchar_t*, ::std::string,
        -: 1734:// or ::std::wstring.
        -: 1735:template <typename StringType>
    #####: 1736:AssertionResult IsSubstringImpl(
        -: 1737:    bool expected_to_be_substring,
        -: 1738:    const char* needle_expr, const char* haystack_expr,
        -: 1739:    const StringType& needle, const StringType& haystack) {
    #####: 1740:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    #####: 1741:    return AssertionSuccess();
        -: 1742:
    #####: 1743:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1744:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1745:  return AssertionFailure()
    #####: 1746:      << "Value of: " << needle_expr << "\n"
    #####: 1747:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    #####: 1748:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    #####: 1749:      << "a substring of " << haystack_expr << "\n"
    #####: 1750:      << "Which is: " << begin_string_quote << haystack << "\"";
        -: 1751:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1736:AssertionResult IsSubstringImpl(
        -: 1737:    bool expected_to_be_substring,
        -: 1738:    const char* needle_expr, const char* haystack_expr,
        -: 1739:    const StringType& needle, const StringType& haystack) {
    #####: 1740:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1740-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1741:    return AssertionSuccess();
    %%%%%: 1741-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1742:
    #####: 1743:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1744:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1745:  return AssertionFailure()
    #####: 1746:      << "Value of: " << needle_expr << "\n"
    %%%%%: 1746-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1746-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1746-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1746-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1746-block  4
call   12 never executed
    $$$$$: 1746-block  5
    #####: 1747:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1747-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1747-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1747-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1747-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1748:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1748-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1748-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1748-block  2
    %%%%%: 1748-block  3
    %%%%%: 1748-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1748-block  5
call    8 never executed
    $$$$$: 1748-block  6
    #####: 1749:      << "a substring of " << haystack_expr << "\n"
    %%%%%: 1749-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1749-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1749-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1750:      << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1750-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1750-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1750-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1750-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1750-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1751:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS_15AssertionResultEbPKcSA_RKT_SD_ called 0 returned 0% blocks executed 0%
    #####: 1736:AssertionResult IsSubstringImpl(
        -: 1737:    bool expected_to_be_substring,
        -: 1738:    const char* needle_expr, const char* haystack_expr,
        -: 1739:    const StringType& needle, const StringType& haystack) {
    #####: 1740:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1740-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1741:    return AssertionSuccess();
    %%%%%: 1741-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1742:
    #####: 1743:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1744:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1745:  return AssertionFailure()
    #####: 1746:      << "Value of: " << needle_expr << "\n"
    %%%%%: 1746-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1746-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1746-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1746-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1746-block  4
call   12 never executed
    $$$$$: 1746-block  5
    #####: 1747:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1747-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1747-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1747-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1747-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1748:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1748-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1748-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1748-block  2
    %%%%%: 1748-block  3
    %%%%%: 1748-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1748-block  5
call    8 never executed
    $$$$$: 1748-block  6
    #####: 1749:      << "a substring of " << haystack_expr << "\n"
    %%%%%: 1749-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1749-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1749-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1750:      << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1750-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1750-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1750-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1750-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1750-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1751:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_ called 0 returned 0% blocks executed 0%
    #####: 1736:AssertionResult IsSubstringImpl(
        -: 1737:    bool expected_to_be_substring,
        -: 1738:    const char* needle_expr, const char* haystack_expr,
        -: 1739:    const StringType& needle, const StringType& haystack) {
    #####: 1740:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1740-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1741:    return AssertionSuccess();
    %%%%%: 1741-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1742:
    #####: 1743:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1744:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1745:  return AssertionFailure()
    #####: 1746:      << "Value of: " << needle_expr << "\n"
    %%%%%: 1746-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1746-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1746-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1746-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1746-block  4
call   12 never executed
    $$$$$: 1746-block  5
    #####: 1747:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1747-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1747-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1747-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1747-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1748:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1748-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1748-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1748-block  2
    %%%%%: 1748-block  3
    %%%%%: 1748-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1748-block  5
call    8 never executed
    $$$$$: 1748-block  6
    #####: 1749:      << "a substring of " << haystack_expr << "\n"
    %%%%%: 1749-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1749-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1749-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1750:      << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1750-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1750-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1750-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1750-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1750-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1751:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_:
function _ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_ called 0 returned 0% blocks executed 0%
    #####: 1736:AssertionResult IsSubstringImpl(
        -: 1737:    bool expected_to_be_substring,
        -: 1738:    const char* needle_expr, const char* haystack_expr,
        -: 1739:    const StringType& needle, const StringType& haystack) {
    #####: 1740:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1740-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1741:    return AssertionSuccess();
    %%%%%: 1741-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1742:
    #####: 1743:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1744:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
        -: 1745:  return AssertionFailure()
    #####: 1746:      << "Value of: " << needle_expr << "\n"
    %%%%%: 1746-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1746-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1746-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1746-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 1746-block  4
call   12 never executed
    $$$$$: 1746-block  5
    #####: 1747:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1747-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1747-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1747-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1747-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 1748:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1748-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1748-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 1748-block  2
    %%%%%: 1748-block  3
    %%%%%: 1748-block  4
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1748-block  5
call    8 never executed
    $$$$$: 1748-block  6
    #####: 1749:      << "a substring of " << haystack_expr << "\n"
    %%%%%: 1749-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1749-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1749-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 1750:      << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1750-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1750-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1750-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1750-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 1750-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -: 1751:}
------------------
        -: 1752:
        -: 1753:}  // namespace
        -: 1754:
        -: 1755:// IsSubstring() and IsNotSubstring() check whether needle is a
        -: 1756:// substring of haystack (NULL is considered a substring of itself
        -: 1757:// only), and return an appropriate error message when they fail.
        -: 1758:
function _ZN7testing11IsSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1759:AssertionResult IsSubstring(
        -: 1760:    const char* needle_expr, const char* haystack_expr,
        -: 1761:    const char* needle, const char* haystack) {
    #####: 1762:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1762-block  0
call    0 never executed
        -: 1763:}
        -: 1764:
function _ZN7testing11IsSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1765:AssertionResult IsSubstring(
        -: 1766:    const char* needle_expr, const char* haystack_expr,
        -: 1767:    const wchar_t* needle, const wchar_t* haystack) {
    #####: 1768:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1768-block  0
call    0 never executed
        -: 1769:}
        -: 1770:
function _ZN7testing14IsNotSubstringEPKcS1_S1_S1_ called 0 returned 0% blocks executed 0%
    #####: 1771:AssertionResult IsNotSubstring(
        -: 1772:    const char* needle_expr, const char* haystack_expr,
        -: 1773:    const char* needle, const char* haystack) {
    #####: 1774:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1774-block  0
call    0 never executed
        -: 1775:}
        -: 1776:
function _ZN7testing14IsNotSubstringEPKcS1_PKwS3_ called 0 returned 0% blocks executed 0%
    #####: 1777:AssertionResult IsNotSubstring(
        -: 1778:    const char* needle_expr, const char* haystack_expr,
        -: 1779:    const wchar_t* needle, const wchar_t* haystack) {
    #####: 1780:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1780-block  0
call    0 never executed
        -: 1781:}
        -: 1782:
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1783:AssertionResult IsSubstring(
        -: 1784:    const char* needle_expr, const char* haystack_expr,
        -: 1785:    const ::std::string& needle, const ::std::string& haystack) {
    #####: 1786:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1786-block  0
call    0 never executed
        -: 1787:}
        -: 1788:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1789:AssertionResult IsNotSubstring(
        -: 1790:    const char* needle_expr, const char* haystack_expr,
        -: 1791:    const ::std::string& needle, const ::std::string& haystack) {
    #####: 1792:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1792-block  0
call    0 never executed
        -: 1793:}
        -: 1794:
        -: 1795:#if GTEST_HAS_STD_WSTRING
function _ZN7testing11IsSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1796:AssertionResult IsSubstring(
        -: 1797:    const char* needle_expr, const char* haystack_expr,
        -: 1798:    const ::std::wstring& needle, const ::std::wstring& haystack) {
    #####: 1799:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1799-block  0
call    0 never executed
        -: 1800:}
        -: 1801:
function _ZN7testing14IsNotSubstringEPKcS1_RKNSt7__cxx1112basic_stringIwSt11char_traitsIwESaIwEEES9_ called 0 returned 0% blocks executed 0%
    #####: 1802:AssertionResult IsNotSubstring(
        -: 1803:    const char* needle_expr, const char* haystack_expr,
        -: 1804:    const ::std::wstring& needle, const ::std::wstring& haystack) {
    #####: 1805:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1805-block  0
call    0 never executed
        -: 1806:}
        -: 1807:#endif  // GTEST_HAS_STD_WSTRING
        -: 1808:
        -: 1809:namespace internal {
        -: 1810:
        -: 1811:#if GTEST_OS_WINDOWS
        -: 1812:
        -: 1813:namespace {
        -: 1814:
        -: 1815:// Helper function for IsHRESULT{SuccessFailure} predicates
        -: 1816:AssertionResult HRESULTFailureHelper(const char* expr,
        -: 1817:                                     const char* expected,
        -: 1818:                                     long hr) {  // NOLINT
        -: 1819:# if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_TV_TITLE
        -: 1820:
        -: 1821:  // Windows CE doesn't support FormatMessage.
        -: 1822:  const char error_text[] = "";
        -: 1823:
        -: 1824:# else
        -: 1825:
        -: 1826:  // Looks up the human-readable system message for the HRESULT code
        -: 1827:  // and since we're not passing any params to FormatMessage, we don't
        -: 1828:  // want inserts expanded.
        -: 1829:  const DWORD kFlags = FORMAT_MESSAGE_FROM_SYSTEM |
        -: 1830:                       FORMAT_MESSAGE_IGNORE_INSERTS;
        -: 1831:  const DWORD kBufSize = 4096;
        -: 1832:  // Gets the system's human readable message string for this HRESULT.
        -: 1833:  char error_text[kBufSize] = { '\0' };
        -: 1834:  DWORD message_length = ::FormatMessageA(kFlags,
        -: 1835:                                          0,   // no source, we're asking system
        -: 1836:                                          static_cast<DWORD>(hr),  // the error
        -: 1837:                                          0,   // no line width restrictions
        -: 1838:                                          error_text,  // output buffer
        -: 1839:                                          kBufSize,    // buf size
        -: 1840:                                          nullptr);  // no arguments for inserts
        -: 1841:  // Trims tailing white space (FormatMessage leaves a trailing CR-LF)
        -: 1842:  for (; message_length && IsSpace(error_text[message_length - 1]);
        -: 1843:          --message_length) {
        -: 1844:    error_text[message_length - 1] = '\0';
        -: 1845:  }
        -: 1846:
        -: 1847:# endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1848:
        -: 1849:  const std::string error_hex("0x" + String::FormatHexInt(hr));
        -: 1850:  return ::testing::AssertionFailure()
        -: 1851:      << "Expected: " << expr << " " << expected << ".\n"
        -: 1852:      << "  Actual: " << error_hex << " " << error_text << "\n";
        -: 1853:}
        -: 1854:
        -: 1855:}  // namespace
        -: 1856:
        -: 1857:AssertionResult IsHRESULTSuccess(const char* expr, long hr) {  // NOLINT
        -: 1858:  if (SUCCEEDED(hr)) {
        -: 1859:    return AssertionSuccess();
        -: 1860:  }
        -: 1861:  return HRESULTFailureHelper(expr, "succeeds", hr);
        -: 1862:}
        -: 1863:
        -: 1864:AssertionResult IsHRESULTFailure(const char* expr, long hr) {  // NOLINT
        -: 1865:  if (FAILED(hr)) {
        -: 1866:    return AssertionSuccess();
        -: 1867:  }
        -: 1868:  return HRESULTFailureHelper(expr, "fails", hr);
        -: 1869:}
        -: 1870:
        -: 1871:#endif  // GTEST_OS_WINDOWS
        -: 1872:
        -: 1873:// Utility functions for encoding Unicode text (wide strings) in
        -: 1874:// UTF-8.
        -: 1875:
        -: 1876:// A Unicode code-point can have up to 21 bits, and is encoded in UTF-8
        -: 1877:// like this:
        -: 1878://
        -: 1879:// Code-point length   Encoding
        -: 1880://   0 -  7 bits       0xxxxxxx
        -: 1881://   8 - 11 bits       110xxxxx 10xxxxxx
        -: 1882://  12 - 16 bits       1110xxxx 10xxxxxx 10xxxxxx
        -: 1883://  17 - 21 bits       11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
        -: 1884:
        -: 1885:// The maximum code-point a one-byte UTF-8 sequence can represent.
        -: 1886:constexpr uint32_t kMaxCodePoint1 = (static_cast<uint32_t>(1) <<  7) - 1;
        -: 1887:
        -: 1888:// The maximum code-point a two-byte UTF-8 sequence can represent.
        -: 1889:constexpr uint32_t kMaxCodePoint2 = (static_cast<uint32_t>(1) << (5 + 6)) - 1;
        -: 1890:
        -: 1891:// The maximum code-point a three-byte UTF-8 sequence can represent.
        -: 1892:constexpr uint32_t kMaxCodePoint3 = (static_cast<uint32_t>(1) << (4 + 2*6)) - 1;
        -: 1893:
        -: 1894:// The maximum code-point a four-byte UTF-8 sequence can represent.
        -: 1895:constexpr uint32_t kMaxCodePoint4 = (static_cast<uint32_t>(1) << (3 + 3*6)) - 1;
        -: 1896:
        -: 1897:// Chops off the n lowest bits from a bit pattern.  Returns the n
        -: 1898:// lowest bits.  As a side effect, the original bit pattern will be
        -: 1899:// shifted to the right by n bits.
function _ZN7testing8internal11ChopLowBitsEPji called 0 returned 0% blocks executed 0%
    #####: 1900:inline uint32_t ChopLowBits(uint32_t* bits, int n) {
    #####: 1901:  const uint32_t low_bits = *bits & ((static_cast<uint32_t>(1) << n) - 1);
    #####: 1902:  *bits >>= n;
    #####: 1903:  return low_bits;
    %%%%%: 1903-block  0
        -: 1904:}
        -: 1905:
        -: 1906:// Converts a Unicode code point to a narrow string in UTF-8 encoding.
        -: 1907:// code_point parameter is of type uint32_t because wchar_t may not be
        -: 1908:// wide enough to contain a code point.
        -: 1909:// If the code_point is not a valid Unicode code point
        -: 1910:// (i.e. outside of Unicode range U+0 to U+10FFFF) it will be converted
        -: 1911:// to "(Invalid Unicode 0xXXXXXXXX)".
function _ZN7testing8internal15CodePointToUtf8B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 1912:std::string CodePointToUtf8(uint32_t code_point) {
    #####: 1913:  if (code_point > kMaxCodePoint4) {
    %%%%%: 1913-block  0
branch  0 never executed
branch  1 never executed
    #####: 1914:    return "(Invalid Unicode 0x" + String::FormatHexUInt32(code_point) + ")";
    %%%%%: 1914-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1914-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1914-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 1914-block  3
call    9 never executed
call   10 never executed
    $$$$$: 1914-block  4
call   11 never executed
    $$$$$: 1914-block  5
    $$$$$: 1914-block  6
call   12 never executed
    $$$$$: 1914-block  7
        -: 1915:  }
        -: 1916:
        -: 1917:  char str[5];  // Big enough for the largest valid code point.
    #####: 1918:  if (code_point <= kMaxCodePoint1) {
    %%%%%: 1918-block  0
branch  0 never executed
branch  1 never executed
    #####: 1919:    str[1] = '\0';
    #####: 1920:    str[0] = static_cast<char>(code_point);                          // 0xxxxxxx
    %%%%%: 1920-block  0
    #####: 1921:  } else if (code_point <= kMaxCodePoint2) {
    %%%%%: 1921-block  0
branch  0 never executed
branch  1 never executed
    #####: 1922:    str[2] = '\0';
    #####: 1923:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1923-block  0
call    0 never executed
    #####: 1924:    str[0] = static_cast<char>(0xC0 | code_point);                   // 110xxxxx
    #####: 1925:  } else if (code_point <= kMaxCodePoint3) {
    %%%%%: 1925-block  0
branch  0 never executed
branch  1 never executed
    #####: 1926:    str[3] = '\0';
    #####: 1927:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1927-block  0
call    0 never executed
    #####: 1928:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1929:    str[0] = static_cast<char>(0xE0 | code_point);                   // 1110xxxx
        -: 1930:  } else {  // code_point <= kMaxCodePoint4
    #####: 1931:    str[4] = '\0';
    #####: 1932:    str[3] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1932-block  0
call    0 never executed
    #####: 1933:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1934:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
call    0 never executed
    #####: 1935:    str[0] = static_cast<char>(0xF0 | code_point);                   // 11110xxx
        -: 1936:  }
    #####: 1937:  return str;
    %%%%%: 1937-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1937-block  1
call    4 never executed
    $$$$$: 1937-block  2
call    5 never executed
    $$$$$: 1937-block  3
        -: 1938:}
        -: 1939:
        -: 1940:// The following two functions only make sense if the system
        -: 1941:// uses UTF-16 for wide string encoding. All supported systems
        -: 1942:// with 16 bit wchar_t (Windows, Cygwin) do use UTF-16.
        -: 1943:
        -: 1944:// Determines if the arguments constitute UTF-16 surrogate pair
        -: 1945:// and thus should be combined into a single Unicode code point
        -: 1946:// using CreateCodePointFromUtf16SurrogatePair.
function _ZN7testing8internal20IsUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 1947:inline bool IsUtf16SurrogatePair(wchar_t first, wchar_t second) {
        -: 1948:  return sizeof(wchar_t) == 2 &&
    #####: 1949:      (first & 0xFC00) == 0xD800 && (second & 0xFC00) == 0xDC00;
    %%%%%: 1949-block  0
        -: 1950:}
        -: 1951:
        -: 1952:// Creates a Unicode code point from UTF16 surrogate pair.
function _ZN7testing8internal37CreateCodePointFromUtf16SurrogatePairEww called 0 returned 0% blocks executed 0%
    #####: 1953:inline uint32_t CreateCodePointFromUtf16SurrogatePair(wchar_t first,
        -: 1954:                                                      wchar_t second) {
    #####: 1955:  const auto first_u = static_cast<uint32_t>(first);
    #####: 1956:  const auto second_u = static_cast<uint32_t>(second);
    #####: 1957:  const uint32_t mask = (1 << 10) - 1;
        -: 1958:  return (sizeof(wchar_t) == 2)
        -: 1959:             ? (((first_u & mask) << 10) | (second_u & mask)) + 0x10000
        -: 1960:             :
        -: 1961:             // This function should not be called when the condition is
        -: 1962:             // false, but we provide a sensible default in case it is.
    #####: 1963:             first_u;
    %%%%%: 1963-block  0
        -: 1964:}
        -: 1965:
        -: 1966:// Converts a wide string to a narrow string in UTF-8 encoding.
        -: 1967:// The wide string is assumed to have the following encoding:
        -: 1968://   UTF-16 if sizeof(wchar_t) == 2 (on Windows, Cygwin)
        -: 1969://   UTF-32 if sizeof(wchar_t) == 4 (on Linux)
        -: 1970:// Parameter str points to a null-terminated wide string.
        -: 1971:// Parameter num_chars may additionally limit the number
        -: 1972:// of wchar_t characters processed. -1 is used when the entire string
        -: 1973:// should be processed.
        -: 1974:// If the string contains code points that are not valid Unicode code points
        -: 1975:// (i.e. outside of Unicode range U+0 to U+10FFFF) they will be output
        -: 1976:// as '(Invalid Unicode 0xXXXXXXXX)'. If the string is in UTF16 encoding
        -: 1977:// and contains invalid UTF-16 surrogate pairs, values in those pairs
        -: 1978:// will be encoded as individual Unicode characters from Basic Normal Plane.
function _ZN7testing8internal16WideStringToUtf8B5cxx11EPKwi called 0 returned 0% blocks executed 0%
    #####: 1979:std::string WideStringToUtf8(const wchar_t* str, int num_chars) {
    #####: 1980:  if (num_chars == -1)
    %%%%%: 1980-block  0
branch  0 never executed
branch  1 never executed
    #####: 1981:    num_chars = static_cast<int>(wcslen(str));
    %%%%%: 1981-block  0
        -: 1982:
    #####: 1983:  ::std::stringstream stream;
    %%%%%: 1983-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1983-block  1
call    3 never executed
    $$$$$: 1983-block  2
call    4 never executed
    #####: 1984:  for (int i = 0; i < num_chars; ++i) {
    %%%%%: 1984-block  0
    %%%%%: 1984-block  1
branch  0 never executed
branch  1 never executed
        -: 1985:    uint32_t unicode_code_point;
        -: 1986:
    #####: 1987:    if (str[i] == L'\0') {
    %%%%%: 1987-block  0
branch  0 never executed
branch  1 never executed
    #####: 1988:      break;
    %%%%%: 1988-block  0
    #####: 1989:    } else if (i + 1 < num_chars && IsUtf16SurrogatePair(str[i], str[i + 1])) {
    %%%%%: 1989-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 1989-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1989-block  2
    %%%%%: 1989-block  3
    %%%%%: 1989-block  4
branch  5 never executed
branch  6 never executed
    #####: 1990:      unicode_code_point = CreateCodePointFromUtf16SurrogatePair(str[i],
    #####: 1991:                                                                 str[i + 1]);
    %%%%%: 1991-block  0
call    0 never executed
    #####: 1992:      i++;
        -: 1993:    } else {
    #####: 1994:      unicode_code_point = static_cast<uint32_t>(str[i]);
    %%%%%: 1994-block  0
        -: 1995:    }
        -: 1996:
    #####: 1997:    stream << CodePointToUtf8(unicode_code_point);
    %%%%%: 1997-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1997-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 1997-block  2
call    6 never executed
    $$$$$: 1997-block  3
call    7 never executed
    $$$$$: 1997-block  4
        -: 1998:  }
    #####: 1999:  return StringStreamToString(&stream);
    %%%%%: 1999-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 1999-block  1
        -: 2000:}
        -: 2001:
        -: 2002:// Converts a wide C string to an std::string using the UTF-8 encoding.
        -: 2003:// NULL will be converted to "(null)".
function _ZN7testing8internal6String15ShowWideCStringB5cxx11EPKw called 0 returned 0% blocks executed 0%
    #####: 2004:std::string String::ShowWideCString(const wchar_t * wide_c_str) {
    #####: 2005:  if (wide_c_str == nullptr) return "(null)";
    %%%%%: 2005-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2005-block  1
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2005-block  2
call    6 never executed
    $$$$$: 2005-block  3
call    7 never executed
        -: 2006:
    #####: 2007:  return internal::WideStringToUtf8(wide_c_str, -1);
    %%%%%: 2007-block  0
call    0 never executed
        -: 2008:}
        -: 2009:
        -: 2010:// Compares two wide C strings.  Returns true if and only if they have the
        -: 2011:// same content.
        -: 2012://
        -: 2013:// Unlike wcscmp(), this function can handle NULL argument(s).  A NULL
        -: 2014:// C string is considered different to any non-NULL C string,
        -: 2015:// including the empty string.
function _ZN7testing8internal6String17WideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2016:bool String::WideCStringEquals(const wchar_t * lhs, const wchar_t * rhs) {
    #####: 2017:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2017-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2017-block  1
        -: 2018:
    #####: 2019:  if (rhs == nullptr) return false;
    %%%%%: 2019-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2019-block  1
        -: 2020:
    #####: 2021:  return wcscmp(lhs, rhs) == 0;
    %%%%%: 2021-block  0
        -: 2022:}
        -: 2023:
        -: 2024:// Helper function for *_STREQ on wide strings.
function _ZN7testing8internal14CmpHelperSTREQEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2025:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 2026:                               const char* rhs_expression,
        -: 2027:                               const wchar_t* lhs,
        -: 2028:                               const wchar_t* rhs) {
    #####: 2029:  if (String::WideCStringEquals(lhs, rhs)) {
    %%%%%: 2029-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2030:    return AssertionSuccess();
    %%%%%: 2030-block  0
call    0 never executed
        -: 2031:  }
        -: 2032:
        -: 2033:  return EqFailure(lhs_expression,
        -: 2034:                   rhs_expression,
    #####: 2035:                   PrintToString(lhs),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2035-block  0
call    3 never executed
    $$$$$: 2035-block  1
call    4 never executed
    $$$$$: 2035-block  2
    #####: 2036:                   PrintToString(rhs),
    %%%%%: 2036-block  0
call    0 never executed
call    1 never executed
    $$$$$: 2036-block  1
call    2 never executed
    #####: 2037:                   false);
    %%%%%: 2037-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2038:}
        -: 2039:
        -: 2040:// Helper function for *_STRNE on wide strings.
function _ZN7testing8internal14CmpHelperSTRNEEPKcS2_PKwS4_ called 0 returned 0% blocks executed 0%
    #####: 2041:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 2042:                               const char* s2_expression,
        -: 2043:                               const wchar_t* s1,
        -: 2044:                               const wchar_t* s2) {
    #####: 2045:  if (!String::WideCStringEquals(s1, s2)) {
    %%%%%: 2045-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2046:    return AssertionSuccess();
    %%%%%: 2046-block  0
call    0 never executed
        -: 2047:  }
        -: 2048:
    #####: 2049:  return AssertionFailure() << "Expected: (" << s1_expression << ") != ("
    %%%%%: 2049-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2049-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2049-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 2049-block  3
call   10 never executed
    #####: 2050:                            << s2_expression << "), actual: "
    %%%%%: 2050-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2050-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2051:                            << PrintToString(s1)
    %%%%%: 2051-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2051-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 2051-block  2
call    7 never executed
    $$$$$: 2051-block  3
    #####: 2052:                            << " vs " << PrintToString(s2);
    %%%%%: 2052-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2052-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2052-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2052-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2052-block  4
call   12 never executed
call   13 never executed
    $$$$$: 2052-block  5
call   14 never executed
    $$$$$: 2052-block  6
        -: 2053:}
        -: 2054:
        -: 2055:// Compares two C strings, ignoring case.  Returns true if and only if they have
        -: 2056:// the same content.
        -: 2057://
        -: 2058:// Unlike strcasecmp(), this function can handle NULL argument(s).  A
        -: 2059:// NULL C string is considered different to any non-NULL C string,
        -: 2060:// including the empty string.
function _ZN7testing8internal6String28CaseInsensitiveCStringEqualsEPKcS3_ called 4 returned 100% blocks executed 71%
        4: 2061:bool String::CaseInsensitiveCStringEquals(const char * lhs, const char * rhs) {
       4*: 2062:  if (lhs == nullptr) return rhs == nullptr;
        4: 2062-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2062-block  1
       4*: 2063:  if (rhs == nullptr) return false;
        4: 2063-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    %%%%%: 2063-block  1
        4: 2064:  return posix::StrCaseCmp(lhs, rhs) == 0;
        4: 2064-block  0
call    0 returned 4
        -: 2065:}
        -: 2066:
        -: 2067:// Compares two wide C strings, ignoring case.  Returns true if and only if they
        -: 2068:// have the same content.
        -: 2069://
        -: 2070:// Unlike wcscasecmp(), this function can handle NULL argument(s).
        -: 2071:// A NULL C string is considered different to any non-NULL wide C string,
        -: 2072:// including the empty string.
        -: 2073:// NB: The implementations on different platforms slightly differ.
        -: 2074:// On windows, this method uses _wcsicmp which compares according to LC_CTYPE
        -: 2075:// environment variable. On GNU platform this method uses wcscasecmp
        -: 2076:// which compares according to LC_CTYPE category of the current locale.
        -: 2077:// On MacOS X, it uses towlower, which also uses LC_CTYPE category of the
        -: 2078:// current locale.
function _ZN7testing8internal6String32CaseInsensitiveWideCStringEqualsEPKwS3_ called 0 returned 0% blocks executed 0%
    #####: 2079:bool String::CaseInsensitiveWideCStringEquals(const wchar_t* lhs,
        -: 2080:                                              const wchar_t* rhs) {
    #####: 2081:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2081-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2081-block  1
        -: 2082:
    #####: 2083:  if (rhs == nullptr) return false;
    %%%%%: 2083-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2083-block  1
        -: 2084:
        -: 2085:#if GTEST_OS_WINDOWS
        -: 2086:  return _wcsicmp(lhs, rhs) == 0;
        -: 2087:#elif GTEST_OS_LINUX && !GTEST_OS_LINUX_ANDROID
    #####: 2088:  return wcscasecmp(lhs, rhs) == 0;
    %%%%%: 2088-block  0
call    0 never executed
        -: 2089:#else
        -: 2090:  // Android, Mac OS X and Cygwin don't define wcscasecmp.
        -: 2091:  // Other unknown OSes may not define it either.
        -: 2092:  wint_t left, right;
        -: 2093:  do {
        -: 2094:    left = towlower(static_cast<wint_t>(*lhs++));
        -: 2095:    right = towlower(static_cast<wint_t>(*rhs++));
        -: 2096:  } while (left && left == right);
        -: 2097:  return left == right;
        -: 2098:#endif  // OS selector
        -: 2099:}
        -: 2100:
        -: 2101:// Returns true if and only if str ends with the given suffix, ignoring case.
        -: 2102:// Any string is considered to end with an empty suffix.
function _ZN7testing8internal6String23EndsWithCaseInsensitiveERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_ called 0 returned 0% blocks executed 0%
    #####: 2103:bool String::EndsWithCaseInsensitive(
        -: 2104:    const std::string& str, const std::string& suffix) {
    #####: 2105:  const size_t str_len = str.length();
    %%%%%: 2105-block  0
call    0 never executed
    #####: 2106:  const size_t suffix_len = suffix.length();
call    0 never executed
    #####: 2107:  return (str_len >= suffix_len) &&
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2107-block  0
    %%%%%: 2107-block  1
    #####: 2108:         CaseInsensitiveCStringEquals(str.c_str() + str_len - suffix_len,
    %%%%%: 2108-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2109:                                      suffix.c_str());
    %%%%%: 2109-block  0
        -: 2110:}
        -: 2111:
        -: 2112:// Formats an int value as "%02d".
function _ZN7testing8internal6String15FormatIntWidth2B5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2113:std::string String::FormatIntWidth2(int value) {
    #####: 2114:  return FormatIntWidthN(value, 2);
    %%%%%: 2114-block  0
call    0 never executed
        -: 2115:}
        -: 2116:
        -: 2117:// Formats an int value to given width with leading zeros.
function _ZN7testing8internal6String15FormatIntWidthNB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 2118:std::string String::FormatIntWidthN(int value, int width) {
    #####: 2119:  std::stringstream ss;
    %%%%%: 2119-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2119-block  1
call    3 never executed
    $$$$$: 2119-block  2
call    4 never executed
    #####: 2120:  ss << std::setfill('0') << std::setw(width) << value;
    %%%%%: 2120-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2120-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2120-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    #####: 2121:  return ss.str();
    %%%%%: 2121-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2121-block  1
        -: 2122:}
        -: 2123:
        -: 2124:// Formats an int value as "%X".
function _ZN7testing8internal6String15FormatHexUInt32B5cxx11Ej called 0 returned 0% blocks executed 0%
    #####: 2125:std::string String::FormatHexUInt32(uint32_t value) {
    #####: 2126:  std::stringstream ss;
    %%%%%: 2126-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2126-block  1
call    3 never executed
    $$$$$: 2126-block  2
call    4 never executed
    #####: 2127:  ss << std::hex << std::uppercase << value;
    %%%%%: 2127-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2127-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2127-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2128:  return ss.str();
    %%%%%: 2128-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2128-block  1
        -: 2129:}
        -: 2130:
        -: 2131:// Formats an int value as "%X".
function _ZN7testing8internal6String12FormatHexIntB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####: 2132:std::string String::FormatHexInt(int value) {
    #####: 2133:  return FormatHexUInt32(static_cast<uint32_t>(value));
    %%%%%: 2133-block  0
call    0 never executed
        -: 2134:}
        -: 2135:
        -: 2136:// Formats a byte as "%02X".
function _ZN7testing8internal6String10FormatByteB5cxx11Eh called 0 returned 0% blocks executed 0%
    #####: 2137:std::string String::FormatByte(unsigned char value) {
    #####: 2138:  std::stringstream ss;
    %%%%%: 2138-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2138-block  1
call    3 never executed
    $$$$$: 2138-block  2
call    4 never executed
    #####: 2139:  ss << std::setfill('0') << std::setw(2) << std::hex << std::uppercase
    %%%%%: 2139-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2139-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2139-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2139-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    #####: 2140:     << static_cast<unsigned int>(value);
    %%%%%: 2140-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2141:  return ss.str();
    %%%%%: 2141-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2141-block  1
        -: 2142:}
        -: 2143:
        -: 2144:// Converts the buffer in a stringstream to an std::string, converting NUL
        -: 2145:// bytes to "\\0" along the way.
function _ZN7testing8internal20StringStreamToStringEPNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE called 85 returned 100% blocks executed 75%
       85: 2146:std::string StringStreamToString(::std::stringstream* ss) {
      170: 2147:  const ::std::string& str = ss->str();
       85: 2147-block  0
call    0 returned 85
branch  1 taken 85 (fallthrough)
branch  2 taken 0 (throw)
       85: 2147-block  1
call    3 returned 85
    $$$$$: 2147-block  2
call    4 never executed
       85: 2148:  const char* const start = str.c_str();
       85: 2148-block  0
call    0 returned 85
       85: 2149:  const char* const end = start + str.length();
call    0 returned 85
        -: 2150:
       85: 2151:  std::string result;
call    0 returned 85
       85: 2152:  result.reserve(static_cast<size_t>(2 * (end - start)));
call    0 returned 85
branch  1 taken 85 (fallthrough)
branch  2 taken 0 (throw)
      968: 2153:  for (const char* ch = start; ch != end; ++ch) {
       85: 2153-block  0
      968: 2153-block  1
branch  0 taken 883 (fallthrough)
branch  1 taken 85
      883: 2153-block  2
      883: 2154:    if (*ch == '\0') {
      883: 2154-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 883
    #####: 2155:      result += "\\0";  // Replaces NUL with "\\0";
    %%%%%: 2155-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2156:    } else {
      883: 2157:      result += *ch;
      883: 2157-block  0
call    0 returned 883
branch  1 taken 883 (fallthrough)
branch  2 taken 0 (throw)
        -: 2158:    }
        -: 2159:  }
        -: 2160:
      170: 2161:  return result;
       85: 2161-block  0
       85: 2161-block  1
        -: 2162:}
        -: 2163:
        -: 2164:// Appends the user-supplied message to the Google-Test-generated message.
function _ZN7testing8internal17AppendUserMessageERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_7MessageE called 0 returned 0% blocks executed 0%
    #####: 2165:std::string AppendUserMessage(const std::string& gtest_msg,
        -: 2166:                              const Message& user_msg) {
        -: 2167:  // Appends the user message if it's non-empty.
    #####: 2168:  const std::string user_msg_string = user_msg.GetString();
    %%%%%: 2168-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2168-block  1
call    3 never executed
    $$$$$: 2168-block  2
call    4 never executed
    #####: 2169:  if (user_msg_string.empty()) {
    %%%%%: 2169-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2170:    return gtest_msg;
    %%%%%: 2170-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2171:  }
    #####: 2172:  if (gtest_msg.empty()) {
    %%%%%: 2172-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2173:    return user_msg_string;
    %%%%%: 2173-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2174:  }
    #####: 2175:  return gtest_msg + "\n" + user_msg_string;
    %%%%%: 2175-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2175-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2175-block  2
call    6 never executed
    $$$$$: 2175-block  3
call    7 never executed
    $$$$$: 2175-block  4
        -: 2176:}
        -: 2177:
        -: 2178:}  // namespace internal
        -: 2179:
        -: 2180:// class TestResult
        -: 2181:
        -: 2182:// Creates an empty TestResult.
function _ZN7testing10TestResultC2Ev called 21 returned 100% blocks executed 100%
       21: 2183:TestResult::TestResult()
       21: 2184:    : death_test_count_(0), start_timestamp_(0), elapsed_time_(0) {}
       21: 2184-block  0
call    0 returned 21
call    1 returned 21
call    2 returned 21
        -: 2185:
        -: 2186:// D'tor.
function _ZN7testing10TestResultD2Ev called 21 returned 100% blocks executed 100%
       21: 2187:TestResult::~TestResult() {
       21: 2187-block  0
call    0 returned 21
call    1 returned 21
call    2 returned 21
       21: 2188:}
        -: 2189:
        -: 2190:// Returns the i-th test part result among all the results. i can
        -: 2191:// range from 0 to total_part_count() - 1. If i is not in that range,
        -: 2192:// aborts the program.
function _ZNK7testing10TestResult17GetTestPartResultEi called 0 returned 0% blocks executed 0%
    #####: 2193:const TestPartResult& TestResult::GetTestPartResult(int i) const {
    #####: 2194:  if (i < 0 || i >= total_part_count())
    %%%%%: 2194-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2194-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2194-block  2
    %%%%%: 2194-block  3
    %%%%%: 2194-block  4
branch  5 never executed
branch  6 never executed
    #####: 2195:    internal::posix::Abort();
    %%%%%: 2195-block  0
call    0 never executed
    #####: 2196:  return test_part_results_.at(static_cast<size_t>(i));
    %%%%%: 2196-block  0
call    0 never executed
        -: 2197:}
        -: 2198:
        -: 2199:// Returns the i-th test property. i can range from 0 to
        -: 2200:// test_property_count() - 1. If i is not in that range, aborts the
        -: 2201:// program.
function _ZNK7testing10TestResult15GetTestPropertyEi called 0 returned 0% blocks executed 0%
    #####: 2202:const TestProperty& TestResult::GetTestProperty(int i) const {
    #####: 2203:  if (i < 0 || i >= test_property_count())
    %%%%%: 2203-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2203-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2203-block  2
    %%%%%: 2203-block  3
    %%%%%: 2203-block  4
branch  5 never executed
branch  6 never executed
    #####: 2204:    internal::posix::Abort();
    %%%%%: 2204-block  0
call    0 never executed
    #####: 2205:  return test_properties_.at(static_cast<size_t>(i));
    %%%%%: 2205-block  0
call    0 never executed
        -: 2206:}
        -: 2207:
        -: 2208:// Clears the test part results.
function _ZN7testing10TestResult20ClearTestPartResultsEv called 0 returned 0% blocks executed 0%
    #####: 2209:void TestResult::ClearTestPartResults() {
    #####: 2210:  test_part_results_.clear();
    %%%%%: 2210-block  0
call    0 never executed
    #####: 2211:}
        -: 2212:
        -: 2213:// Adds a test part result to the list.
function _ZN7testing10TestResult17AddTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2214:void TestResult::AddTestPartResult(const TestPartResult& test_part_result) {
    #####: 2215:  test_part_results_.push_back(test_part_result);
    %%%%%: 2215-block  0
call    0 never executed
    #####: 2216:}
        -: 2217:
        -: 2218:// Adds a test property to the list. If a property with the same key as the
        -: 2219:// supplied property is already represented, the value of this test_property
        -: 2220:// replaces the old value for that key.
function _ZN7testing10TestResult14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2221:void TestResult::RecordProperty(const std::string& xml_element,
        -: 2222:                                const TestProperty& test_property) {
    #####: 2223:  if (!ValidateTestProperty(xml_element, test_property)) {
    %%%%%: 2223-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2223-block  1
branch  3 never executed
branch  4 never executed
    #####: 2224:    return;
    %%%%%: 2224-block  0
    %%%%%: 2224-block  1
        -: 2225:  }
    #####: 2226:  internal::MutexLock lock(&test_properites_mutex_);
    %%%%%: 2226-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2226-block  1
call    3 never executed
        -: 2227:  const std::vector<TestProperty>::iterator property_with_matching_key =
        -: 2228:      std::find_if(test_properties_.begin(), test_properties_.end(),
    #####: 2229:                   internal::TestPropertyKeyIs(test_property.key()));
    %%%%%: 2229-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2229-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2229-block  2
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 2229-block  3
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 2229-block  4
call   16 never executed
    $$$$$: 2229-block  5
    $$$$$: 2229-block  6
call   17 never executed
    $$$$$: 2229-block  7
    $$$$$: 2229-block  8
call   18 never executed
    $$$$$: 2229-block  9
    #####: 2230:  if (property_with_matching_key == test_properties_.end()) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2231:    test_properties_.push_back(test_property);
    %%%%%: 2231-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2232:    return;
    %%%%%: 2232-block  0
        -: 2233:  }
    #####: 2234:  property_with_matching_key->SetValue(test_property.value());
    %%%%%: 2234-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2234-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2234-block  2
call    9 never executed
call   10 never executed
    $$$$$: 2234-block  3
call   11 never executed
    $$$$$: 2234-block  4
    $$$$$: 2234-block  5
call   12 never executed
    $$$$$: 2234-block  6
        -: 2235:}
        -: 2236:
        -: 2237:// The list of reserved attributes used in the <testsuites> element of XML
        -: 2238:// output.
        -: 2239:static const char* const kReservedTestSuitesAttributes[] = {
        -: 2240:  "disabled",
        -: 2241:  "errors",
        -: 2242:  "failures",
        -: 2243:  "name",
        -: 2244:  "random_seed",
        -: 2245:  "tests",
        -: 2246:  "time",
        -: 2247:  "timestamp"
        -: 2248:};
        -: 2249:
        -: 2250:// The list of reserved attributes used in the <testsuite> element of XML
        -: 2251:// output.
        -: 2252:static const char* const kReservedTestSuiteAttributes[] = {
        -: 2253:    "disabled", "errors", "failures",  "name",
        -: 2254:    "tests",    "time",   "timestamp", "skipped"};
        -: 2255:
        -: 2256:// The list of reserved attributes used in the <testcase> element of XML output.
        -: 2257:static const char* const kReservedTestCaseAttributes[] = {
        -: 2258:    "classname",   "name", "status", "time",  "type_param",
        -: 2259:    "value_param", "file", "line"};
        -: 2260:
        -: 2261:// Use a slightly different set for allowed output to ensure existing tests can
        -: 2262:// still RecordProperty("result") or "RecordProperty(timestamp")
        -: 2263:static const char* const kReservedOutputTestCaseAttributes[] = {
        -: 2264:    "classname",   "name", "status", "time",   "type_param",
        -: 2265:    "value_param", "file", "line",   "result", "timestamp"};
        -: 2266:
        -: 2267:template <size_t kSize>
    #####: 2268:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2269:  return std::vector<std::string>(array, array + kSize);
        -: 2270:}
------------------
_ZN7testing13ArrayAsVectorILm10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILm10EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2268:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2269:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2269-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2269-block  1
call    4 never executed
    %%%%%: 2269-block  2
    $$$$$: 2269-block  3
call    5 never executed
        -: 2270:}
------------------
_ZN7testing13ArrayAsVectorILm8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc:
function _ZN7testing13ArrayAsVectorILm8EEESt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EERAT__KPKc called 0 returned 0% blocks executed 0%
    #####: 2268:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2269:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2269-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2269-block  1
call    4 never executed
    %%%%%: 2269-block  2
    $$$$$: 2269-block  3
call    5 never executed
        -: 2270:}
------------------
        -: 2271:
function _ZN7testingL31GetReservedAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2272:static std::vector<std::string> GetReservedAttributesForElement(
        -: 2273:    const std::string& xml_element) {
    #####: 2274:  if (xml_element == "testsuites") {
    %%%%%: 2274-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2275:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2275-block  0
call    0 never executed
    #####: 2276:  } else if (xml_element == "testsuite") {
    %%%%%: 2276-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2277:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2277-block  0
call    0 never executed
    #####: 2278:  } else if (xml_element == "testcase") {
    %%%%%: 2278-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2279:    return ArrayAsVector(kReservedTestCaseAttributes);
    %%%%%: 2279-block  0
call    0 never executed
        -: 2280:  } else {
    #####: 2281:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2281-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2281-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2281-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2281-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 2281-block  4
call   14 never executed
    $$$$$: 2281-block  5
call   15 never executed
        -: 2282:  }
        -: 2283:  // This code is unreachable but some compilers may not realizes that.
    #####: 2284:  return std::vector<std::string>();
    %%%%%: 2284-block  0
call    0 never executed
        -: 2285:}
        -: 2286:
        -: 2287:// TODO(jdesprez): Merge the two getReserved attributes once skip is improved
function _ZN7testingL37GetReservedOutputAttributesForElementERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2288:static std::vector<std::string> GetReservedOutputAttributesForElement(
        -: 2289:    const std::string& xml_element) {
    #####: 2290:  if (xml_element == "testsuites") {
    %%%%%: 2290-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2291:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2291-block  0
call    0 never executed
    #####: 2292:  } else if (xml_element == "testsuite") {
    %%%%%: 2292-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2293:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2293-block  0
call    0 never executed
    #####: 2294:  } else if (xml_element == "testcase") {
    %%%%%: 2294-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2295:    return ArrayAsVector(kReservedOutputTestCaseAttributes);
    %%%%%: 2295-block  0
call    0 never executed
        -: 2296:  } else {
    #####: 2297:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2297-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2297-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2297-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2297-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 2297-block  4
call   14 never executed
    $$$$$: 2297-block  5
call   15 never executed
        -: 2298:  }
        -: 2299:  // This code is unreachable but some compilers may not realizes that.
    #####: 2300:  return std::vector<std::string>();
    %%%%%: 2300-block  0
call    0 never executed
        -: 2301:}
        -: 2302:
function _ZN7testingL14FormatWordListERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS6_EE called 0 returned 0% blocks executed 0%
    #####: 2303:static std::string FormatWordList(const std::vector<std::string>& words) {
    #####: 2304:  Message word_list;
    %%%%%: 2304-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2304-block  1
call    3 never executed
    $$$$$: 2304-block  2
call    4 never executed
    #####: 2305:  for (size_t i = 0; i < words.size(); ++i) {
    %%%%%: 2305-block  0
    %%%%%: 2305-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2305-block  2
    #####: 2306:    if (i > 0 && words.size() > 2) {
    %%%%%: 2306-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2306-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2306-block  2
    %%%%%: 2306-block  3
    %%%%%: 2306-block  4
branch  5 never executed
branch  6 never executed
    #####: 2307:      word_list << ", ";
    %%%%%: 2307-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2308:    }
    #####: 2309:    if (i == words.size() - 1) {
    %%%%%: 2309-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2310:      word_list << "and ";
    %%%%%: 2310-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2311:    }
    #####: 2312:    word_list << "'" << words[i] << "'";
    %%%%%: 2312-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2312-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2312-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
        -: 2313:  }
    #####: 2314:  return word_list.GetString();
    %%%%%: 2314-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2314-block  1
        -: 2315:}
        -: 2316:
function _ZN7testingL24ValidateTestPropertyNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt6vectorIS5_SaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 2317:static bool ValidateTestPropertyName(
        -: 2318:    const std::string& property_name,
        -: 2319:    const std::vector<std::string>& reserved_names) {
    #####: 2320:  if (std::find(reserved_names.begin(), reserved_names.end(), property_name) !=
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2320-block  0
call    5 never executed
    #####: 2321:          reserved_names.end()) {
    %%%%%: 2321-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2321-block  1
call    3 never executed
    #####: 2322:    ADD_FAILURE() << "Reserved key used in RecordProperty(): " << property_name
    %%%%%: 2322-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2322-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2322-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2322-block  3
call   10 never executed
    $$$$$: 2322-block  4
call   11 never executed
    $$$$$: 2322-block  5
    $$$$$: 2322-block  6
call   12 never executed
    #####: 2323:                  << " (" << FormatWordList(reserved_names)
    %%%%%: 2323-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2323-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2323-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 2323-block  3
call   11 never executed
    $$$$$: 2323-block  4
    #####: 2324:                  << " are reserved by " << GTEST_NAME_ << ")";
    %%%%%: 2324-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2324-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2324-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2324-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 2325:    return false;
        -: 2326:  }
    #####: 2327:  return true;
    %%%%%: 2327-block  0
        -: 2328:}
        -: 2329:
        -: 2330:// Adds a failure if the key is a reserved attribute of the element named
        -: 2331:// xml_element.  Returns true if the property is valid.
function _ZN7testing10TestResult20ValidateTestPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 2332:bool TestResult::ValidateTestProperty(const std::string& xml_element,
        -: 2333:                                      const TestProperty& test_property) {
    #####: 2334:  return ValidateTestPropertyName(test_property.key(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2334-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2334-block  1
call    8 never executed
call    9 never executed
    $$$$$: 2334-block  2
call   10 never executed
    $$$$$: 2334-block  3
    $$$$$: 2334-block  4
call   11 never executed
    $$$$$: 2334-block  5
    #####: 2335:                                  GetReservedAttributesForElement(xml_element));
    %%%%%: 2335-block  0
call    0 never executed
    %%%%%: 2335-block  1
call    1 never executed
    %%%%%: 2335-block  2
    $$$$$: 2335-block  3
call    2 never executed
        -: 2336:}
        -: 2337:
        -: 2338:// Clears the object.
function _ZN7testing10TestResult5ClearEv called 20 returned 100% blocks executed 100%
       20: 2339:void TestResult::Clear() {
       20: 2340:  test_part_results_.clear();
       20: 2340-block  0
call    0 returned 20
       20: 2341:  test_properties_.clear();
call    0 returned 20
       20: 2342:  death_test_count_ = 0;
       20: 2343:  elapsed_time_ = 0;
       20: 2344:}
        -: 2345:
        -: 2346:// Returns true off the test part was skipped.
function _ZN7testingL15TestPartSkippedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2347:static bool TestPartSkipped(const TestPartResult& result) {
    #####: 2348:  return result.skipped();
    %%%%%: 2348-block  0
call    0 never executed
        -: 2349:}
        -: 2350:
        -: 2351:// Returns true if and only if the test was skipped.
function _ZNK7testing10TestResult7SkippedEv called 61 returned 100% blocks executed 88%
       61: 2352:bool TestResult::Skipped() const {
      61*: 2353:  return !Failed() && CountIf(test_part_results_, TestPartSkipped) > 0;
       61: 2353-block  0
call    0 returned 61
branch  1 taken 61 (fallthrough)
branch  2 taken 0
       61: 2353-block  1
call    3 returned 61
branch  4 taken 0 (fallthrough)
branch  5 taken 61
    %%%%%: 2353-block  2
       61: 2353-block  3
       61: 2353-block  4
        -: 2354:}
        -: 2355:
        -: 2356:// Returns true if and only if the test failed.
function _ZNK7testing10TestResult6FailedEv called 139 returned 100% blocks executed 50%
      139: 2357:bool TestResult::Failed() const {
     139*: 2358:  for (int i = 0; i < total_part_count(); ++i) {
      139: 2358-block  0
      139: 2358-block  1
call    0 returned 139
branch  1 taken 0 (fallthrough)
branch  2 taken 139
    %%%%%: 2358-block  2
    #####: 2359:    if (GetTestPartResult(i).failed())
    %%%%%: 2359-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2360:      return true;
    %%%%%: 2360-block  0
        -: 2361:  }
      139: 2362:  return false;
      139: 2362-block  0
        -: 2363:}
        -: 2364:
        -: 2365:// Returns true if and only if the test part fatally failed.
function _ZN7testingL21TestPartFatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2366:static bool TestPartFatallyFailed(const TestPartResult& result) {
    #####: 2367:  return result.fatally_failed();
    %%%%%: 2367-block  0
call    0 never executed
        -: 2368:}
        -: 2369:
        -: 2370:// Returns true if and only if the test fatally failed.
function _ZNK7testing10TestResult15HasFatalFailureEv called 25 returned 100% blocks executed 100%
       25: 2371:bool TestResult::HasFatalFailure() const {
       25: 2372:  return CountIf(test_part_results_, TestPartFatallyFailed) > 0;
       25: 2372-block  0
call    0 returned 25
        -: 2373:}
        -: 2374:
        -: 2375:// Returns true if and only if the test part non-fatally failed.
function _ZN7testingL24TestPartNonfatallyFailedERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2376:static bool TestPartNonfatallyFailed(const TestPartResult& result) {
    #####: 2377:  return result.nonfatally_failed();
    %%%%%: 2377-block  0
call    0 never executed
        -: 2378:}
        -: 2379:
        -: 2380:// Returns true if and only if the test has a non-fatal failure.
function _ZNK7testing10TestResult18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2381:bool TestResult::HasNonfatalFailure() const {
    #####: 2382:  return CountIf(test_part_results_, TestPartNonfatallyFailed) > 0;
    %%%%%: 2382-block  0
call    0 never executed
        -: 2383:}
        -: 2384:
        -: 2385:// Gets the number of all test parts.  This is the sum of the number
        -: 2386:// of successful test parts and the number of failed test parts.
function _ZNK7testing10TestResult16total_part_countEv called 139 returned 100% blocks executed 100%
      139: 2387:int TestResult::total_part_count() const {
      139: 2388:  return static_cast<int>(test_part_results_.size());
      139: 2388-block  0
call    0 returned 139
        -: 2389:}
        -: 2390:
        -: 2391:// Returns the number of the test properties.
function _ZNK7testing10TestResult19test_property_countEv called 0 returned 0% blocks executed 0%
    #####: 2392:int TestResult::test_property_count() const {
    #####: 2393:  return static_cast<int>(test_properties_.size());
    %%%%%: 2393-block  0
call    0 never executed
        -: 2394:}
        -: 2395:
        -: 2396:// class Test
        -: 2397:
        -: 2398:// Creates a Test object.
        -: 2399:
        -: 2400:// The c'tor saves the states of all flags.
function _ZN7testing4TestC2Ev called 12 returned 100% blocks executed 83%
       12: 2401:Test::Test()
       12: 2402:    : gtest_flag_saver_(new GTEST_FLAG_SAVER_) {
       12: 2402-block  0
call    0 returned 12
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0 (throw)
       12: 2402-block  1
call    4 returned 12
    $$$$$: 2402-block  2
call    5 never executed
       12: 2403:}
        -: 2404:
        -: 2405:// The d'tor restores the states of all flags.  The actual work is
        -: 2406:// done by the d'tor of the gtest_flag_saver_ field, and thus not
        -: 2407:// visible here.
      12*: 2408:Test::~Test() {
      12*: 2409:}
------------------
_ZN7testing4TestD0Ev:
function _ZN7testing4TestD0Ev called 0 returned 0% blocks executed 0%
    #####: 2408:Test::~Test() {
    #####: 2409:}
    %%%%%: 2409-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing4TestD2Ev:
function _ZN7testing4TestD2Ev called 12 returned 100% blocks executed 100%
       12: 2408:Test::~Test() {
       12: 2408-block  0
call    0 returned 12
       12: 2409:}
------------------
        -: 2410:
        -: 2411:// Sets up the test fixture.
        -: 2412://
        -: 2413:// A sub-class may override this.
function _ZN7testing4Test5SetUpEv called 12 returned 100% blocks executed 100%
       12: 2414:void Test::SetUp() {
       12: 2415:}
        -: 2416:
        -: 2417:// Tears down the test fixture.
        -: 2418://
        -: 2419:// A sub-class may override this.
function _ZN7testing4Test8TearDownEv called 12 returned 100% blocks executed 100%
       12: 2420:void Test::TearDown() {
       12: 2421:}
        -: 2422:
        -: 2423:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 2424:void Test::RecordProperty(const std::string& key, const std::string& value) {
    #####: 2425:  UnitTest::GetInstance()->RecordProperty(key, value);
    %%%%%: 2425-block  0
call    0 never executed
call    1 never executed
    #####: 2426:}
        -: 2427:
        -: 2428:// Allows user supplied key value pairs to be recorded for later output.
function _ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi called 0 returned 0% blocks executed 0%
    #####: 2429:void Test::RecordProperty(const std::string& key, int value) {
    #####: 2430:  Message value_message;
    %%%%%: 2430-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2430-block  1
call    3 never executed
    #####: 2431:  value_message << value;
    %%%%%: 2431-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2432:  RecordProperty(key, value_message.GetString().c_str());
    %%%%%: 2432-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2432-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2432-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2432-block  3
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 2432-block  4
call   15 never executed
    $$$$$: 2432-block  5
    $$$$$: 2432-block  6
call   16 never executed
    $$$$$: 2432-block  7
    $$$$$: 2432-block  8
call   17 never executed
    $$$$$: 2432-block  9
    #####: 2433:}
        -: 2434:
        -: 2435:namespace internal {
        -: 2436:
function _ZN7testing8internal30ReportFailureInUnknownLocationENS_14TestPartResult4TypeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 2437:void ReportFailureInUnknownLocation(TestPartResult::Type result_type,
        -: 2438:                                    const std::string& message) {
        -: 2439:  // This function is a friend of UnitTest and as such has access to
        -: 2440:  // AddTestPartResult.
    #####: 2441:  UnitTest::GetInstance()->AddTestPartResult(
    %%%%%: 2441-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2441-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 2441-block  2
call    8 never executed
call    9 never executed
    $$$$$: 2441-block  3
call   10 never executed
    $$$$$: 2441-block  4
    $$$$$: 2441-block  5
call   11 never executed
        -: 2442:      result_type,
        -: 2443:      nullptr,  // No info about the source file where the exception occurred.
        -: 2444:      -1,       // We have no info on which line caused the exception.
        -: 2445:      message,
        -: 2446:      "");  // No stack trace, either.
    #####: 2447:}
        -: 2448:
        -: 2449:}  // namespace internal
        -: 2450:
        -: 2451:// Google Test requires all tests in the same test suite to use the same test
        -: 2452:// fixture class.  This function checks if the current test has the
        -: 2453:// same fixture class as the first test in the current test suite.  If
        -: 2454:// yes, it returns true; otherwise it generates a Google Test failure and
        -: 2455:// returns false.
function _ZN7testing4Test19HasSameFixtureClassEv called 12 returned 100% blocks executed 15%
       12: 2456:bool Test::HasSameFixtureClass() {
       12: 2457:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       12: 2457-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12: 2458:  const TestSuite* const test_suite = impl->current_test_suite();
       12: 2458-block  0
call    0 returned 12
        -: 2459:
        -: 2460:  // Info about the first test in the current test suite.
       12: 2461:  const TestInfo* const first_test_info = test_suite->test_info_list()[0];
call    0 returned 12
call    1 returned 12
       12: 2462:  const internal::TypeId first_fixture_id = first_test_info->fixture_class_id_;
       12: 2463:  const char* const first_test_name = first_test_info->name();
call    0 returned 12
        -: 2464:
        -: 2465:  // Info about the current test.
       12: 2466:  const TestInfo* const this_test_info = impl->current_test_info();
call    0 returned 12
       12: 2467:  const internal::TypeId this_fixture_id = this_test_info->fixture_class_id_;
       12: 2468:  const char* const this_test_name = this_test_info->name();
call    0 returned 12
        -: 2469:
       12: 2470:  if (this_fixture_id != first_fixture_id) {
branch  0 taken 0 (fallthrough)
branch  1 taken 12
        -: 2471:    // Is the first test defined using TEST?
    #####: 2472:    const bool first_is_TEST = first_fixture_id == internal::GetTestTypeId();
    %%%%%: 2472-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2473:    // Is this test defined using TEST?
    #####: 2474:    const bool this_is_TEST = this_fixture_id == internal::GetTestTypeId();
    %%%%%: 2474-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2475:
    #####: 2476:    if (first_is_TEST || this_is_TEST) {
    %%%%%: 2476-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2476-block  1
branch  2 never executed
branch  3 never executed
        -: 2477:      // Both TEST and TEST_F appear in same test suite, which is incorrect.
        -: 2478:      // Tell the user how to fix this.
        -: 2479:
        -: 2480:      // Gets the name of the TEST and the name of the TEST_F.  Note
        -: 2481:      // that first_is_TEST and this_is_TEST cannot both be true, as
        -: 2482:      // the fixture IDs are different for the two tests.
    #####: 2483:      const char* const TEST_name =
    %%%%%: 2483-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2483-block  1
    %%%%%: 2483-block  2
        -: 2484:          first_is_TEST ? first_test_name : this_test_name;
    #####: 2485:      const char* const TEST_F_name =
    %%%%%: 2485-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2485-block  1
    %%%%%: 2485-block  2
        -: 2486:          first_is_TEST ? this_test_name : first_test_name;
        -: 2487:
    #####: 2488:      ADD_FAILURE()
    %%%%%: 2488-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2488-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2488-block  2
call    6 never executed
    $$$$$: 2488-block  3
call    7 never executed
    $$$$$: 2488-block  4
    $$$$$: 2488-block  5
call    8 never executed
    $$$$$: 2488-block  6
    #####: 2489:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2489-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2490:          << "class, so mixing TEST_F and TEST in the same test suite is\n"
    %%%%%: 2490-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2491:          << "illegal.  In test suite " << this_test_info->test_suite_name()
    %%%%%: 2491-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2491-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 2491-block  2
    #####: 2492:          << ",\n"
    %%%%%: 2492-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2493:          << "test " << TEST_F_name << " is defined using TEST_F but\n"
    %%%%%: 2493-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2493-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2493-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2494:          << "test " << TEST_name << " is defined using TEST.  You probably\n"
    %%%%%: 2494-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2494-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2494-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2495:          << "want to change the TEST to TEST_F or move it to another test\n"
    %%%%%: 2495-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2496:          << "case.";
    %%%%%: 2496-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2496-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2497:    } else {
        -: 2498:      // Two fixture classes with the same name appear in two different
        -: 2499:      // namespaces, which is not allowed. Tell the user how to fix this.
    #####: 2500:      ADD_FAILURE()
    %%%%%: 2500-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2500-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2500-block  2
call    6 never executed
    $$$$$: 2500-block  3
call    7 never executed
    $$$$$: 2500-block  4
    $$$$$: 2500-block  5
call    8 never executed
    $$$$$: 2500-block  6
    #####: 2501:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2501-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2502:          << "class.  However, in test suite "
    %%%%%: 2502-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2503:          << this_test_info->test_suite_name() << ",\n"
    %%%%%: 2503-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2503-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 2503-block  2
    #####: 2504:          << "you defined test " << first_test_name << " and test "
    %%%%%: 2504-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2504-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2504-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2505:          << this_test_name << "\n"
    %%%%%: 2505-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2505-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2506:          << "using two different test fixture classes.  This can happen if\n"
    %%%%%: 2506-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2507:          << "the two classes are from different namespaces or translation\n"
    %%%%%: 2507-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2508:          << "units and have the same name.  You should probably rename one\n"
    %%%%%: 2508-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2509:          << "of the classes to put the tests into different test suites.";
    %%%%%: 2509-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2509-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2510:    }
    #####: 2511:    return false;
    %%%%%: 2511-block  0
        -: 2512:  }
        -: 2513:
       12: 2514:  return true;
       12: 2514-block  0
        -: 2515:}
        -: 2516:
        -: 2517:#if GTEST_HAS_SEH
        -: 2518:
        -: 2519:// Adds an "exception thrown" fatal failure to the current test.  This
        -: 2520:// function returns its result via an output parameter pointer because VC++
        -: 2521:// prohibits creation of objects with destructors on stack in functions
        -: 2522:// using __try (see error C2712).
        -: 2523:static std::string* FormatSehExceptionMessage(DWORD exception_code,
        -: 2524:                                              const char* location) {
        -: 2525:  Message message;
        -: 2526:  message << "SEH exception with code 0x" << std::setbase(16) <<
        -: 2527:    exception_code << std::setbase(10) << " thrown in " << location << ".";
        -: 2528:
        -: 2529:  return new std::string(message.GetString());
        -: 2530:}
        -: 2531:
        -: 2532:#endif  // GTEST_HAS_SEH
        -: 2533:
        -: 2534:namespace internal {
        -: 2535:
        -: 2536:#if GTEST_HAS_EXCEPTIONS
        -: 2537:
        -: 2538:// Adds an "exception thrown" fatal failure to the current test.
function _ZN7testing8internalL25FormatCxxExceptionMessageEPKcS2_ called 0 returned 0% blocks executed 0%
    #####: 2539:static std::string FormatCxxExceptionMessage(const char* description,
        -: 2540:                                             const char* location) {
    #####: 2541:  Message message;
    %%%%%: 2541-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2541-block  1
call    3 never executed
    $$$$$: 2541-block  2
call    4 never executed
    #####: 2542:  if (description != nullptr) {
    %%%%%: 2542-block  0
branch  0 never executed
branch  1 never executed
    #####: 2543:    message << "C++ exception with description \"" << description << "\"";
    %%%%%: 2543-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2543-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2543-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 2544:  } else {
    #####: 2545:    message << "Unknown C++ exception";
    %%%%%: 2545-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2546:  }
    #####: 2547:  message << " thrown in " << location << ".";
    %%%%%: 2547-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2547-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2547-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 2548:
    #####: 2549:  return message.GetString();
    %%%%%: 2549-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2549-block  1
        -: 2550:}
        -: 2551:
        -: 2552:static std::string PrintTestPartResultToString(
        -: 2553:    const TestPartResult& test_part_result);
        -: 2554:
function _ZN7testing8internal26GoogleTestFailureExceptionC2ERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 2555:GoogleTestFailureException::GoogleTestFailureException(
    #####: 2556:    const TestPartResult& failure)
    #####: 2557:    : ::std::runtime_error(PrintTestPartResultToString(failure).c_str()) {}
    %%%%%: 2557-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 2557-block  1
call    5 never executed
    $$$$$: 2557-block  2
call    6 never executed
        -: 2558:
        -: 2559:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2560:
        -: 2561:// We put these helper functions in the internal namespace as IBM's xlC
        -: 2562:// compiler rejects the code if they were declared static.
        -: 2563:
        -: 2564:// Runs the given method and handles SEH exceptions it throws, when
        -: 2565:// SEH is supported; returns the 0-value for type Result in case of an
        -: 2566:// SEH exception.  (Microsoft compilers cannot handle SEH and C++
        -: 2567:// exceptions in the same function.  Therefore, we provide a separate
        -: 2568:// wrapper function for handling SEH exceptions.)
        -: 2569:template <class T, typename Result>
       77: 2570:Result HandleSehExceptionsInMethodIfSupported(
        -: 2571:    T* object, Result (T::*method)(), const char* location) {
        -: 2572:#if GTEST_HAS_SEH
        -: 2573:  __try {
        -: 2574:    return (object->*method)();
        -: 2575:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2576:      GetExceptionCode())) {
        -: 2577:    // We create the exception message on the heap because VC++ prohibits
        -: 2578:    // creation of objects with destructors on stack in functions using __try
        -: 2579:    // (see error C2712).
        -: 2580:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2581:        GetExceptionCode(), location);
        -: 2582:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2583:                                             *exception_message);
        -: 2584:    delete exception_message;
        -: 2585:    return static_cast<Result>(0);
        -: 2586:  }
        -: 2587:#else
        -: 2588:  (void)location;
      77*: 2589:  return (object->*method)();
        -: 2590:#endif  // GTEST_HAS_SEH
        -: 2591:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 83%
        1: 2570:Result HandleSehExceptionsInMethodIfSupported(
        -: 2571:    T* object, Result (T::*method)(), const char* location) {
        -: 2572:#if GTEST_HAS_SEH
        -: 2573:  __try {
        -: 2574:    return (object->*method)();
        -: 2575:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2576:      GetExceptionCode())) {
        -: 2577:    // We create the exception message on the heap because VC++ prohibits
        -: 2578:    // creation of objects with destructors on stack in functions using __try
        -: 2579:    // (see error C2712).
        -: 2580:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2581:        GetExceptionCode(), location);
        -: 2582:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2583:                                             *exception_message);
        -: 2584:    delete exception_message;
        -: 2585:    return static_cast<Result>(0);
        -: 2586:  }
        -: 2587:#else
        -: 2588:  (void)location;
       1*: 2589:  return (object->*method)();
        1: 2589-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 2589-block  1
        1: 2589-block  2
        1: 2589-block  3
call    2 returned 1
        -: 2590:#endif  // GTEST_HAS_SEH
        -: 2591:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 16 returned 100% blocks executed 80%
       16: 2570:Result HandleSehExceptionsInMethodIfSupported(
        -: 2571:    T* object, Result (T::*method)(), const char* location) {
        -: 2572:#if GTEST_HAS_SEH
        -: 2573:  __try {
        -: 2574:    return (object->*method)();
        -: 2575:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2576:      GetExceptionCode())) {
        -: 2577:    // We create the exception message on the heap because VC++ prohibits
        -: 2578:    // creation of objects with destructors on stack in functions using __try
        -: 2579:    // (see error C2712).
        -: 2580:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2581:        GetExceptionCode(), location);
        -: 2582:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2583:                                             *exception_message);
        -: 2584:    delete exception_message;
        -: 2585:    return static_cast<Result>(0);
        -: 2586:  }
        -: 2587:#else
        -: 2588:  (void)location;
      16*: 2589:  return (object->*method)();
       16: 2589-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 16
    %%%%%: 2589-block  1
       16: 2589-block  2
       16: 2589-block  3
call    2 returned 16
        -: 2590:#endif  // GTEST_HAS_SEH
        -: 2591:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 12 returned 100% blocks executed 83%
       12: 2570:Result HandleSehExceptionsInMethodIfSupported(
        -: 2571:    T* object, Result (T::*method)(), const char* location) {
        -: 2572:#if GTEST_HAS_SEH
        -: 2573:  __try {
        -: 2574:    return (object->*method)();
        -: 2575:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2576:      GetExceptionCode())) {
        -: 2577:    // We create the exception message on the heap because VC++ prohibits
        -: 2578:    // creation of objects with destructors on stack in functions using __try
        -: 2579:    // (see error C2712).
        -: 2580:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2581:        GetExceptionCode(), location);
        -: 2582:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2583:                                             *exception_message);
        -: 2584:    delete exception_message;
        -: 2585:    return static_cast<Result>(0);
        -: 2586:  }
        -: 2587:#else
        -: 2588:  (void)location;
      12*: 2589:  return (object->*method)();
       12: 2589-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 0
       12: 2589-block  1
    %%%%%: 2589-block  2
       12: 2589-block  3
call    2 returned 12
        -: 2590:#endif  // GTEST_HAS_SEH
        -: 2591:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 48 returned 100% blocks executed 100%
       48: 2570:Result HandleSehExceptionsInMethodIfSupported(
        -: 2571:    T* object, Result (T::*method)(), const char* location) {
        -: 2572:#if GTEST_HAS_SEH
        -: 2573:  __try {
        -: 2574:    return (object->*method)();
        -: 2575:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2576:      GetExceptionCode())) {
        -: 2577:    // We create the exception message on the heap because VC++ prohibits
        -: 2578:    // creation of objects with destructors on stack in functions using __try
        -: 2579:    // (see error C2712).
        -: 2580:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2581:        GetExceptionCode(), location);
        -: 2582:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2583:                                             *exception_message);
        -: 2584:    delete exception_message;
        -: 2585:    return static_cast<Result>(0);
        -: 2586:  }
        -: 2587:#else
        -: 2588:  (void)location;
       48: 2589:  return (object->*method)();
       48: 2589-block  0
branch  0 taken 36 (fallthrough)
branch  1 taken 12
       36: 2589-block  1
       12: 2589-block  2
       48: 2589-block  3
call    2 returned 48
        -: 2590:#endif  // GTEST_HAS_SEH
        -: 2591:}
------------------
        -: 2592:
        -: 2593:// Runs the given method and catches and reports C++ and/or SEH-style
        -: 2594:// exceptions, if they are supported; returns the 0-value for type
        -: 2595:// Result in case of an SEH exception.
        -: 2596:template <class T, typename Result>
       77: 2597:Result HandleExceptionsInMethodIfSupported(
        -: 2598:    T* object, Result (T::*method)(), const char* location) {
        -: 2599:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2600:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2601:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2602:  // after the exception is caught and either report or re-throw the
        -: 2603:  // exception based on the flag's value:
        -: 2604:  //
        -: 2605:  // try {
        -: 2606:  //   // Perform the test method.
        -: 2607:  // } catch (...) {
        -: 2608:  //   if (GTEST_FLAG(catch_exceptions))
        -: 2609:  //     // Report the exception as failure.
        -: 2610:  //   else
        -: 2611:  //     throw;  // Re-throws the original exception.
        -: 2612:  // }
        -: 2613:  //
        -: 2614:  // However, the purpose of this flag is to allow the program to drop into
        -: 2615:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2616:  // control enters the catch block, the exception origin information is
        -: 2617:  // lost and the debugger will stop the program at the point of the
        -: 2618:  // re-throw in this function -- instead of at the point of the original
        -: 2619:  // throw statement in the code under test.  For this reason, we perform
        -: 2620:  // the check early, sacrificing the ability to affect Google Test's
        -: 2621:  // exception handling in the method where the exception is thrown.
       77: 2622:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        -: 2623:#if GTEST_HAS_EXCEPTIONS
        -: 2624:    try {
       77: 2625:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
    =====: 2626:    } catch (const AssertionException&) {  // NOLINT
        -: 2627:      // This failure was reported already.
    =====: 2628:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
        -: 2629:      // This exception type can only be thrown by a failed Google
        -: 2630:      // Test assertion with the intention of letting another testing
        -: 2631:      // framework catch it.  Therefore we just re-throw it.
    =====: 2632:      throw;
    =====: 2633:    } catch (const std::exception& e) {  // NOLINT
    =====: 2634:      internal::ReportFailureInUnknownLocation(
        -: 2635:          TestPartResult::kFatalFailure,
    =====: 2636:          FormatCxxExceptionMessage(e.what(), location));
    =====: 2637:    } catch (...) {  // NOLINT
    =====: 2638:      internal::ReportFailureInUnknownLocation(
        -: 2639:          TestPartResult::kFatalFailure,
        -: 2640:          FormatCxxExceptionMessage(nullptr, location));
        -: 2641:    }
    =====: 2642:    return static_cast<Result>(0);
        -: 2643:#else
        -: 2644:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2645:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2646:  } else {
    #####: 2647:    return (object->*method)();
        -: 2648:  }
        -: 2649:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc called 1 returned 100% blocks executed 18%
        1: 2597:Result HandleExceptionsInMethodIfSupported(
        -: 2598:    T* object, Result (T::*method)(), const char* location) {
        -: 2599:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2600:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2601:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2602:  // after the exception is caught and either report or re-throw the
        -: 2603:  // exception based on the flag's value:
        -: 2604:  //
        -: 2605:  // try {
        -: 2606:  //   // Perform the test method.
        -: 2607:  // } catch (...) {
        -: 2608:  //   if (GTEST_FLAG(catch_exceptions))
        -: 2609:  //     // Report the exception as failure.
        -: 2610:  //   else
        -: 2611:  //     throw;  // Re-throws the original exception.
        -: 2612:  // }
        -: 2613:  //
        -: 2614:  // However, the purpose of this flag is to allow the program to drop into
        -: 2615:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2616:  // control enters the catch block, the exception origin information is
        -: 2617:  // lost and the debugger will stop the program at the point of the
        -: 2618:  // re-throw in this function -- instead of at the point of the original
        -: 2619:  // throw statement in the code under test.  For this reason, we perform
        -: 2620:  // the check early, sacrificing the ability to affect Google Test's
        -: 2621:  // exception handling in the method where the exception is thrown.
        1: 2622:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        1: 2622-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        -: 2623:#if GTEST_HAS_EXCEPTIONS
        -: 2624:    try {
        1: 2625:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        1: 2625-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 2625-block  1
    =====: 2626:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2626-block  0
call    0 never executed
call    1 never executed
        -: 2627:      // This failure was reported already.
    =====: 2628:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2628-block  0
call    0 never executed
    $$$$$: 2628-block  1
call    1 never executed
        -: 2629:      // This exception type can only be thrown by a failed Google
        -: 2630:      // Test assertion with the intention of letting another testing
        -: 2631:      // framework catch it.  Therefore we just re-throw it.
    =====: 2632:      throw;
call    0 never executed
    =====: 2633:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2633-block  0
call    0 never executed
    $$$$$: 2633-block  1
call    1 never executed
    =====: 2634:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2634-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2634-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2634-block  2
call    8 never executed
    $$$$$: 2634-block  3
        -: 2635:          TestPartResult::kFatalFailure,
    =====: 2636:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2637:    } catch (...) {  // NOLINT
    $$$$$: 2637-block  0
call    0 never executed
    $$$$$: 2637-block  1
call    1 never executed
    =====: 2638:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2638-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2638-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2638-block  2
call    8 never executed
    $$$$$: 2638-block  3
        -: 2639:          TestPartResult::kFatalFailure,
        -: 2640:          FormatCxxExceptionMessage(nullptr, location));
        -: 2641:    }
    =====: 2642:    return static_cast<Result>(0);
    $$$$$: 2642-block  0
        -: 2643:#else
        -: 2644:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2645:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2646:  } else {
    #####: 2647:    return (object->*method)();
    %%%%%: 2647-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2647-block  1
    %%%%%: 2647-block  2
    %%%%%: 2647-block  3
call    2 never executed
        -: 2648:  }
        -: 2649:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc called 16 returned 100% blocks executed 18%
       16: 2597:Result HandleExceptionsInMethodIfSupported(
        -: 2598:    T* object, Result (T::*method)(), const char* location) {
        -: 2599:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2600:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2601:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2602:  // after the exception is caught and either report or re-throw the
        -: 2603:  // exception based on the flag's value:
        -: 2604:  //
        -: 2605:  // try {
        -: 2606:  //   // Perform the test method.
        -: 2607:  // } catch (...) {
        -: 2608:  //   if (GTEST_FLAG(catch_exceptions))
        -: 2609:  //     // Report the exception as failure.
        -: 2610:  //   else
        -: 2611:  //     throw;  // Re-throws the original exception.
        -: 2612:  // }
        -: 2613:  //
        -: 2614:  // However, the purpose of this flag is to allow the program to drop into
        -: 2615:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2616:  // control enters the catch block, the exception origin information is
        -: 2617:  // lost and the debugger will stop the program at the point of the
        -: 2618:  // re-throw in this function -- instead of at the point of the original
        -: 2619:  // throw statement in the code under test.  For this reason, we perform
        -: 2620:  // the check early, sacrificing the ability to affect Google Test's
        -: 2621:  // exception handling in the method where the exception is thrown.
       16: 2622:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
       16: 2622-block  0
call    0 returned 16
call    1 returned 16
branch  2 taken 16 (fallthrough)
branch  3 taken 0
        -: 2623:#if GTEST_HAS_EXCEPTIONS
        -: 2624:    try {
       16: 2625:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
       16: 2625-block  0
call    0 returned 16
branch  1 taken 16 (fallthrough)
branch  2 taken 0 (throw)
       16: 2625-block  1
    =====: 2626:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2626-block  0
call    0 never executed
call    1 never executed
        -: 2627:      // This failure was reported already.
    =====: 2628:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2628-block  0
call    0 never executed
    $$$$$: 2628-block  1
call    1 never executed
        -: 2629:      // This exception type can only be thrown by a failed Google
        -: 2630:      // Test assertion with the intention of letting another testing
        -: 2631:      // framework catch it.  Therefore we just re-throw it.
    =====: 2632:      throw;
call    0 never executed
    =====: 2633:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2633-block  0
call    0 never executed
    $$$$$: 2633-block  1
call    1 never executed
    =====: 2634:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2634-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2634-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2634-block  2
call    8 never executed
    $$$$$: 2634-block  3
        -: 2635:          TestPartResult::kFatalFailure,
    =====: 2636:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2637:    } catch (...) {  // NOLINT
    $$$$$: 2637-block  0
call    0 never executed
    $$$$$: 2637-block  1
call    1 never executed
    =====: 2638:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2638-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2638-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2638-block  2
call    8 never executed
    $$$$$: 2638-block  3
        -: 2639:          TestPartResult::kFatalFailure,
        -: 2640:          FormatCxxExceptionMessage(nullptr, location));
        -: 2641:    }
    =====: 2642:    return static_cast<Result>(0);
    $$$$$: 2642-block  0
        -: 2643:#else
        -: 2644:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2645:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2646:  } else {
    #####: 2647:    return (object->*method)();
    %%%%%: 2647-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2647-block  1
    %%%%%: 2647-block  2
    %%%%%: 2647-block  3
call    2 never executed
        -: 2648:  }
        -: 2649:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc called 12 returned 100% blocks executed 18%
       12: 2597:Result HandleExceptionsInMethodIfSupported(
        -: 2598:    T* object, Result (T::*method)(), const char* location) {
        -: 2599:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2600:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2601:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2602:  // after the exception is caught and either report or re-throw the
        -: 2603:  // exception based on the flag's value:
        -: 2604:  //
        -: 2605:  // try {
        -: 2606:  //   // Perform the test method.
        -: 2607:  // } catch (...) {
        -: 2608:  //   if (GTEST_FLAG(catch_exceptions))
        -: 2609:  //     // Report the exception as failure.
        -: 2610:  //   else
        -: 2611:  //     throw;  // Re-throws the original exception.
        -: 2612:  // }
        -: 2613:  //
        -: 2614:  // However, the purpose of this flag is to allow the program to drop into
        -: 2615:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2616:  // control enters the catch block, the exception origin information is
        -: 2617:  // lost and the debugger will stop the program at the point of the
        -: 2618:  // re-throw in this function -- instead of at the point of the original
        -: 2619:  // throw statement in the code under test.  For this reason, we perform
        -: 2620:  // the check early, sacrificing the ability to affect Google Test's
        -: 2621:  // exception handling in the method where the exception is thrown.
       12: 2622:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
       12: 2622-block  0
call    0 returned 12
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0
        -: 2623:#if GTEST_HAS_EXCEPTIONS
        -: 2624:    try {
       12: 2625:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
       12: 2625-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12: 2625-block  1
    =====: 2626:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2626-block  0
call    0 never executed
call    1 never executed
        -: 2627:      // This failure was reported already.
    =====: 2628:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2628-block  0
call    0 never executed
    $$$$$: 2628-block  1
call    1 never executed
        -: 2629:      // This exception type can only be thrown by a failed Google
        -: 2630:      // Test assertion with the intention of letting another testing
        -: 2631:      // framework catch it.  Therefore we just re-throw it.
    =====: 2632:      throw;
call    0 never executed
    =====: 2633:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2633-block  0
call    0 never executed
    $$$$$: 2633-block  1
call    1 never executed
    =====: 2634:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2634-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2634-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2634-block  2
call    8 never executed
    $$$$$: 2634-block  3
        -: 2635:          TestPartResult::kFatalFailure,
    =====: 2636:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2637:    } catch (...) {  // NOLINT
    $$$$$: 2637-block  0
call    0 never executed
    $$$$$: 2637-block  1
call    1 never executed
    =====: 2638:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2638-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2638-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2638-block  2
call    8 never executed
    $$$$$: 2638-block  3
        -: 2639:          TestPartResult::kFatalFailure,
        -: 2640:          FormatCxxExceptionMessage(nullptr, location));
        -: 2641:    }
    =====: 2642:    return static_cast<Result>(0);
    $$$$$: 2642-block  0
        -: 2643:#else
        -: 2644:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2645:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2646:  } else {
    #####: 2647:    return (object->*method)();
    %%%%%: 2647-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2647-block  1
    %%%%%: 2647-block  2
    %%%%%: 2647-block  3
call    2 never executed
        -: 2648:  }
        -: 2649:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
function _ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc called 48 returned 100% blocks executed 18%
       48: 2597:Result HandleExceptionsInMethodIfSupported(
        -: 2598:    T* object, Result (T::*method)(), const char* location) {
        -: 2599:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2600:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2601:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2602:  // after the exception is caught and either report or re-throw the
        -: 2603:  // exception based on the flag's value:
        -: 2604:  //
        -: 2605:  // try {
        -: 2606:  //   // Perform the test method.
        -: 2607:  // } catch (...) {
        -: 2608:  //   if (GTEST_FLAG(catch_exceptions))
        -: 2609:  //     // Report the exception as failure.
        -: 2610:  //   else
        -: 2611:  //     throw;  // Re-throws the original exception.
        -: 2612:  // }
        -: 2613:  //
        -: 2614:  // However, the purpose of this flag is to allow the program to drop into
        -: 2615:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2616:  // control enters the catch block, the exception origin information is
        -: 2617:  // lost and the debugger will stop the program at the point of the
        -: 2618:  // re-throw in this function -- instead of at the point of the original
        -: 2619:  // throw statement in the code under test.  For this reason, we perform
        -: 2620:  // the check early, sacrificing the ability to affect Google Test's
        -: 2621:  // exception handling in the method where the exception is thrown.
       48: 2622:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
       48: 2622-block  0
call    0 returned 48
call    1 returned 48
branch  2 taken 48 (fallthrough)
branch  3 taken 0
        -: 2623:#if GTEST_HAS_EXCEPTIONS
        -: 2624:    try {
       48: 2625:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
       48: 2625-block  0
call    0 returned 48
branch  1 taken 48 (fallthrough)
branch  2 taken 0 (throw)
       48: 2625-block  1
    =====: 2626:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2626-block  0
call    0 never executed
call    1 never executed
        -: 2627:      // This failure was reported already.
    =====: 2628:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2628-block  0
call    0 never executed
    $$$$$: 2628-block  1
call    1 never executed
        -: 2629:      // This exception type can only be thrown by a failed Google
        -: 2630:      // Test assertion with the intention of letting another testing
        -: 2631:      // framework catch it.  Therefore we just re-throw it.
    =====: 2632:      throw;
call    0 never executed
    =====: 2633:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2633-block  0
call    0 never executed
    $$$$$: 2633-block  1
call    1 never executed
    =====: 2634:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2634-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2634-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2634-block  2
call    8 never executed
    $$$$$: 2634-block  3
        -: 2635:          TestPartResult::kFatalFailure,
    =====: 2636:          FormatCxxExceptionMessage(e.what(), location));
call    0 never executed
    =====: 2637:    } catch (...) {  // NOLINT
    $$$$$: 2637-block  0
call    0 never executed
    $$$$$: 2637-block  1
call    1 never executed
    =====: 2638:      internal::ReportFailureInUnknownLocation(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2638-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 2638-block  1
call    6 never executed
call    7 never executed
    $$$$$: 2638-block  2
call    8 never executed
    $$$$$: 2638-block  3
        -: 2639:          TestPartResult::kFatalFailure,
        -: 2640:          FormatCxxExceptionMessage(nullptr, location));
        -: 2641:    }
    =====: 2642:    return static_cast<Result>(0);
    $$$$$: 2642-block  0
        -: 2643:#else
        -: 2644:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2645:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2646:  } else {
    #####: 2647:    return (object->*method)();
    %%%%%: 2647-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2647-block  1
    %%%%%: 2647-block  2
    %%%%%: 2647-block  3
call    2 never executed
        -: 2648:  }
        -: 2649:}
------------------
        -: 2650:
        -: 2651:}  // namespace internal
        -: 2652:
        -: 2653:// Runs the test and updates the test result.
function _ZN7testing4Test3RunEv called 12 returned 100% blocks executed 90%
       12: 2654:void Test::Run() {
      12*: 2655:  if (!HasSameFixtureClass()) return;
       12: 2655-block  0
call    0 returned 12
branch  1 taken 0 (fallthrough)
branch  2 taken 12
    %%%%%: 2655-block  1
        -: 2656:
       12: 2657:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       12: 2657-block  0
call    0 returned 12
       12: 2658:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 12
call    1 returned 12
       12: 2659:  internal::HandleExceptionsInMethodIfSupported(this, &Test::SetUp, "SetUp()");
call    0 returned 12
        -: 2660:  // We will run the test only if SetUp() was successful and didn't call
        -: 2661:  // GTEST_SKIP().
      12*: 2662:  if (!HasFatalFailure() && !IsSkipped()) {
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0
       12: 2662-block  0
call    3 returned 12
branch  4 taken 12 (fallthrough)
branch  5 taken 0
       12: 2662-block  1
    %%%%%: 2662-block  2
       12: 2662-block  3
branch  6 taken 12 (fallthrough)
branch  7 taken 0
       12: 2663:    impl->os_stack_trace_getter()->UponLeavingGTest();
       12: 2663-block  0
call    0 returned 12
call    1 returned 12
       12: 2664:    internal::HandleExceptionsInMethodIfSupported(
call    0 returned 12
        -: 2665:        this, &Test::TestBody, "the test body");
        -: 2666:  }
        -: 2667:
        -: 2668:  // However, we want to clean up as much as possible.  Hence we will
        -: 2669:  // always call TearDown(), even if SetUp() or the test body has
        -: 2670:  // failed.
       12: 2671:  impl->os_stack_trace_getter()->UponLeavingGTest();
       12: 2671-block  0
call    0 returned 12
call    1 returned 12
       12: 2672:  internal::HandleExceptionsInMethodIfSupported(
call    0 returned 12
        -: 2673:      this, &Test::TearDown, "TearDown()");
        -: 2674:}
        -: 2675:
        -: 2676:// Returns true if and only if the current test has a fatal failure.
function _ZN7testing4Test15HasFatalFailureEv called 25 returned 100% blocks executed 100%
       25: 2677:bool Test::HasFatalFailure() {
       25: 2678:  return internal::GetUnitTestImpl()->current_test_result()->HasFatalFailure();
       25: 2678-block  0
call    0 returned 25
call    1 returned 25
call    2 returned 25
        -: 2679:}
        -: 2680:
        -: 2681:// Returns true if and only if the current test has a non-fatal failure.
function _ZN7testing4Test18HasNonfatalFailureEv called 0 returned 0% blocks executed 0%
    #####: 2682:bool Test::HasNonfatalFailure() {
        -: 2683:  return internal::GetUnitTestImpl()->current_test_result()->
    #####: 2684:      HasNonfatalFailure();
    %%%%%: 2684-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2685:}
        -: 2686:
        -: 2687:// Returns true if and only if the current test was skipped.
function _ZN7testing4Test9IsSkippedEv called 25 returned 100% blocks executed 100%
       25: 2688:bool Test::IsSkipped() {
       25: 2689:  return internal::GetUnitTestImpl()->current_test_result()->Skipped();
       25: 2689-block  0
call    0 returned 25
call    1 returned 25
call    2 returned 25
        -: 2690:}
        -: 2691:
        -: 2692:// class TestInfo
        -: 2693:
        -: 2694:// Constructs a TestInfo object. It assumes ownership of the test factory
        -: 2695:// object.
function _ZN7testing8TestInfoC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_PKcSA_NS_8internal12CodeLocationEPKvPNSB_15TestFactoryBaseE called 12 returned 100% blocks executed 31%
       12: 2696:TestInfo::TestInfo(const std::string& a_test_suite_name,
        -: 2697:                   const std::string& a_name, const char* a_type_param,
        -: 2698:                   const char* a_value_param,
        -: 2699:                   internal::CodeLocation a_code_location,
        -: 2700:                   internal::TypeId fixture_class_id,
       12: 2701:                   internal::TestFactoryBase* factory)
        -: 2702:    : test_suite_name_(a_test_suite_name),
        -: 2703:      name_(a_name),
    #####: 2704:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
    %%%%%: 2704-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2704-block  1
call    3 never executed
    #####: 2705:      value_param_(a_value_param ? new std::string(a_value_param) : nullptr),
    %%%%%: 2705-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2705-block  1
call    3 never executed
        -: 2706:      location_(a_code_location),
        -: 2707:      fixture_class_id_(fixture_class_id),
        -: 2708:      should_run_(false),
        -: 2709:      is_disabled_(false),
        -: 2710:      matches_filter_(false),
        -: 2711:      is_in_another_shard_(false),
        -: 2712:      factory_(factory),
      12*: 2713:      result_() {}
       12: 2713-block  0
call    0 returned 12
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0 (throw)
       12: 2713-block  1
branch  4 taken 0 (fallthrough)
branch  5 taken 12
    %%%%%: 2713-block  2
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 2713-block  3
       12: 2713-block  4
       12: 2713-block  5
call   10 returned 12
branch 11 taken 0 (fallthrough)
branch 12 taken 12
    %%%%%: 2713-block  6
call   13 never executed
       12: 2713-block  7
branch 14 taken 0 (fallthrough)
branch 15 taken 12
    %%%%%: 2713-block  8
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%: 2713-block  9
       12: 2713-block 10
       12: 2713-block 11
call   20 returned 12
branch 21 taken 0 (fallthrough)
branch 22 taken 12
    %%%%%: 2713-block 12
call   23 never executed
       12: 2713-block 13
call   24 returned 12
branch 25 taken 12 (fallthrough)
branch 26 taken 0 (throw)
       12: 2713-block 14
call   27 returned 12
branch 28 taken 12 (fallthrough)
branch 29 taken 0 (throw)
       12: 2713-block 15
    $$$$$: 2713-block 16
branch 30 never executed
branch 31 never executed
    $$$$$: 2713-block 17
call   32 never executed
    $$$$$: 2713-block 18
    $$$$$: 2713-block 19
branch 33 never executed
branch 34 never executed
    $$$$$: 2713-block 20
call   35 never executed
    $$$$$: 2713-block 21
    $$$$$: 2713-block 22
call   36 never executed
    $$$$$: 2713-block 23
call   37 never executed
    $$$$$: 2713-block 24
call   38 never executed
    $$$$$: 2713-block 25
call   39 never executed
    $$$$$: 2713-block 26
call   40 never executed
        -: 2714:
        -: 2715:// Destructs a TestInfo object.
function _ZN7testing8TestInfoD2Ev called 12 returned 100% blocks executed 100%
       12: 2716:TestInfo::~TestInfo() { delete factory_; }
       12: 2716-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 0
       12: 2716-block  1
call    2 returned 12
       12: 2716-block  2
call    3 returned 12
call    4 returned 12
call    5 returned 12
call    6 returned 12
call    7 returned 12
call    8 returned 12
        -: 2717:
        -: 2718:namespace internal {
        -: 2719:
        -: 2720:// Creates a new TestInfo object and registers it with Google Test;
        -: 2721:// returns the created object.
        -: 2722://
        -: 2723:// Arguments:
        -: 2724://
        -: 2725://   test_suite_name:  name of the test suite
        -: 2726://   name:             name of the test
        -: 2727://   type_param:       the name of the test's type parameter, or NULL if
        -: 2728://                     this is not a typed or a type-parameterized test.
        -: 2729://   value_param:      text representation of the test's value parameter,
        -: 2730://                     or NULL if this is not a value-parameterized test.
        -: 2731://   code_location:    code location where the test is defined
        -: 2732://   fixture_class_id: ID of the test fixture class
        -: 2733://   set_up_tc:        pointer to the function that sets up the test suite
        -: 2734://   tear_down_tc:     pointer to the function that tears down the test suite
        -: 2735://   factory:          pointer to the factory that creates a test object.
        -: 2736://                     The newly created TestInfo instance will assume
        -: 2737://                     ownership of the factory object.
function _ZN7testing8internal23MakeAndRegisterTestInfoEPKcS2_S2_S2_NS0_12CodeLocationEPKvPFvvES7_PNS0_15TestFactoryBaseE called 12 returned 100% blocks executed 52%
       12: 2738:TestInfo* MakeAndRegisterTestInfo(
        -: 2739:    const char* test_suite_name, const char* name, const char* type_param,
        -: 2740:    const char* value_param, CodeLocation code_location,
        -: 2741:    TypeId fixture_class_id, SetUpTestSuiteFunc set_up_tc,
        -: 2742:    TearDownTestSuiteFunc tear_down_tc, TestFactoryBase* factory) {
        -: 2743:  TestInfo* const test_info =
        -: 2744:      new TestInfo(test_suite_name, name, type_param, value_param,
       12: 2745:                   code_location, fixture_class_id, factory);
       12: 2745-block  0
call    0 returned 12
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0 (throw)
       12: 2745-block  1
call    4 returned 12
call    5 returned 12
branch  6 taken 12 (fallthrough)
branch  7 taken 0 (throw)
       12: 2745-block  2
call    8 returned 12
branch  9 taken 12 (fallthrough)
branch 10 taken 0 (throw)
       12: 2745-block  3
call   11 returned 12
branch 12 taken 12 (fallthrough)
branch 13 taken 0 (throw)
       12: 2745-block  4
call   14 returned 12
branch 15 taken 12 (fallthrough)
branch 16 taken 0 (throw)
       12: 2745-block  5
call   17 returned 12
call   18 returned 12
call   19 returned 12
call   20 returned 12
call   21 returned 12
    $$$$$: 2745-block  6
call   22 never executed
    $$$$$: 2745-block  7
call   23 never executed
    $$$$$: 2745-block  8
    $$$$$: 2745-block  9
call   24 never executed
    $$$$$: 2745-block 10
    $$$$$: 2745-block 11
call   25 never executed
    $$$$$: 2745-block 12
    $$$$$: 2745-block 13
call   26 never executed
    $$$$$: 2745-block 14
    $$$$$: 2745-block 15
call   27 never executed
       12: 2746:  GetUnitTestImpl()->AddTestInfo(set_up_tc, tear_down_tc, test_info);
call    0 returned 12
call    1 returned 12
       12: 2747:  return test_info;
       12: 2747-block  0
        -: 2748:}
        -: 2749:
function _ZN7testing8internal26ReportInvalidTestSuiteTypeEPKcNS0_12CodeLocationE called 0 returned 0% blocks executed 0%
    #####: 2750:void ReportInvalidTestSuiteType(const char* test_suite_name,
        -: 2751:                                CodeLocation code_location) {
    #####: 2752:  Message errors;
    %%%%%: 2752-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2752-block  1
call    3 never executed
        -: 2753:  errors
    #####: 2754:      << "Attempted redefinition of test suite " << test_suite_name << ".\n"
    %%%%%: 2754-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2754-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2754-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2755:      << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2755-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2756:      << "class.  However, in test suite " << test_suite_name << ", you tried\n"
    %%%%%: 2756-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2756-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2756-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 2757:      << "to define a test using a fixture class different from the one\n"
    %%%%%: 2757-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2758:      << "used earlier. This can happen if the two fixture classes are\n"
    %%%%%: 2758-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2759:      << "from different namespaces and have the same name. You should\n"
    %%%%%: 2759-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2760:      << "probably rename one of the classes to put the tests into different\n"
    %%%%%: 2760-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2761:      << "test suites.";
    %%%%%: 2761-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2762:
    #####: 2763:  GTEST_LOG_(ERROR) << FormatFileLocation(code_location.file.c_str(),
    %%%%%: 2763-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2763-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
    $$$$$: 2763-block  2
call   10 never executed
    $$$$$: 2763-block  3
    $$$$$: 2763-block  4
call   11 never executed
    $$$$$: 2763-block  5
        -: 2764:                                          code_location.line)
    #####: 2765:                    << " " << errors.GetString();
    %%%%%: 2765-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2765-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2765-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2765-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 2765-block  4
call   12 never executed
call   13 never executed
    $$$$$: 2765-block  5
call   14 never executed
    $$$$$: 2765-block  6
    #####: 2766:}
        -: 2767:}  // namespace internal
        -: 2768:
        -: 2769:namespace {
        -: 2770:
        -: 2771:// A predicate that checks the test name of a TestInfo against a known
        -: 2772:// value.
        -: 2773://
        -: 2774:// This is used for implementation of the TestSuite class only.  We put
        -: 2775:// it in the anonymous namespace to prevent polluting the outer
        -: 2776:// namespace.
        -: 2777://
        -: 2778:// TestNameIs is copyable.
        -: 2779:class TestNameIs {
        -: 2780: public:
        -: 2781:  // Constructor.
        -: 2782:  //
        -: 2783:  // TestNameIs has NO default constructor.
        -: 2784:  explicit TestNameIs(const char* name)
        -: 2785:      : name_(name) {}
        -: 2786:
        -: 2787:  // Returns true if and only if the test name of test_info matches name_.
        -: 2788:  bool operator()(const TestInfo * test_info) const {
        -: 2789:    return test_info && test_info->name() == name_;
        -: 2790:  }
        -: 2791:
        -: 2792: private:
        -: 2793:  std::string name_;
        -: 2794:};
        -: 2795:
        -: 2796:}  // namespace
        -: 2797:
        -: 2798:namespace internal {
        -: 2799:
        -: 2800:// This method expands all parameterized tests registered with macros TEST_P
        -: 2801:// and INSTANTIATE_TEST_SUITE_P into regular tests and registers those.
        -: 2802:// This will be done just once during the program runtime.
function _ZN7testing8internal12UnitTestImpl26RegisterParameterizedTestsEv called 1 returned 100% blocks executed 100%
        1: 2803:void UnitTestImpl::RegisterParameterizedTests() {
        1: 2804:  if (!parameterized_tests_registered_) {
        1: 2804-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 2805:    parameterized_test_registry_.RegisterTests();
        1: 2805-block  0
call    0 returned 1
        1: 2806:    type_parameterized_test_registry_.CheckForInstantiations();
call    0 returned 1
        1: 2807:    parameterized_tests_registered_ = true;
        -: 2808:  }
        1: 2809:}
        -: 2810:
        -: 2811:}  // namespace internal
        -: 2812:
        -: 2813:// Creates the test object, runs it, records its result, and then
        -: 2814:// deletes it.
function _ZN7testing8TestInfo3RunEv called 12 returned 100% blocks executed 93%
       12: 2815:void TestInfo::Run() {
      12*: 2816:  if (!should_run_) return;
       12: 2816-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    %%%%%: 2816-block  1
        -: 2817:
        -: 2818:  // Tells UnitTest where to store test result.
       12: 2819:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       12: 2819-block  0
call    0 returned 12
       12: 2820:  impl->set_current_test_info(this);
call    0 returned 12
        -: 2821:
       12: 2822:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 returned 12
call    1 returned 12
call    2 returned 12
        -: 2823:
        -: 2824:  // Notifies the unit test event listeners that a test is about to start.
       12: 2825:  repeater->OnTestStart(*this);
call    0 returned 12
        -: 2826:
       12: 2827:  const TimeInMillis start = internal::GetTimeInMillis();
call    0 returned 12
        -: 2828:
       12: 2829:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 12
call    1 returned 12
        -: 2830:
        -: 2831:  // Creates the test object.
       24: 2832:  Test* const test = internal::HandleExceptionsInMethodIfSupported(
       12: 2833:      factory_, &internal::TestFactoryBase::CreateTest,
call    0 returned 12
        -: 2834:      "the test fixture's constructor");
        -: 2835:
        -: 2836:  // Runs the test if the constructor didn't generate a fatal failure or invoke
        -: 2837:  // GTEST_SKIP().
        -: 2838:  // Note that the object will not be null
      12*: 2839:  if (!Test::HasFatalFailure() && !Test::IsSkipped()) {
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0
       12: 2839-block  0
call    3 returned 12
branch  4 taken 12 (fallthrough)
branch  5 taken 0
       12: 2839-block  1
    %%%%%: 2839-block  2
       12: 2839-block  3
branch  6 taken 12 (fallthrough)
branch  7 taken 0
        -: 2840:    // This doesn't throw as all user code that can throw are wrapped into
        -: 2841:    // exception handling code.
       12: 2842:    test->Run();
       12: 2842-block  0
call    0 returned 12
        -: 2843:  }
        -: 2844:
       12: 2845:  if (test != nullptr) {
       12: 2845-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 0
        -: 2846:    // Deletes the test object.
       12: 2847:    impl->os_stack_trace_getter()->UponLeavingGTest();
       12: 2847-block  0
call    0 returned 12
call    1 returned 12
       12: 2848:    internal::HandleExceptionsInMethodIfSupported(
call    0 returned 12
        -: 2849:        test, &Test::DeleteSelf_, "the test fixture's destructor");
        -: 2850:  }
        -: 2851:
       12: 2852:  result_.set_start_timestamp(start);
       12: 2852-block  0
call    0 returned 12
       12: 2853:  result_.set_elapsed_time(internal::GetTimeInMillis() - start);
call    0 returned 12
call    1 returned 12
        -: 2854:
        -: 2855:  // Notifies the unit test event listener that a test has just finished.
       12: 2856:  repeater->OnTestEnd(*this);
call    0 returned 12
        -: 2857:
        -: 2858:  // Tells UnitTest to stop associating assertion results to this
        -: 2859:  // test.
       12: 2860:  impl->set_current_test_info(nullptr);
call    0 returned 12
        -: 2861:}
        -: 2862:
        -: 2863:// Skip and records a skipped test result for this object.
function _ZN7testing8TestInfo4SkipEv called 0 returned 0% blocks executed 0%
    #####: 2864:void TestInfo::Skip() {
    #####: 2865:  if (!should_run_) return;
    %%%%%: 2865-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2865-block  1
        -: 2866:
    #####: 2867:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 2867-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2868:  impl->set_current_test_info(this);
    %%%%%: 2868-block  0
call    0 never executed
        -: 2869:
    #####: 2870:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2870-block  0
call    3 never executed
call    4 never executed
        -: 2871:
        -: 2872:  // Notifies the unit test event listeners that a test is about to start.
    #####: 2873:  repeater->OnTestStart(*this);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2874:
        -: 2875:  const TestPartResult test_part_result =
    #####: 2876:      TestPartResult(TestPartResult::kSkip, this->file(), this->line(), "");
    %%%%%: 2876-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    $$$$$: 2876-block  1
call    6 never executed
    #####: 2877:  impl->GetTestPartResultReporterForCurrentThread()->ReportTestPartResult(
    %%%%%: 2877-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2878:      test_part_result);
    %%%%%: 2878-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2879:
        -: 2880:  // Notifies the unit test event listener that a test has just finished.
    #####: 2881:  repeater->OnTestEnd(*this);
    %%%%%: 2881-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2882:  impl->set_current_test_info(nullptr);
    %%%%%: 2882-block  0
call    0 never executed
        -: 2883:}
        -: 2884:
        -: 2885:// class TestSuite
        -: 2886:
        -: 2887:// Gets the number of successful tests in this test suite.
function _ZNK7testing9TestSuite21successful_test_countEv called 8 returned 100% blocks executed 100%
        8: 2888:int TestSuite::successful_test_count() const {
        8: 2889:  return CountIf(test_info_list_, TestPassed);
        8: 2889-block  0
call    0 returned 8
        -: 2890:}
        -: 2891:
        -: 2892:// Gets the number of successful tests in this test suite.
function _ZNK7testing9TestSuite18skipped_test_countEv called 8 returned 100% blocks executed 100%
        8: 2893:int TestSuite::skipped_test_count() const {
        8: 2894:  return CountIf(test_info_list_, TestSkipped);
        8: 2894-block  0
call    0 returned 8
        -: 2895:}
        -: 2896:
        -: 2897:// Gets the number of failed tests in this test suite.
function _ZNK7testing9TestSuite17failed_test_countEv called 16 returned 100% blocks executed 100%
       16: 2898:int TestSuite::failed_test_count() const {
       16: 2899:  return CountIf(test_info_list_, TestFailed);
       16: 2899-block  0
call    0 returned 16
        -: 2900:}
        -: 2901:
        -: 2902:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing9TestSuite30reportable_disabled_test_countEv called 8 returned 100% blocks executed 100%
        8: 2903:int TestSuite::reportable_disabled_test_count() const {
        8: 2904:  return CountIf(test_info_list_, TestReportableDisabled);
        8: 2904-block  0
call    0 returned 8
        -: 2905:}
        -: 2906:
        -: 2907:// Gets the number of disabled tests in this test suite.
function _ZNK7testing9TestSuite19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2908:int TestSuite::disabled_test_count() const {
    #####: 2909:  return CountIf(test_info_list_, TestDisabled);
    %%%%%: 2909-block  0
call    0 never executed
        -: 2910:}
        -: 2911:
        -: 2912:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing9TestSuite21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 2913:int TestSuite::reportable_test_count() const {
    #####: 2914:  return CountIf(test_info_list_, TestReportable);
    %%%%%: 2914-block  0
call    0 never executed
        -: 2915:}
        -: 2916:
        -: 2917:// Get the number of tests in this test suite that should run.
function _ZNK7testing9TestSuite17test_to_run_countEv called 32 returned 100% blocks executed 100%
       32: 2918:int TestSuite::test_to_run_count() const {
       32: 2919:  return CountIf(test_info_list_, ShouldRunTest);
       32: 2919-block  0
call    0 returned 32
        -: 2920:}
        -: 2921:
        -: 2922:// Gets the number of all tests.
function _ZNK7testing9TestSuite16total_test_countEv called 20 returned 100% blocks executed 100%
       20: 2923:int TestSuite::total_test_count() const {
       20: 2924:  return static_cast<int>(test_info_list_.size());
       20: 2924-block  0
call    0 returned 20
        -: 2925:}
        -: 2926:
        -: 2927:// Creates a TestSuite with the given name.
        -: 2928://
        -: 2929:// Arguments:
        -: 2930://
        -: 2931://   a_name:       name of the test suite
        -: 2932://   a_type_param: the name of the test suite's type parameter, or NULL if
        -: 2933://                 this is not a typed or a type-parameterized test suite.
        -: 2934://   set_up_tc:    pointer to the function that sets up the test suite
        -: 2935://   tear_down_tc: pointer to the function that tears down the test suite
function _ZN7testing9TestSuiteC2EPKcS2_PFvvES4_ called 8 returned 100% blocks executed 36%
        8: 2936:TestSuite::TestSuite(const char* a_name, const char* a_type_param,
        -: 2937:                     internal::SetUpTestSuiteFunc set_up_tc,
        8: 2938:                     internal::TearDownTestSuiteFunc tear_down_tc)
        -: 2939:    : name_(a_name),
    #####: 2940:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
    %%%%%: 2940-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 2940-block  1
call    3 never executed
        -: 2941:      set_up_tc_(set_up_tc),
        -: 2942:      tear_down_tc_(tear_down_tc),
        -: 2943:      should_run_(false),
        -: 2944:      start_timestamp_(0),
       8*: 2945:      elapsed_time_(0) {}
        8: 2945-block  0
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0 (throw)
        8: 2945-block  1
call    4 returned 8
branch  5 taken 0 (fallthrough)
branch  6 taken 8
    %%%%%: 2945-block  2
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 2945-block  3
        8: 2945-block  4
        8: 2945-block  5
call   11 returned 8
branch 12 taken 0 (fallthrough)
branch 13 taken 8
    %%%%%: 2945-block  6
call   14 never executed
        8: 2945-block  7
call   15 returned 8
call   16 returned 8
call   17 returned 8
branch 18 taken 8 (fallthrough)
branch 19 taken 0 (throw)
        8: 2945-block  8
    $$$$$: 2945-block  9
call   20 never executed
    $$$$$: 2945-block 10
call   21 never executed
    $$$$$: 2945-block 11
branch 22 never executed
branch 23 never executed
    $$$$$: 2945-block 12
call   24 never executed
    $$$$$: 2945-block 13
    $$$$$: 2945-block 14
call   25 never executed
    $$$$$: 2945-block 15
call   26 never executed
    $$$$$: 2945-block 16
call   27 never executed
    $$$$$: 2945-block 17
call   28 never executed
        -: 2946:
        -: 2947:// Destructor of TestSuite.
       16: 2948:TestSuite::~TestSuite() {
        -: 2949:  // Deletes every Test in the collection.
        8: 2950:  ForEach(test_info_list_, internal::Delete<TestInfo>);
       16: 2951:}
------------------
_ZN7testing9TestSuiteD0Ev:
function _ZN7testing9TestSuiteD0Ev called 8 returned 100% blocks executed 100%
        8: 2948:TestSuite::~TestSuite() {
        -: 2949:  // Deletes every Test in the collection.
        -: 2950:  ForEach(test_info_list_, internal::Delete<TestInfo>);
        8: 2951:}
        8: 2951-block  0
call    0 returned 8
call    1 returned 8
------------------
_ZN7testing9TestSuiteD2Ev:
function _ZN7testing9TestSuiteD2Ev called 8 returned 100% blocks executed 100%
        8: 2948:TestSuite::~TestSuite() {
call    0 returned 8
call    1 returned 8
call    2 returned 8
call    3 returned 8
call    4 returned 8
        -: 2949:  // Deletes every Test in the collection.
        8: 2950:  ForEach(test_info_list_, internal::Delete<TestInfo>);
        8: 2950-block  0
call    0 returned 8
        8: 2951:}
------------------
        -: 2952:
        -: 2953:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2954:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing9TestSuite11GetTestInfoEi called 0 returned 0% blocks executed 0%
    #####: 2955:const TestInfo* TestSuite::GetTestInfo(int i) const {
    #####: 2956:  const int index = GetElementOr(test_indices_, i, -1);
    %%%%%: 2956-block  0
call    0 never executed
    #####: 2957:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 never executed
branch  1 never executed
    %%%%%: 2957-block  0
call    2 never executed
    %%%%%: 2957-block  1
    %%%%%: 2957-block  2
        -: 2958:}
        -: 2959:
        -: 2960:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2961:// total_test_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing9TestSuite18GetMutableTestInfoEi called 12 returned 100% blocks executed 86%
       12: 2962:TestInfo* TestSuite::GetMutableTestInfo(int i) {
       12: 2963:  const int index = GetElementOr(test_indices_, i, -1);
       12: 2963-block  0
call    0 returned 12
      12*: 2964:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
branch  0 taken 12 (fallthrough)
branch  1 taken 0
       12: 2964-block  0
call    2 returned 12
    %%%%%: 2964-block  1
       12: 2964-block  2
        -: 2965:}
        -: 2966:
        -: 2967:// Adds a test to this test suite.  Will delete the test upon
        -: 2968:// destruction of the TestSuite object.
function _ZN7testing9TestSuite11AddTestInfoEPNS_8TestInfoE called 12 returned 100% blocks executed 100%
       12: 2969:void TestSuite::AddTestInfo(TestInfo* test_info) {
       12: 2970:  test_info_list_.push_back(test_info);
       12: 2970-block  0
call    0 returned 12
       12: 2971:  test_indices_.push_back(static_cast<int>(test_indices_.size()));
call    0 returned 12
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0 (throw)
       12: 2972:}
       12: 2972-block  0
        -: 2973:
        -: 2974:// Runs every test in this TestSuite.
function _ZN7testing9TestSuite3RunEv called 8 returned 100% blocks executed 69%
        8: 2975:void TestSuite::Run() {
       8*: 2976:  if (!should_run_) return;
        8: 2976-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    %%%%%: 2976-block  1
        -: 2977:
        8: 2978:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        8: 2978-block  0
call    0 returned 8
        8: 2979:  impl->set_current_test_suite(this);
call    0 returned 8
        -: 2980:
        8: 2981:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 returned 8
call    1 returned 8
call    2 returned 8
        -: 2982:
        -: 2983:  // Call both legacy and the new API
        8: 2984:  repeater->OnTestSuiteStart(*this);
call    0 returned 8
        -: 2985://  Legacy API is deprecated but still available
        -: 2986:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        8: 2987:  repeater->OnTestCaseStart(*this);
call    0 returned 8
        -: 2988:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 2989:
        8: 2990:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 8
call    1 returned 8
        8: 2991:  internal::HandleExceptionsInMethodIfSupported(
call    0 returned 8
        -: 2992:      this, &TestSuite::RunSetUpTestSuite, "SetUpTestSuite()");
        -: 2993:
        8: 2994:  start_timestamp_ = internal::GetTimeInMillis();
call    0 returned 8
       20: 2995:  for (int i = 0; i < total_test_count(); i++) {
       20: 2995-block  0
call    0 returned 20
branch  1 taken 12 (fallthrough)
branch  2 taken 8
       12: 2995-block  1
       12: 2996:    GetMutableTestInfo(i)->Run();
       12: 2996-block  0
call    0 returned 12
call    1 returned 12
      12*: 2997:    if (GTEST_FLAG(fail_fast) && GetMutableTestInfo(i)->result()->Failed()) {
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    %%%%%: 2997-block  0
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2997-block  1
       12: 2997-block  2
       12: 2997-block  3
branch  7 taken 0 (fallthrough)
branch  8 taken 12
    #####: 2998:      for (int j = i + 1; j < total_test_count(); j++) {
    %%%%%: 2998-block  0
    %%%%%: 2998-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2999:        GetMutableTestInfo(j)->Skip();
    %%%%%: 2999-block  0
call    0 never executed
call    1 never executed
        -: 3000:      }
    #####: 3001:      break;
    %%%%%: 3001-block  0
        -: 3002:    }
        -: 3003:  }
        8: 3004:  elapsed_time_ = internal::GetTimeInMillis() - start_timestamp_;
        8: 3004-block  0
call    0 returned 8
        -: 3005:
        8: 3006:  impl->os_stack_trace_getter()->UponLeavingGTest();
call    0 returned 8
call    1 returned 8
        8: 3007:  internal::HandleExceptionsInMethodIfSupported(
call    0 returned 8
        -: 3008:      this, &TestSuite::RunTearDownTestSuite, "TearDownTestSuite()");
        -: 3009:
        -: 3010:  // Call both legacy and the new API
        8: 3011:  repeater->OnTestSuiteEnd(*this);
call    0 returned 8
        -: 3012://  Legacy API is deprecated but still available
        -: 3013:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        8: 3014:  repeater->OnTestCaseEnd(*this);
call    0 returned 8
        -: 3015:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3016:
        8: 3017:  impl->set_current_test_suite(nullptr);
call    0 returned 8
        -: 3018:}
        -: 3019:
        -: 3020:// Skips all tests under this TestSuite.
function _ZN7testing9TestSuite4SkipEv called 0 returned 0% blocks executed 0%
    #####: 3021:void TestSuite::Skip() {
    #####: 3022:  if (!should_run_) return;
    %%%%%: 3022-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3022-block  1
        -: 3023:
    #####: 3024:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 3024-block  0
call    0 never executed
    #####: 3025:  impl->set_current_test_suite(this);
call    0 never executed
        -: 3026:
    #####: 3027:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
call    0 never executed
call    1 never executed
call    2 never executed
        -: 3028:
        -: 3029:  // Call both legacy and the new API
    #####: 3030:  repeater->OnTestSuiteStart(*this);
call    0 never executed
        -: 3031://  Legacy API is deprecated but still available
        -: 3032:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3033:  repeater->OnTestCaseStart(*this);
call    0 never executed
        -: 3034:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3035:
    #####: 3036:  for (int i = 0; i < total_test_count(); i++) {
    %%%%%: 3036-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3037:    GetMutableTestInfo(i)->Skip();
    %%%%%: 3037-block  0
call    0 never executed
call    1 never executed
        -: 3038:  }
        -: 3039:
        -: 3040:  // Call both legacy and the new API
    #####: 3041:  repeater->OnTestSuiteEnd(*this);
    %%%%%: 3041-block  0
call    0 never executed
        -: 3042:  // Legacy API is deprecated but still available
        -: 3043:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3044:  repeater->OnTestCaseEnd(*this);
call    0 never executed
        -: 3045:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3046:
    #####: 3047:  impl->set_current_test_suite(nullptr);
call    0 never executed
        -: 3048:}
        -: 3049:
        -: 3050:// Clears the results of all tests in this test suite.
function _ZN7testing9TestSuite11ClearResultEv called 8 returned 100% blocks executed 100%
        8: 3051:void TestSuite::ClearResult() {
        8: 3052:  ad_hoc_test_result_.Clear();
        8: 3052-block  0
call    0 returned 8
        8: 3053:  ForEach(test_info_list_, TestInfo::ClearTestResult);
call    0 returned 8
        8: 3054:}
        -: 3055:
        -: 3056:// Shuffles the tests in this test suite.
function _ZN7testing9TestSuite12ShuffleTestsEPNS_8internal6RandomE called 0 returned 0% blocks executed 0%
    #####: 3057:void TestSuite::ShuffleTests(internal::Random* random) {
    #####: 3058:  Shuffle(random, &test_indices_);
    %%%%%: 3058-block  0
call    0 never executed
    #####: 3059:}
        -: 3060:
        -: 3061:// Restores the test order to before the first shuffle.
function _ZN7testing9TestSuite14UnshuffleTestsEv called 8 returned 100% blocks executed 100%
        8: 3062:void TestSuite::UnshuffleTests() {
       20: 3063:  for (size_t i = 0; i < test_indices_.size(); i++) {
        8: 3063-block  0
       20: 3063-block  1
call    0 returned 20
branch  1 taken 12 (fallthrough)
branch  2 taken 8
       12: 3064:    test_indices_[i] = static_cast<int>(i);
       12: 3064-block  0
call    0 returned 12
        -: 3065:  }
        8: 3066:}
        -: 3067:
        -: 3068:// Formats a countable noun.  Depending on its quantity, either the
        -: 3069:// singular form or the plural form is used. e.g.
        -: 3070://
        -: 3071:// FormatCountableNoun(1, "formula", "formuli") returns "1 formula".
        -: 3072:// FormatCountableNoun(5, "book", "books") returns "5 books".
function _ZN7testingL19FormatCountableNounEiPKcS1_ called 21 returned 100% blocks executed 71%
       21: 3073:static std::string FormatCountableNoun(int count,
        -: 3074:                                       const char * singular_form,
        -: 3075:                                       const char * plural_form) {
       42: 3076:  return internal::StreamableToString(count) + " " +
       21: 3076-block  0
call    0 returned 21
call    1 returned 21
branch  2 taken 21 (fallthrough)
branch  3 taken 0 (throw)
       21: 3076-block  1
call    4 returned 21
call    5 returned 21
    $$$$$: 3076-block  2
call    6 never executed
    $$$$$: 3076-block  3
    $$$$$: 3076-block  4
call    7 never executed
       63: 3077:      (count == 1 ? singular_form : plural_form);
       21: 3077-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 11
       10: 3077-block  1
       11: 3077-block  2
       21: 3077-block  3
call    2 returned 21
branch  3 taken 21 (fallthrough)
branch  4 taken 0 (throw)
       21: 3077-block  4
        -: 3078:}
        -: 3079:
        -: 3080:// Formats the count of tests.
function _ZN7testingL15FormatTestCountEi called 3 returned 100% blocks executed 100%
        3: 3081:static std::string FormatTestCount(int test_count) {
        3: 3082:  return FormatCountableNoun(test_count, "test", "tests");
        3: 3082-block  0
call    0 returned 3
        -: 3083:}
        -: 3084:
        -: 3085:// Formats the count of test suites.
function _ZN7testingL20FormatTestSuiteCountEi called 2 returned 100% blocks executed 100%
        2: 3086:static std::string FormatTestSuiteCount(int test_suite_count) {
        2: 3087:  return FormatCountableNoun(test_suite_count, "test suite", "test suites");
        2: 3087-block  0
call    0 returned 2
        -: 3088:}
        -: 3089:
        -: 3090:// Converts a TestPartResult::Type enum to human-friendly string
        -: 3091:// representation.  Both kNonFatalFailure and kFatalFailure are translated
        -: 3092:// to "Failure", as the user usually doesn't care about the difference
        -: 3093:// between the two when viewing the test result.
function _ZN7testingL26TestPartResultTypeToStringENS_14TestPartResult4TypeE called 0 returned 0% blocks executed 0%
    #####: 3094:static const char * TestPartResultTypeToString(TestPartResult::Type type) {
    #####: 3095:  switch (type) {
    %%%%%: 3095-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3096:    case TestPartResult::kSkip:
    #####: 3097:      return "Skipped\n";
    %%%%%: 3097-block  0
    #####: 3098:    case TestPartResult::kSuccess:
    #####: 3099:      return "Success";
    %%%%%: 3099-block  0
        -: 3100:
    #####: 3101:    case TestPartResult::kNonFatalFailure:
        -: 3102:    case TestPartResult::kFatalFailure:
        -: 3103:#ifdef _MSC_VER
        -: 3104:      return "error: ";
        -: 3105:#else
    #####: 3106:      return "Failure\n";
    %%%%%: 3106-block  0
        -: 3107:#endif
    #####: 3108:    default:
    #####: 3109:      return "Unknown result type";
    %%%%%: 3109-block  0
        -: 3110:  }
        -: 3111:}
        -: 3112:
        -: 3113:namespace internal {
        -: 3114:namespace {
        -: 3115:enum class GTestColor { kDefault, kRed, kGreen, kYellow };
        -: 3116:}  // namespace
        -: 3117:
        -: 3118:// Prints a TestPartResult to an std::string.
function _ZN7testing8internalL27PrintTestPartResultToStringERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3119:static std::string PrintTestPartResultToString(
        -: 3120:    const TestPartResult& test_part_result) {
    #####: 3121:  return (Message()
    %%%%%: 3121-block  0
call    0 never executed
    $$$$$: 3121-block  1
call    1 never executed
    #####: 3122:          << internal::FormatFileLocation(test_part_result.file_name(),
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    $$$$$: 3122-block  0
call    6 never executed
    $$$$$: 3122-block  1
    #####: 3123:                                          test_part_result.line_number())
    %%%%%: 3123-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3124:          << " " << TestPartResultTypeToString(test_part_result.type())
    %%%%%: 3124-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3124-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$: 3124-block  2
    #####: 3125:          << test_part_result.message()).GetString();
    %%%%%: 3125-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3125-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3125-block  2
call    7 never executed
    %%%%%: 3125-block  3
    $$$$$: 3125-block  4
        -: 3126:}
        -: 3127:
        -: 3128:// Prints a TestPartResult.
function _ZN7testing8internalL19PrintTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3129:static void PrintTestPartResult(const TestPartResult& test_part_result) {
        -: 3130:  const std::string& result =
    #####: 3131:      PrintTestPartResultToString(test_part_result);
    %%%%%: 3131-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3131-block  1
call    3 never executed
    $$$$$: 3131-block  2
call    4 never executed
    #####: 3132:  printf("%s\n", result.c_str());
    %%%%%: 3132-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3133:  fflush(stdout);
    %%%%%: 3133-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3134:  // If the test program runs in Visual Studio or a debugger, the
        -: 3135:  // following statements add the test part result message to the Output
        -: 3136:  // window such that the user can double-click on it to jump to the
        -: 3137:  // corresponding source code location; otherwise they do nothing.
        -: 3138:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 3139:  // We don't call OutputDebugString*() on Windows Mobile, as printing
        -: 3140:  // to stdout is done by OutputDebugString() there already - we don't
        -: 3141:  // want the same message printed twice.
        -: 3142:  ::OutputDebugStringA(result.c_str());
        -: 3143:  ::OutputDebugStringA("\n");
        -: 3144:#endif
    #####: 3145:}
        -: 3146:
        -: 3147:// class PrettyUnitTestResultPrinter
        -: 3148:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE && \
        -: 3149:    !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT && !GTEST_OS_WINDOWS_MINGW
        -: 3150:
        -: 3151:// Returns the character attribute for the given color.
        -: 3152:static WORD GetColorAttribute(GTestColor color) {
        -: 3153:  switch (color) {
        -: 3154:    case GTestColor::kRed:
        -: 3155:      return FOREGROUND_RED;
        -: 3156:    case GTestColor::kGreen:
        -: 3157:      return FOREGROUND_GREEN;
        -: 3158:    case GTestColor::kYellow:
        -: 3159:      return FOREGROUND_RED | FOREGROUND_GREEN;
        -: 3160:    default:           return 0;
        -: 3161:  }
        -: 3162:}
        -: 3163:
        -: 3164:static int GetBitOffset(WORD color_mask) {
        -: 3165:  if (color_mask == 0) return 0;
        -: 3166:
        -: 3167:  int bitOffset = 0;
        -: 3168:  while ((color_mask & 1) == 0) {
        -: 3169:    color_mask >>= 1;
        -: 3170:    ++bitOffset;
        -: 3171:  }
        -: 3172:  return bitOffset;
        -: 3173:}
        -: 3174:
        -: 3175:static WORD GetNewColor(GTestColor color, WORD old_color_attrs) {
        -: 3176:  // Let's reuse the BG
        -: 3177:  static const WORD background_mask = BACKGROUND_BLUE | BACKGROUND_GREEN |
        -: 3178:                                      BACKGROUND_RED | BACKGROUND_INTENSITY;
        -: 3179:  static const WORD foreground_mask = FOREGROUND_BLUE | FOREGROUND_GREEN |
        -: 3180:                                      FOREGROUND_RED | FOREGROUND_INTENSITY;
        -: 3181:  const WORD existing_bg = old_color_attrs & background_mask;
        -: 3182:
        -: 3183:  WORD new_color =
        -: 3184:      GetColorAttribute(color) | existing_bg | FOREGROUND_INTENSITY;
        -: 3185:  static const int bg_bitOffset = GetBitOffset(background_mask);
        -: 3186:  static const int fg_bitOffset = GetBitOffset(foreground_mask);
        -: 3187:
        -: 3188:  if (((new_color & background_mask) >> bg_bitOffset) ==
        -: 3189:      ((new_color & foreground_mask) >> fg_bitOffset)) {
        -: 3190:    new_color ^= FOREGROUND_INTENSITY;  // invert intensity
        -: 3191:  }
        -: 3192:  return new_color;
        -: 3193:}
        -: 3194:
        -: 3195:#else
        -: 3196:
        -: 3197:// Returns the ANSI color code for the given color. GTestColor::kDefault is
        -: 3198:// an invalid input.
function _ZN7testing8internalL16GetAnsiColorCodeENS0_12_GLOBAL__N_110GTestColorE called 0 returned 0% blocks executed 0%
    #####: 3199:static const char* GetAnsiColorCode(GTestColor color) {
    #####: 3200:  switch (color) {
    %%%%%: 3200-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3201:    case GTestColor::kRed:
    #####: 3202:      return "1";
    %%%%%: 3202-block  0
    #####: 3203:    case GTestColor::kGreen:
    #####: 3204:      return "2";
    %%%%%: 3204-block  0
    #####: 3205:    case GTestColor::kYellow:
    #####: 3206:      return "3";
    %%%%%: 3206-block  0
    #####: 3207:    default:
    #####: 3208:      return nullptr;
    %%%%%: 3208-block  0
        -: 3209:  }
        -: 3210:}
        -: 3211:
        -: 3212:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 3213:
        -: 3214:// Returns true if and only if Google Test should use colors in the output.
function _ZN7testing8internal14ShouldUseColorEb called 1 returned 100% blocks executed 31%
        1: 3215:bool ShouldUseColor(bool stdout_is_tty) {
        1: 3216:  const char* const gtest_color = GTEST_FLAG(color).c_str();
        1: 3216-block  0
call    0 returned 1
        -: 3217:
        1: 3218:  if (String::CaseInsensitiveCStringEquals(gtest_color, "auto")) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 3219:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW
        -: 3220:    // On Windows the TERM variable is usually not set, but the
        -: 3221:    // console there does support colors.
        -: 3222:    return stdout_is_tty;
        -: 3223:#else
        -: 3224:    // On non-Windows platforms, we rely on the TERM variable.
    #####: 3225:    const char* const term = posix::GetEnv("TERM");
    %%%%%: 3225-block  0
call    0 never executed
        -: 3226:    const bool term_supports_color =
    #####: 3227:        String::CStringEquals(term, "xterm") ||
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3228:        String::CStringEquals(term, "xterm-color") ||
    %%%%%: 3228-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3229:        String::CStringEquals(term, "xterm-256color") ||
    %%%%%: 3229-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3230:        String::CStringEquals(term, "screen") ||
    %%%%%: 3230-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3231:        String::CStringEquals(term, "screen-256color") ||
    %%%%%: 3231-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3232:        String::CStringEquals(term, "tmux") ||
    %%%%%: 3232-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3233:        String::CStringEquals(term, "tmux-256color") ||
    %%%%%: 3233-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3234:        String::CStringEquals(term, "rxvt-unicode") ||
    %%%%%: 3234-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3235:        String::CStringEquals(term, "rxvt-unicode-256color") ||
    %%%%%: 3235-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3236:        String::CStringEquals(term, "linux") ||
branch  0 never executed
branch  1 never executed
    %%%%%: 3236-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3236-block  1
    %%%%%: 3236-block  2
    #####: 3237:        String::CStringEquals(term, "cygwin");
    %%%%%: 3237-block  0
call    0 never executed
    #####: 3238:    return stdout_is_tty && term_supports_color;
    %%%%%: 3238-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3238-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3238-block  2
    %%%%%: 3238-block  3
    %%%%%: 3238-block  4
        -: 3239:#endif  // GTEST_OS_WINDOWS
        -: 3240:  }
        -: 3241:
        2: 3242:  return String::CaseInsensitiveCStringEquals(gtest_color, "yes") ||
        1: 3242-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        2: 3243:      String::CaseInsensitiveCStringEquals(gtest_color, "true") ||
        1: 3243-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
       3*: 3244:      String::CaseInsensitiveCStringEquals(gtest_color, "t") ||
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3244-block  0
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%: 3244-block  1
        1: 3244-block  2
        2: 3245:      String::CStringEquals(gtest_color, "1");
        1: 3245-block  0
call    0 returned 1
        1: 3245-block  1
        -: 3246:  // We take "yes", "true", "t", and "1" as meaning "yes".  If the
        -: 3247:  // value is neither one of these nor "auto", we treat it as "no" to
        -: 3248:  // be conservative.
        -: 3249:}
        -: 3250:
        -: 3251:// Helpers for printing colored strings to stdout. Note that on Windows, we
        -: 3252:// cannot simply emit special characters and have the terminal change colors.
        -: 3253:// This routine must actually emit the characters rather than return a string
        -: 3254:// that would be colored when printed, as can be done on Linux.
        -: 3255:
        -: 3256:GTEST_ATTRIBUTE_PRINTF_(2, 3)
function _ZN7testing8internalL13ColoredPrintfENS0_12_GLOBAL__N_110GTestColorEPKcz called 45 returned 100% blocks executed 67%
       45: 3257:static void ColoredPrintf(GTestColor color, const char *fmt, ...) {
        -: 3258:  va_list args;
       45: 3259:  va_start(args, fmt);
        -: 3260:
        -: 3261:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_ZOS || GTEST_OS_IOS || \
        -: 3262:    GTEST_OS_WINDOWS_PHONE || GTEST_OS_WINDOWS_RT || defined(ESP_PLATFORM)
        -: 3263:  const bool use_color = AlwaysFalse();
        -: 3264:#else
        -: 3265:  static const bool in_color_mode =
       45: 3266:      ShouldUseColor(posix::IsATTY(posix::FileNo(stdout)) != 0);
       45: 3266-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 44
        1: 3266-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 3266-block  2
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
      45*: 3267:  const bool use_color = in_color_mode && (color != GTestColor::kDefault);
       45: 3267-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 45
    %%%%%: 3267-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3267-block  2
       45: 3267-block  3
        -: 3268:#endif  // GTEST_OS_WINDOWS_MOBILE || GTEST_OS_ZOS
        -: 3269:
       45: 3270:  if (!use_color) {
       45: 3270-block  0
branch  0 taken 45 (fallthrough)
branch  1 taken 0
       45: 3271:    vprintf(fmt, args);
       45: 3271-block  0
call    0 returned 45
branch  1 taken 45 (fallthrough)
branch  2 taken 0 (throw)
       45: 3272:    va_end(args);
       45: 3273:    return;
       45: 3273-block  0
        -: 3274:  }
        -: 3275:
        -: 3276:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE && \
        -: 3277:    !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT && !GTEST_OS_WINDOWS_MINGW
        -: 3278:  const HANDLE stdout_handle = GetStdHandle(STD_OUTPUT_HANDLE);
        -: 3279:
        -: 3280:  // Gets the current text color.
        -: 3281:  CONSOLE_SCREEN_BUFFER_INFO buffer_info;
        -: 3282:  GetConsoleScreenBufferInfo(stdout_handle, &buffer_info);
        -: 3283:  const WORD old_color_attrs = buffer_info.wAttributes;
        -: 3284:  const WORD new_color = GetNewColor(color, old_color_attrs);
        -: 3285:
        -: 3286:  // We need to flush the stream buffers into the console before each
        -: 3287:  // SetConsoleTextAttribute call lest it affect the text that is already
        -: 3288:  // printed but has not yet reached the console.
        -: 3289:  fflush(stdout);
        -: 3290:  SetConsoleTextAttribute(stdout_handle, new_color);
        -: 3291:
        -: 3292:  vprintf(fmt, args);
        -: 3293:
        -: 3294:  fflush(stdout);
        -: 3295:  // Restores the text color.
        -: 3296:  SetConsoleTextAttribute(stdout_handle, old_color_attrs);
        -: 3297:#else
    #####: 3298:  printf("\033[0;3%sm", GetAnsiColorCode(color));
    %%%%%: 3298-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3299:  vprintf(fmt, args);
    %%%%%: 3299-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3300:  printf("\033[m");  // Resets the terminal to default.
    %%%%%: 3300-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3301:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
    #####: 3302:  va_end(args);
    %%%%%: 3302-block  0
        -: 3303:}
        -: 3304:
        -: 3305:// Text printed in Google Test's text output and --gtest_list_tests
        -: 3306:// output to label the type parameter and value parameter for a test.
        -: 3307:static const char kTypeParamLabel[] = "TypeParam";
        -: 3308:static const char kValueParamLabel[] = "GetParam()";
        -: 3309:
function _ZN7testing8internalL29PrintFullTestCommentIfPresentERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3310:static void PrintFullTestCommentIfPresent(const TestInfo& test_info) {
    #####: 3311:  const char* const type_param = test_info.type_param();
    %%%%%: 3311-block  0
call    0 never executed
    #####: 3312:  const char* const value_param = test_info.value_param();
call    0 never executed
        -: 3313:
    #####: 3314:  if (type_param != nullptr || value_param != nullptr) {
branch  0 never executed
branch  1 never executed
    %%%%%: 3314-block  0
branch  2 never executed
branch  3 never executed
    #####: 3315:    printf(", where ");
    %%%%%: 3315-block  0
call    0 never executed
    #####: 3316:    if (type_param != nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 3317:      printf("%s = %s", kTypeParamLabel, type_param);
    %%%%%: 3317-block  0
call    0 never executed
    #####: 3318:      if (value_param != nullptr) printf(" and ");
branch  0 never executed
branch  1 never executed
    %%%%%: 3318-block  0
call    2 never executed
        -: 3319:    }
    #####: 3320:    if (value_param != nullptr) {
    %%%%%: 3320-block  0
branch  0 never executed
branch  1 never executed
    #####: 3321:      printf("%s = %s", kValueParamLabel, value_param);
    %%%%%: 3321-block  0
call    0 never executed
        -: 3322:    }
        -: 3323:  }
    #####: 3324:}
        -: 3325:
        -: 3326:// This class implements the TestEventListener interface.
        -: 3327://
        -: 3328:// Class PrettyUnitTestResultPrinter is copyable.
        -: 3329:class PrettyUnitTestResultPrinter : public TestEventListener {
        -: 3330: public:
function _ZN7testing8internal27PrettyUnitTestResultPrinterC2Ev called 1 returned 100% blocks executed 100%
        1: 3331:  PrettyUnitTestResultPrinter() {}
        1: 3331-block  0
call    0 returned 1
function _ZN7testing8internal27PrettyUnitTestResultPrinter13PrintTestNameEPKcS3_ called 24 returned 100% blocks executed 100%
       24: 3332:  static void PrintTestName(const char* test_suite, const char* test) {
       24: 3333:    printf("%s.%s", test_suite, test);
       24: 3333-block  0
call    0 returned 24
       24: 3334:  }
        -: 3335:
        -: 3336:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3337:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
        -: 3338:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3339:  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3340:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3341:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3342:  void OnTestCaseStart(const TestCase& test_case) override;
        -: 3343:#else
        -: 3344:  void OnTestSuiteStart(const TestSuite& test_suite) override;
        -: 3345:#endif  // OnTestCaseStart
        -: 3346:
        -: 3347:  void OnTestStart(const TestInfo& test_info) override;
        -: 3348:
        -: 3349:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3350:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3351:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3352:  void OnTestCaseEnd(const TestCase& test_case) override;
        -: 3353:#else
        -: 3354:  void OnTestSuiteEnd(const TestSuite& test_suite) override;
        -: 3355:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3356:
        -: 3357:  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3358:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3359:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3360:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3361:
        -: 3362: private:
        -: 3363:  static void PrintFailedTests(const UnitTest& unit_test);
        -: 3364:  static void PrintFailedTestSuites(const UnitTest& unit_test);
        -: 3365:  static void PrintSkippedTests(const UnitTest& unit_test);
        -: 3366:};
        -: 3367:
        -: 3368:  // Fired before each iteration of tests starts.
function _ZN7testing8internal27PrettyUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 62%
        1: 3369:void PrettyUnitTestResultPrinter::OnTestIterationStart(
        -: 3370:    const UnitTest& unit_test, int iteration) {
        1: 3371:  if (GTEST_FLAG(repeat) != 1)
        1: 3371-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3372:    printf("\nRepeating all tests (iteration %d) . . .\n\n", iteration + 1);
    %%%%%: 3372-block  0
call    0 never executed
        -: 3373:
        1: 3374:  const char* const filter = GTEST_FLAG(filter).c_str();
        1: 3374-block  0
call    0 returned 1
        -: 3375:
        -: 3376:  // Prints the filter if it's not *.  This reminds the user that some
        -: 3377:  // tests may be skipped.
        1: 3378:  if (!String::CStringEquals(filter, kUniversalFilter)) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 3379:    ColoredPrintf(GTestColor::kYellow, "Note: %s filter = %s\n", GTEST_NAME_,
    %%%%%: 3379-block  0
call    0 never executed
        -: 3380:                  filter);
        -: 3381:  }
        -: 3382:
        1: 3383:  if (internal::ShouldShard(kTestTotalShards, kTestShardIndex, false)) {
        1: 3383-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 3384:    const int32_t shard_index = Int32FromEnvOrDie(kTestShardIndex, -1);
    %%%%%: 3384-block  0
call    0 never executed
    #####: 3385:    ColoredPrintf(GTestColor::kYellow, "Note: This is test shard %d of %s.\n",
call    0 never executed
call    1 never executed
        -: 3386:                  static_cast<int>(shard_index) + 1,
        -: 3387:                  internal::posix::GetEnv(kTestTotalShards));
        -: 3388:  }
        -: 3389:
        1: 3390:  if (GTEST_FLAG(shuffle)) {
        1: 3390-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3391:    ColoredPrintf(GTestColor::kYellow,
    %%%%%: 3391-block  0
call    0 never executed
call    1 never executed
        -: 3392:                  "Note: Randomizing tests' orders with a seed of %d .\n",
        -: 3393:                  unit_test.random_seed());
        -: 3394:  }
        -: 3395:
        1: 3396:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3396-block  0
call    0 returned 1
        2: 3397:  printf("Running %s from %s.\n",
call    0 returned 1
        1: 3397-block  0
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        2: 3398:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3398-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3398-block  1
call    6 returned 1
    $$$$$: 3398-block  2
call    7 never executed
    $$$$$: 3398-block  3
        2: 3399:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
    $$$$$: 3399-block  0
call    3 never executed
        1: 3400:  fflush(stdout);
call    0 returned 1
        1: 3401:}
        -: 3402:
function _ZN7testing8internal27PrettyUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3403:void PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart(
        -: 3404:    const UnitTest& /*unit_test*/) {
        1: 3405:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3405-block  0
call    0 returned 1
        1: 3406:  printf("Global test environment set-up.\n");
call    0 returned 1
        1: 3407:  fflush(stdout);
call    0 returned 1
        1: 3408:}
        -: 3409:
        -: 3410:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 8 returned 100% blocks executed 76%
        8: 3411:void PrettyUnitTestResultPrinter::OnTestCaseStart(const TestCase& test_case) {
        -: 3412:  const std::string counts =
       16: 3413:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
        8: 3413-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8: 3413-block  1
call    3 returned 8
branch  4 taken 8 (fallthrough)
branch  5 taken 0 (throw)
        8: 3413-block  2
call    6 returned 8
    $$$$$: 3413-block  3
call    7 never executed
        8: 3414:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        8: 3414-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8: 3415:  printf("%s from %s", counts.c_str(), test_case.name());
        8: 3415-block  0
call    0 returned 8
call    1 returned 8
call    2 returned 8
branch  3 taken 8 (fallthrough)
branch  4 taken 0 (throw)
        8: 3416:  if (test_case.type_param() == nullptr) {
        8: 3416-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0
        8: 3417:    printf("\n");
        8: 3417-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        -: 3418:  } else {
    #####: 3419:    printf(", where %s = %s\n", kTypeParamLabel, test_case.type_param());
    %%%%%: 3419-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 3420:  }
        8: 3421:  fflush(stdout);
        8: 3421-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8: 3422:}
        -: 3423:#else
        -: 3424:void PrettyUnitTestResultPrinter::OnTestSuiteStart(
        -: 3425:    const TestSuite& test_suite) {
        -: 3426:  const std::string counts =
        -: 3427:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3428:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3429:  printf("%s from %s", counts.c_str(), test_suite.name());
        -: 3430:  if (test_suite.type_param() == nullptr) {
        -: 3431:    printf("\n");
        -: 3432:  } else {
        -: 3433:    printf(", where %s = %s\n", kTypeParamLabel, test_suite.type_param());
        -: 3434:  }
        -: 3435:  fflush(stdout);
        -: 3436:}
        -: 3437:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3438:
function _ZN7testing8internal27PrettyUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 12 returned 100% blocks executed 100%
       12: 3439:void PrettyUnitTestResultPrinter::OnTestStart(const TestInfo& test_info) {
       12: 3440:  ColoredPrintf(GTestColor::kGreen, "[ RUN      ] ");
       12: 3440-block  0
call    0 returned 12
       12: 3441:  PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 returned 12
call    1 returned 12
call    2 returned 12
       12: 3442:  printf("\n");
call    0 returned 12
       12: 3443:  fflush(stdout);
call    0 returned 12
       12: 3444:}
        -: 3445:
        -: 3446:// Called after an assertion failure.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3447:void PrettyUnitTestResultPrinter::OnTestPartResult(
        -: 3448:    const TestPartResult& result) {
    #####: 3449:  switch (result.type()) {
    %%%%%: 3449-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3450:    // If the test part succeeded, we don't need to do anything.
    #####: 3451:    case TestPartResult::kSuccess:
    #####: 3452:      return;
    %%%%%: 3452-block  0
    #####: 3453:    default:
        -: 3454:      // Print failure message from the assertion
        -: 3455:      // (e.g. expected this and got that).
    #####: 3456:      PrintTestPartResult(result);
    %%%%%: 3456-block  0
call    0 never executed
    #####: 3457:      fflush(stdout);
call    0 never executed
        -: 3458:  }
        -: 3459:}
        -: 3460:
function _ZN7testing8internal27PrettyUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 12 returned 100% blocks executed 68%
       12: 3461:void PrettyUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
       12: 3462:  if (test_info.result()->Passed()) {
       12: 3462-block  0
call    0 returned 12
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0
       12: 3463:    ColoredPrintf(GTestColor::kGreen, "[       OK ] ");
       12: 3463-block  0
call    0 returned 12
    #####: 3464:  } else if (test_info.result()->Skipped()) {
    %%%%%: 3464-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3465:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3465-block  0
call    0 never executed
        -: 3466:  } else {
    #####: 3467:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3467-block  0
call    0 never executed
        -: 3468:  }
       12: 3469:  PrintTestName(test_info.test_suite_name(), test_info.name());
       12: 3469-block  0
call    0 returned 12
call    1 returned 12
call    2 returned 12
       12: 3470:  if (test_info.result()->Failed())
call    0 returned 12
call    1 returned 12
branch  2 taken 0 (fallthrough)
branch  3 taken 12
    #####: 3471:    PrintFullTestCommentIfPresent(test_info);
    %%%%%: 3471-block  0
call    0 never executed
        -: 3472:
       12: 3473:  if (GTEST_FLAG(print_time)) {
       12: 3473-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 0
       12: 3474:    printf(" (%s ms)\n", internal::StreamableToString(
       12: 3474-block  0
call    0 returned 12
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0 (throw)
       12: 3474-block  1
call    4 returned 12
    $$$$$: 3474-block  2
call    5 never executed
    $$$$$: 3474-block  3
       24: 3475:           test_info.result()->elapsed_time()).c_str());
       12: 3475-block  0
call    0 returned 12
call    1 returned 12
call    2 returned 12
branch  3 taken 12 (fallthrough)
branch  4 taken 0 (throw)
        -: 3476:  } else {
    #####: 3477:    printf("\n");
    %%%%%: 3477-block  0
call    0 never executed
        -: 3478:  }
       12: 3479:  fflush(stdout);
       12: 3479-block  0
call    0 returned 12
       12: 3480:}
        -: 3481:
        -: 3482:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal27PrettyUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 8 returned 100% blocks executed 70%
        8: 3483:void PrettyUnitTestResultPrinter::OnTestCaseEnd(const TestCase& test_case) {
       8*: 3484:  if (!GTEST_FLAG(print_time)) return;
        8: 3484-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    %%%%%: 3484-block  1
        -: 3485:
        -: 3486:  const std::string counts =
       16: 3487:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
        8: 3487-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8: 3487-block  1
call    3 returned 8
branch  4 taken 8 (fallthrough)
branch  5 taken 0 (throw)
        8: 3487-block  2
call    6 returned 8
    $$$$$: 3487-block  3
call    7 never executed
        8: 3488:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        8: 3488-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8: 3489:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_case.name(),
        8: 3489-block  0
call    0 returned 8
call    1 returned 8
call    2 returned 8
call    3 returned 8
branch  4 taken 8 (fallthrough)
branch  5 taken 0 (throw)
       16: 3490:         internal::StreamableToString(test_case.elapsed_time()).c_str());
        8: 3490-block  0
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0 (throw)
        8: 3490-block  1
call    4 returned 8
    $$$$$: 3490-block  2
call    5 never executed
    $$$$$: 3490-block  3
    $$$$$: 3490-block  4
        8: 3491:  fflush(stdout);
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        -: 3492:}
        -: 3493:#else
        -: 3494:void PrettyUnitTestResultPrinter::OnTestSuiteEnd(const TestSuite& test_suite) {
        -: 3495:  if (!GTEST_FLAG(print_time)) return;
        -: 3496:
        -: 3497:  const std::string counts =
        -: 3498:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3499:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3500:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_suite.name(),
        -: 3501:         internal::StreamableToString(test_suite.elapsed_time()).c_str());
        -: 3502:  fflush(stdout);
        -: 3503:}
        -: 3504:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3505:
function _ZN7testing8internal27PrettyUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        1: 3506:void PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart(
        -: 3507:    const UnitTest& /*unit_test*/) {
        1: 3508:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3508-block  0
call    0 returned 1
        1: 3509:  printf("Global test environment tear-down\n");
call    0 returned 1
        1: 3510:  fflush(stdout);
call    0 returned 1
        1: 3511:}
        -: 3512:
        -: 3513:// Internal helper for printing the list of failed tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter16PrintFailedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3514:void PrettyUnitTestResultPrinter::PrintFailedTests(const UnitTest& unit_test) {
    #####: 3515:  const int failed_test_count = unit_test.failed_test_count();
    %%%%%: 3515-block  0
call    0 never executed
    #####: 3516:  ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
call    0 never executed
    #####: 3517:  printf("%s, listed below:\n", FormatTestCount(failed_test_count).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3517-block  0
call    5 never executed
    $$$$$: 3517-block  1
call    6 never executed
        -: 3518:
    #####: 3519:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3519-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3519-block  1
    #####: 3520:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3520-block  0
call    0 never executed
    #####: 3521:    if (!test_suite.should_run() || (test_suite.failed_test_count() == 0)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3521-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3521-block  1
    %%%%%: 3521-block  2
    %%%%%: 3521-block  3
branch  6 never executed
branch  7 never executed
    #####: 3522:      continue;
    %%%%%: 3522-block  0
        -: 3523:    }
    #####: 3524:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3524-block  0
    %%%%%: 3524-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3524-block  2
    #####: 3525:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3525-block  0
call    0 never executed
    #####: 3526:      if (!test_info.should_run() || !test_info.result()->Failed()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3526-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3526-block  1
    %%%%%: 3526-block  2
    %%%%%: 3526-block  3
branch  7 never executed
branch  8 never executed
    #####: 3527:        continue;
    %%%%%: 3527-block  0
        -: 3528:      }
    #####: 3529:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3529-block  0
call    0 never executed
    #####: 3530:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3531:      PrintFullTestCommentIfPresent(test_info);
call    0 never executed
    #####: 3532:      printf("\n");
call    0 never executed
        -: 3533:    }
        -: 3534:  }
    #####: 3535:  printf("\n%2d FAILED %s\n", failed_test_count,
    %%%%%: 3535-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3535-block  1
    %%%%%: 3535-block  2
    %%%%%: 3535-block  3
call    2 never executed
        -: 3536:         failed_test_count == 1 ? "TEST" : "TESTS");
    #####: 3537:}
        -: 3538:
        -: 3539:// Internal helper for printing the list of test suite failures not covered by
        -: 3540:// PrintFailedTests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter21PrintFailedTestSuitesERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3541:void PrettyUnitTestResultPrinter::PrintFailedTestSuites(
        -: 3542:    const UnitTest& unit_test) {
    #####: 3543:  int suite_failure_count = 0;
    #####: 3544:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3544-block  0
    %%%%%: 3544-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3544-block  2
    #####: 3545:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3545-block  0
call    0 never executed
    #####: 3546:    if (!test_suite.should_run()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3547:      continue;
    %%%%%: 3547-block  0
        -: 3548:    }
    #####: 3549:    if (test_suite.ad_hoc_test_result().Failed()) {
    %%%%%: 3549-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3550:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3550-block  0
call    0 never executed
    #####: 3551:      printf("%s: SetUpTestSuite or TearDownTestSuite\n", test_suite.name());
call    0 never executed
call    1 never executed
    #####: 3552:      ++suite_failure_count;
        -: 3553:    }
        -: 3554:  }
    #####: 3555:  if (suite_failure_count > 0) {
    %%%%%: 3555-block  0
branch  0 never executed
branch  1 never executed
    #####: 3556:    printf("\n%2d FAILED TEST %s\n", suite_failure_count,
    %%%%%: 3556-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3556-block  1
    %%%%%: 3556-block  2
    %%%%%: 3556-block  3
call    2 never executed
        -: 3557:           suite_failure_count == 1 ? "SUITE" : "SUITES");
        -: 3558:  }
    #####: 3559:}
        -: 3560:
        -: 3561:// Internal helper for printing the list of skipped tests.
function _ZN7testing8internal27PrettyUnitTestResultPrinter17PrintSkippedTestsERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3562:void PrettyUnitTestResultPrinter::PrintSkippedTests(const UnitTest& unit_test) {
    #####: 3563:  const int skipped_test_count = unit_test.skipped_test_count();
    %%%%%: 3563-block  0
call    0 never executed
    #####: 3564:  if (skipped_test_count == 0) {
branch  0 never executed
branch  1 never executed
    #####: 3565:    return;
    %%%%%: 3565-block  0
        -: 3566:  }
        -: 3567:
    #####: 3568:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3568-block  0
    %%%%%: 3568-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3568-block  2
    #####: 3569:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3569-block  0
call    0 never executed
    #####: 3570:    if (!test_suite.should_run() || (test_suite.skipped_test_count() == 0)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3570-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3570-block  1
    %%%%%: 3570-block  2
    %%%%%: 3570-block  3
branch  6 never executed
branch  7 never executed
    #####: 3571:      continue;
    %%%%%: 3571-block  0
        -: 3572:    }
    #####: 3573:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3573-block  0
    %%%%%: 3573-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3573-block  2
    #####: 3574:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3574-block  0
call    0 never executed
    #####: 3575:      if (!test_info.should_run() || !test_info.result()->Skipped()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3575-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3575-block  1
    %%%%%: 3575-block  2
    %%%%%: 3575-block  3
branch  7 never executed
branch  8 never executed
    #####: 3576:        continue;
    %%%%%: 3576-block  0
        -: 3577:      }
    #####: 3578:      ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3578-block  0
call    0 never executed
    #####: 3579:      printf("%s.%s", test_suite.name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3580:      printf("\n");
call    0 never executed
        -: 3581:    }
        -: 3582:  }
        -: 3583:}
        -: 3584:
function _ZN7testing8internal27PrettyUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 52%
        1: 3585:void PrettyUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3586:                                                     int /*iteration*/) {
        1: 3587:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3587-block  0
call    0 returned 1
        2: 3588:  printf("%s from %s ran.",
call    0 returned 1
        1: 3588-block  0
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        2: 3589:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 3589-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3589-block  1
call    6 returned 1
    $$$$$: 3589-block  2
call    7 never executed
    $$$$$: 3589-block  3
        2: 3590:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
    $$$$$: 3590-block  0
call    3 never executed
    $$$$$: 3590-block  1
call    4 never executed
        1: 3591:  if (GTEST_FLAG(print_time)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3592:    printf(" (%s ms total)",
        1: 3592-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        2: 3593:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
        1: 3593-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 3593-block  1
call    4 returned 1
    $$$$$: 3593-block  2
call    5 never executed
    $$$$$: 3593-block  3
    $$$$$: 3593-block  4
call    6 never executed
        -: 3594:  }
        1: 3595:  printf("\n");
        1: 3595-block  0
call    0 returned 1
        1: 3596:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 returned 1
        1: 3597:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 3597-block  0
call    6 returned 1
    $$$$$: 3597-block  1
call    7 never executed
    $$$$$: 3597-block  2
call    8 never executed
        -: 3598:
        1: 3599:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 returned 1
        1: 3600:  if (skipped_test_count > 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 3601:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3601-block  0
call    0 never executed
    #####: 3602:    printf("%s, listed below:\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3602-block  0
call    5 never executed
    $$$$$: 3602-block  1
call    6 never executed
    #####: 3603:    PrintSkippedTests(unit_test);
call    0 never executed
        -: 3604:  }
        -: 3605:
        1: 3606:  if (!unit_test.Passed()) {
        1: 3606-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 3607:    PrintFailedTests(unit_test);
    %%%%%: 3607-block  0
call    0 never executed
    #####: 3608:    PrintFailedTestSuites(unit_test);
call    0 never executed
        -: 3609:  }
        -: 3610:
        1: 3611:  int num_disabled = unit_test.reportable_disabled_test_count();
        1: 3611-block  0
call    0 returned 1
       1*: 3612:  if (num_disabled && !GTEST_FLAG(also_run_disabled_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 3612-block  0
branch  2 never executed
branch  3 never executed
    #####: 3613:    if (unit_test.Passed()) {
    %%%%%: 3613-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3614:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3614-block  0
call    0 never executed
        -: 3615:    }
    #####: 3616:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3616-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3616-block  1
    %%%%%: 3616-block  2
    %%%%%: 3616-block  3
call    2 never executed
        -: 3617:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3618:  }
        -: 3619:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
        1: 3620:  fflush(stdout);
        1: 3620-block  0
call    0 returned 1
        1: 3621:}
        -: 3622:
        -: 3623:// End PrettyUnitTestResultPrinter
        -: 3624:
        -: 3625:// This class implements the TestEventListener interface.
        -: 3626://
        -: 3627:// Class BriefUnitTestResultPrinter is copyable.
        -: 3628:class BriefUnitTestResultPrinter : public TestEventListener {
        -: 3629: public:
function _ZN7testing8internal26BriefUnitTestResultPrinterC2Ev called 0 returned 0% blocks executed 0%
    #####: 3630:  BriefUnitTestResultPrinter() {}
    %%%%%: 3630-block  0
call    0 never executed
function _ZN7testing8internal26BriefUnitTestResultPrinter13PrintTestNameEPKcS3_ called 0 returned 0% blocks executed 0%
    #####: 3631:  static void PrintTestName(const char* test_suite, const char* test) {
    #####: 3632:    printf("%s.%s", test_suite, test);
    %%%%%: 3632-block  0
call    0 never executed
    #####: 3633:  }
        -: 3634:
        -: 3635:  // The following methods override what's in the TestEventListener class.
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestProgramStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3636:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter20OnTestIterationStartERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3637:  void OnTestIterationStart(const UnitTest& /*unit_test*/,
    #####: 3638:                            int /*iteration*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3639:  void OnEnvironmentsSetUpStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3640:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3641:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter15OnTestCaseStartERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3642:  void OnTestCaseStart(const TestCase& /*test_case*/) override {}
        -: 3643:#else
        -: 3644:  void OnTestSuiteStart(const TestSuite& /*test_suite*/) override {}
        -: 3645:#endif  // OnTestCaseStart
        -: 3646:
function _ZN7testing8internal26BriefUnitTestResultPrinter11OnTestStartERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3647:  void OnTestStart(const TestInfo& /*test_info*/) override {}
        -: 3648:
        -: 3649:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3650:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3651:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal26BriefUnitTestResultPrinter13OnTestCaseEndERKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 3652:  void OnTestCaseEnd(const TestCase& /*test_case*/) override {}
        -: 3653:#else
        -: 3654:  void OnTestSuiteEnd(const TestSuite& /*test_suite*/) override {}
        -: 3655:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3656:
function _ZN7testing8internal26BriefUnitTestResultPrinter27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3657:  void OnEnvironmentsTearDownStart(const UnitTest& /*unit_test*/) override {}
function _ZN7testing8internal26BriefUnitTestResultPrinter25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3658:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3659:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestProgramEndERKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 3660:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3661:};
        -: 3662:
        -: 3663:// Called after an assertion failure.
function _ZN7testing8internal26BriefUnitTestResultPrinter16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3664:void BriefUnitTestResultPrinter::OnTestPartResult(
        -: 3665:    const TestPartResult& result) {
    #####: 3666:  switch (result.type()) {
    %%%%%: 3666-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3667:    // If the test part succeeded, we don't need to do anything.
    #####: 3668:    case TestPartResult::kSuccess:
    #####: 3669:      return;
    %%%%%: 3669-block  0
    #####: 3670:    default:
        -: 3671:      // Print failure message from the assertion
        -: 3672:      // (e.g. expected this and got that).
    #####: 3673:      PrintTestPartResult(result);
    %%%%%: 3673-block  0
call    0 never executed
    #####: 3674:      fflush(stdout);
call    0 never executed
        -: 3675:  }
        -: 3676:}
        -: 3677:
function _ZN7testing8internal26BriefUnitTestResultPrinter9OnTestEndERKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 3678:void BriefUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
    #####: 3679:  if (test_info.result()->Failed()) {
    %%%%%: 3679-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3680:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3680-block  0
call    0 never executed
    #####: 3681:    PrintTestName(test_info.test_suite_name(), test_info.name());
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 3682:    PrintFullTestCommentIfPresent(test_info);
call    0 never executed
        -: 3683:
    #####: 3684:    if (GTEST_FLAG(print_time)) {
branch  0 never executed
branch  1 never executed
    #####: 3685:      printf(" (%s ms)\n",
    %%%%%: 3685-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3686:             internal::StreamableToString(test_info.result()->elapsed_time())
    %%%%%: 3686-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3686-block  1
call    5 never executed
    $$$$$: 3686-block  2
call    6 never executed
    $$$$$: 3686-block  3
        -: 3687:                 .c_str());
        -: 3688:    } else {
    #####: 3689:      printf("\n");
    %%%%%: 3689-block  0
call    0 never executed
        -: 3690:    }
    #####: 3691:    fflush(stdout);
    %%%%%: 3691-block  0
call    0 never executed
        -: 3692:  }
    #####: 3693:}
    %%%%%: 3693-block  0
        -: 3694:
function _ZN7testing8internal26BriefUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3695:void BriefUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3696:                                                    int /*iteration*/) {
    #####: 3697:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
    %%%%%: 3697-block  0
call    0 never executed
    #####: 3698:  printf("%s from %s ran.",
call    0 never executed
    %%%%%: 3698-block  0
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####: 3699:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3699-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3699-block  1
call    6 never executed
    $$$$$: 3699-block  2
call    7 never executed
    $$$$$: 3699-block  3
    #####: 3700:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$: 3700-block  0
call    3 never executed
    $$$$$: 3700-block  1
call    4 never executed
    #####: 3701:  if (GTEST_FLAG(print_time)) {
branch  0 never executed
branch  1 never executed
    #####: 3702:    printf(" (%s ms total)",
    %%%%%: 3702-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3703:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
    %%%%%: 3703-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 3703-block  1
call    4 never executed
    $$$$$: 3703-block  2
call    5 never executed
    $$$$$: 3703-block  3
    $$$$$: 3703-block  4
call    6 never executed
        -: 3704:  }
    #####: 3705:  printf("\n");
    %%%%%: 3705-block  0
call    0 never executed
    #####: 3706:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
call    0 never executed
    #####: 3707:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 3707-block  0
call    6 never executed
    $$$$$: 3707-block  1
call    7 never executed
    $$$$$: 3707-block  2
call    8 never executed
        -: 3708:
    #####: 3709:  const int skipped_test_count = unit_test.skipped_test_count();
call    0 never executed
    #####: 3710:  if (skipped_test_count > 0) {
branch  0 never executed
branch  1 never executed
    #####: 3711:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3711-block  0
call    0 never executed
    #####: 3712:    printf("%s.\n", FormatTestCount(skipped_test_count).c_str());
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3712-block  0
call    5 never executed
    $$$$$: 3712-block  1
call    6 never executed
        -: 3713:  }
        -: 3714:
    #####: 3715:  int num_disabled = unit_test.reportable_disabled_test_count();
    %%%%%: 3715-block  0
call    0 never executed
    #####: 3716:  if (num_disabled && !GTEST_FLAG(also_run_disabled_tests)) {
branch  0 never executed
branch  1 never executed
    %%%%%: 3716-block  0
branch  2 never executed
branch  3 never executed
    #####: 3717:    if (unit_test.Passed()) {
    %%%%%: 3717-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3718:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3718-block  0
call    0 never executed
        -: 3719:    }
    #####: 3720:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3720-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3720-block  1
    %%%%%: 3720-block  2
    %%%%%: 3720-block  3
call    2 never executed
        -: 3721:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3722:  }
        -: 3723:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
    #####: 3724:  fflush(stdout);
    %%%%%: 3724-block  0
call    0 never executed
    #####: 3725:}
        -: 3726:
        -: 3727:// End BriefUnitTestResultPrinter
        -: 3728:
        -: 3729:// class TestEventRepeater
        -: 3730://
        -: 3731:// This class forwards events to other event listeners.
        -: 3732:class TestEventRepeater : public TestEventListener {
        -: 3733: public:
function _ZN7testing8internal17TestEventRepeaterC2Ev called 1 returned 100% blocks executed 100%
        1: 3734:  TestEventRepeater() : forwarding_enabled_(true) {}
        1: 3734-block  0
call    0 returned 1
call    1 returned 1
        -: 3735:  ~TestEventRepeater() override;
        -: 3736:  void Append(TestEventListener *listener);
        -: 3737:  TestEventListener* Release(TestEventListener* listener);
        -: 3738:
        -: 3739:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3740:  // in death test child processes.
function _ZNK7testing8internal17TestEventRepeater18forwarding_enabledEv called 0 returned 0% blocks executed 0%
    #####: 3741:  bool forwarding_enabled() const { return forwarding_enabled_; }
    %%%%%: 3741-block  0
function _ZN7testing8internal17TestEventRepeater22set_forwarding_enabledEb called 0 returned 0% blocks executed 0%
    #####: 3742:  void set_forwarding_enabled(bool enable) { forwarding_enabled_ = enable; }
        -: 3743:
        -: 3744:  void OnTestProgramStart(const UnitTest& unit_test) override;
        -: 3745:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3746:  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
        -: 3747:  void OnEnvironmentsSetUpEnd(const UnitTest& unit_test) override;
        -: 3748://  Legacy API is deprecated but still available
        -: 3749:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3750:  void OnTestCaseStart(const TestSuite& parameter) override;
        -: 3751:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3752:  void OnTestSuiteStart(const TestSuite& parameter) override;
        -: 3753:  void OnTestStart(const TestInfo& test_info) override;
        -: 3754:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3755:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3756://  Legacy API is deprecated but still available
        -: 3757:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3758:  void OnTestCaseEnd(const TestCase& parameter) override;
        -: 3759:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3760:  void OnTestSuiteEnd(const TestSuite& parameter) override;
        -: 3761:  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
        -: 3762:  void OnEnvironmentsTearDownEnd(const UnitTest& unit_test) override;
        -: 3763:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3764:  void OnTestProgramEnd(const UnitTest& unit_test) override;
        -: 3765:
        -: 3766: private:
        -: 3767:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3768:  // in death test child processes.
        -: 3769:  bool forwarding_enabled_;
        -: 3770:  // The list of listeners that receive events.
        -: 3771:  std::vector<TestEventListener*> listeners_;
        -: 3772:
        -: 3773:  GTEST_DISALLOW_COPY_AND_ASSIGN_(TestEventRepeater);
        -: 3774:};
        -: 3775:
        2: 3776:TestEventRepeater::~TestEventRepeater() {
        1: 3777:  ForEach(listeners_, Delete<TestEventListener>);
        2: 3778:}
------------------
_ZN7testing8internal17TestEventRepeaterD0Ev:
function _ZN7testing8internal17TestEventRepeaterD0Ev called 1 returned 100% blocks executed 100%
        1: 3776:TestEventRepeater::~TestEventRepeater() {
        -: 3777:  ForEach(listeners_, Delete<TestEventListener>);
        1: 3778:}
        1: 3778-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN7testing8internal17TestEventRepeaterD2Ev:
function _ZN7testing8internal17TestEventRepeaterD2Ev called 1 returned 100% blocks executed 100%
        1: 3776:TestEventRepeater::~TestEventRepeater() {
call    0 returned 1
call    1 returned 1
        1: 3777:  ForEach(listeners_, Delete<TestEventListener>);
        1: 3777-block  0
call    0 returned 1
        1: 3778:}
------------------
        -: 3779:
function _ZN7testing8internal17TestEventRepeater6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 3780:void TestEventRepeater::Append(TestEventListener *listener) {
        1: 3781:  listeners_.push_back(listener);
        1: 3781-block  0
call    0 returned 1
        1: 3782:}
        -: 3783:
function _ZN7testing8internal17TestEventRepeater7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 38%
        1: 3784:TestEventListener* TestEventRepeater::Release(TestEventListener *listener) {
       1*: 3785:  for (size_t i = 0; i < listeners_.size(); ++i) {
        1: 3785-block  0
        1: 3785-block  1
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 3785-block  2
    #####: 3786:    if (listeners_[i] == listener) {
    %%%%%: 3786-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3787:      listeners_.erase(listeners_.begin() + static_cast<int>(i));
    %%%%%: 3787-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 3787-block  1
    $$$$$: 3787-block  2
    #####: 3788:      return listener;
    %%%%%: 3788-block  0
        -: 3789:    }
        -: 3790:  }
        -: 3791:
        1: 3792:  return nullptr;
        1: 3792-block  0
        -: 3793:}
        -: 3794:
        -: 3795:// Since most methods are very similar, use macros to reduce boilerplate.
        -: 3796:// This defines a member that forwards the call to all listeners.
        -: 3797:#define GTEST_REPEATER_METHOD_(Name, Type) \
        -: 3798:void TestEventRepeater::Name(const Type& parameter) { \
        -: 3799:  if (forwarding_enabled_) { \
        -: 3800:    for (size_t i = 0; i < listeners_.size(); i++) { \
        -: 3801:      listeners_[i]->Name(parameter); \
        -: 3802:    } \
        -: 3803:  } \
        -: 3804:}
        -: 3805:// This defines a member that forwards the call to all listeners in reverse
        -: 3806:// order.
        -: 3807:#define GTEST_REVERSE_REPEATER_METHOD_(Name, Type)      \
        -: 3808:  void TestEventRepeater::Name(const Type& parameter) { \
        -: 3809:    if (forwarding_enabled_) {                          \
        -: 3810:      for (size_t i = listeners_.size(); i != 0; i--) { \
        -: 3811:        listeners_[i - 1]->Name(parameter);             \
        -: 3812:      }                                                 \
        -: 3813:    }                                                   \
        -: 3814:  }
        -: 3815:
function _ZN7testing8internal17TestEventRepeater18OnTestProgramStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3816:GTEST_REPEATER_METHOD_(OnTestProgramStart, UnitTest)
        1: 3816-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3816-block  1
        2: 3816-block  2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3816-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater24OnEnvironmentsSetUpStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3817:GTEST_REPEATER_METHOD_(OnEnvironmentsSetUpStart, UnitTest)
        1: 3817-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3817-block  1
        2: 3817-block  2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3817-block  3
call    5 returned 1
call    6 returned 1
        -: 3818://  Legacy API is deprecated but still available
        -: 3819:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater15OnTestCaseStartERKNS_9TestSuiteE called 8 returned 100% blocks executed 100%
       16: 3820:GTEST_REPEATER_METHOD_(OnTestCaseStart, TestSuite)
        8: 3820-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        8: 3820-block  1
       16: 3820-block  2
call    2 returned 16
branch  3 taken 8 (fallthrough)
branch  4 taken 8
        8: 3820-block  3
call    5 returned 8
call    6 returned 8
        -: 3821:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater16OnTestSuiteStartERKNS_9TestSuiteE called 8 returned 100% blocks executed 100%
       16: 3822:GTEST_REPEATER_METHOD_(OnTestSuiteStart, TestSuite)
        8: 3822-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        8: 3822-block  1
       16: 3822-block  2
call    2 returned 16
branch  3 taken 8 (fallthrough)
branch  4 taken 8
        8: 3822-block  3
call    5 returned 8
call    6 returned 8
function _ZN7testing8internal17TestEventRepeater11OnTestStartERKNS_8TestInfoE called 12 returned 100% blocks executed 100%
       24: 3823:GTEST_REPEATER_METHOD_(OnTestStart, TestInfo)
       12: 3823-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 0
       12: 3823-block  1
       24: 3823-block  2
call    2 returned 24
branch  3 taken 12 (fallthrough)
branch  4 taken 12
       12: 3823-block  3
call    5 returned 12
call    6 returned 12
function _ZN7testing8internal17TestEventRepeater16OnTestPartResultERKNS_14TestPartResultE called 0 returned 0% blocks executed 0%
    #####: 3824:GTEST_REPEATER_METHOD_(OnTestPartResult, TestPartResult)
    %%%%%: 3824-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3824-block  1
    %%%%%: 3824-block  2
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3824-block  3
call    5 never executed
call    6 never executed
function _ZN7testing8internal17TestEventRepeater27OnEnvironmentsTearDownStartERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3825:GTEST_REPEATER_METHOD_(OnEnvironmentsTearDownStart, UnitTest)
        1: 3825-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3825-block  1
        2: 3825-block  2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3825-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater22OnEnvironmentsSetUpEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3826:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsSetUpEnd, UnitTest)
        1: 3826-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3826-block  1
call    2 returned 1
        2: 3826-block  2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3826-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater25OnEnvironmentsTearDownEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3827:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsTearDownEnd, UnitTest)
        1: 3827-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3827-block  1
call    2 returned 1
        2: 3827-block  2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3827-block  3
call    5 returned 1
call    6 returned 1
function _ZN7testing8internal17TestEventRepeater9OnTestEndERKNS_8TestInfoE called 12 returned 100% blocks executed 100%
       24: 3828:GTEST_REVERSE_REPEATER_METHOD_(OnTestEnd, TestInfo)
       12: 3828-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 0
       12: 3828-block  1
call    2 returned 12
       24: 3828-block  2
branch  3 taken 12 (fallthrough)
branch  4 taken 12
       12: 3828-block  3
call    5 returned 12
call    6 returned 12
        -: 3829://  Legacy API is deprecated but still available
        -: 3830:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater13OnTestCaseEndERKNS_9TestSuiteE called 8 returned 100% blocks executed 100%
       16: 3831:GTEST_REVERSE_REPEATER_METHOD_(OnTestCaseEnd, TestSuite)
        8: 3831-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        8: 3831-block  1
call    2 returned 8
       16: 3831-block  2
branch  3 taken 8 (fallthrough)
branch  4 taken 8
        8: 3831-block  3
call    5 returned 8
call    6 returned 8
        -: 3832:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZN7testing8internal17TestEventRepeater14OnTestSuiteEndERKNS_9TestSuiteE called 8 returned 100% blocks executed 100%
       16: 3833:GTEST_REVERSE_REPEATER_METHOD_(OnTestSuiteEnd, TestSuite)
        8: 3833-block  0
branch  0 taken 8 (fallthrough)
branch  1 taken 0
        8: 3833-block  1
call    2 returned 8
       16: 3833-block  2
branch  3 taken 8 (fallthrough)
branch  4 taken 8
        8: 3833-block  3
call    5 returned 8
call    6 returned 8
function _ZN7testing8internal17TestEventRepeater16OnTestProgramEndERKNS_8UnitTestE called 1 returned 100% blocks executed 100%
        2: 3834:GTEST_REVERSE_REPEATER_METHOD_(OnTestProgramEnd, UnitTest)
        1: 3834-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 3834-block  1
call    2 returned 1
        2: 3834-block  2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1: 3834-block  3
call    5 returned 1
call    6 returned 1
        -: 3835:
        -: 3836:#undef GTEST_REPEATER_METHOD_
        -: 3837:#undef GTEST_REVERSE_REPEATER_METHOD_
        -: 3838:
function _ZN7testing8internal17TestEventRepeater20OnTestIterationStartERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3839:void TestEventRepeater::OnTestIterationStart(const UnitTest& unit_test,
        -: 3840:                                             int iteration) {
        1: 3841:  if (forwarding_enabled_) {
        1: 3841-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3842:    for (size_t i = 0; i < listeners_.size(); i++) {
        1: 3842-block  0
        2: 3842-block  1
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1: 3843:      listeners_[i]->OnTestIterationStart(unit_test, iteration);
        1: 3843-block  0
call    0 returned 1
call    1 returned 1
        -: 3844:    }
        -: 3845:  }
        1: 3846:}
        -: 3847:
function _ZN7testing8internal17TestEventRepeater18OnTestIterationEndERKNS_8UnitTestEi called 1 returned 100% blocks executed 100%
        1: 3848:void TestEventRepeater::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3849:                                           int iteration) {
        1: 3850:  if (forwarding_enabled_) {
        1: 3850-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2: 3851:    for (size_t i = listeners_.size(); i > 0; i--) {
        1: 3851-block  0
call    0 returned 1
        2: 3851-block  1
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1: 3852:      listeners_[i - 1]->OnTestIterationEnd(unit_test, iteration);
        1: 3852-block  0
call    0 returned 1
call    1 returned 1
        -: 3853:    }
        -: 3854:  }
        1: 3855:}
        -: 3856:
        -: 3857:// End TestEventRepeater
        -: 3858:
        -: 3859:// This class generates an XML output file.
        -: 3860:class XmlUnitTestResultPrinter : public EmptyTestEventListener {
        -: 3861: public:
        -: 3862:  explicit XmlUnitTestResultPrinter(const char* output_file);
        -: 3863:
        -: 3864:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3865:  void ListTestsMatchingFilter(const std::vector<TestSuite*>& test_suites);
        -: 3866:
        -: 3867:  // Prints an XML summary of all unit tests.
        -: 3868:  static void PrintXmlTestsList(std::ostream* stream,
        -: 3869:                                const std::vector<TestSuite*>& test_suites);
        -: 3870:
        -: 3871: private:
        -: 3872:  // Is c a whitespace character that is normalized to a space character
        -: 3873:  // when it appears in an XML attribute value?
function _ZN7testing8internal24XmlUnitTestResultPrinter24IsNormalizableWhitespaceEc called 0 returned 0% blocks executed 0%
    #####: 3874:  static bool IsNormalizableWhitespace(char c) {
    #####: 3875:    return c == 0x9 || c == 0xA || c == 0xD;
    %%%%%: 3875-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 3875-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 3875-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 3875-block  3
    %%%%%: 3875-block  4
    %%%%%: 3875-block  5
        -: 3876:  }
        -: 3877:
        -: 3878:  // May c appear in a well-formed XML document?
function _ZN7testing8internal24XmlUnitTestResultPrinter19IsValidXmlCharacterEc called 0 returned 0% blocks executed 0%
    #####: 3879:  static bool IsValidXmlCharacter(char c) {
    #####: 3880:    return IsNormalizableWhitespace(c) || c >= 0x20;
    %%%%%: 3880-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3880-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 3880-block  2
    %%%%%: 3880-block  3
    %%%%%: 3880-block  4
        -: 3881:  }
        -: 3882:
        -: 3883:  // Returns an XML-escaped copy of the input string str.  If
        -: 3884:  // is_attribute is true, the text is meant to appear as an attribute
        -: 3885:  // value, and normalizable whitespace is preserved by replacing it
        -: 3886:  // with character references.
        -: 3887:  static std::string EscapeXml(const std::string& str, bool is_attribute);
        -: 3888:
        -: 3889:  // Returns the given string with all characters invalid in XML removed.
        -: 3890:  static std::string RemoveInvalidXmlCharacters(const std::string& str);
        -: 3891:
        -: 3892:  // Convenience wrapper around EscapeXml when str is an attribute value.
function _ZN7testing8internal24XmlUnitTestResultPrinter18EscapeXmlAttributeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 3893:  static std::string EscapeXmlAttribute(const std::string& str) {
    #####: 3894:    return EscapeXml(str, true);
    %%%%%: 3894-block  0
call    0 never executed
        -: 3895:  }
        -: 3896:
        -: 3897:  // Convenience wrapper around EscapeXml when str is not an attribute value.
        -: 3898:  static std::string EscapeXmlText(const char* str) {
        -: 3899:    return EscapeXml(str, false);
        -: 3900:  }
        -: 3901:
        -: 3902:  // Verifies that the given attribute belongs to the given element and
        -: 3903:  // streams the attribute as XML.
        -: 3904:  static void OutputXmlAttribute(std::ostream* stream,
        -: 3905:                                 const std::string& element_name,
        -: 3906:                                 const std::string& name,
        -: 3907:                                 const std::string& value);
        -: 3908:
        -: 3909:  // Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
        -: 3910:  static void OutputXmlCDataSection(::std::ostream* stream, const char* data);
        -: 3911:
        -: 3912:  // Streams an XML representation of a TestInfo object.
        -: 3913:  static void OutputXmlTestInfo(::std::ostream* stream,
        -: 3914:                                const char* test_suite_name,
        -: 3915:                                const TestInfo& test_info);
        -: 3916:
        -: 3917:  // Prints an XML representation of a TestSuite object
        -: 3918:  static void PrintXmlTestSuite(::std::ostream* stream,
        -: 3919:                                const TestSuite& test_suite);
        -: 3920:
        -: 3921:  // Prints an XML summary of unit_test to output stream out.
        -: 3922:  static void PrintXmlUnitTest(::std::ostream* stream,
        -: 3923:                               const UnitTest& unit_test);
        -: 3924:
        -: 3925:  // Produces a string representing the test properties in a result as space
        -: 3926:  // delimited XML attributes based on the property key="value" pairs.
        -: 3927:  // When the std::string is not empty, it includes a space at the beginning,
        -: 3928:  // to delimit this attribute from prior attributes.
        -: 3929:  static std::string TestPropertiesAsXmlAttributes(const TestResult& result);
        -: 3930:
        -: 3931:  // Streams an XML representation of the test properties of a TestResult
        -: 3932:  // object.
        -: 3933:  static void OutputXmlTestProperties(std::ostream* stream,
        -: 3934:                                      const TestResult& result);
        -: 3935:
        -: 3936:  // The output file.
        -: 3937:  const std::string output_file_;
        -: 3938:
        -: 3939:  GTEST_DISALLOW_COPY_AND_ASSIGN_(XmlUnitTestResultPrinter);
        -: 3940:};
        -: 3941:
        -: 3942:// Creates a new XmlUnitTestResultPrinter.
function _ZN7testing8internal24XmlUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 3943:XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(const char* output_file)
    #####: 3944:    : output_file_(output_file) {
    %%%%%: 3944-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 3944-block  1
call    5 never executed
    $$$$$: 3944-block  2
call    6 never executed
    $$$$$: 3944-block  3
    $$$$$: 3944-block  4
call    7 never executed
    $$$$$: 3944-block  5
call    8 never executed
    #####: 3945:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3946:    GTEST_LOG_(FATAL) << "XML output file may not be null";
    %%%%%: 3946-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3946-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3946-block  2
call    7 never executed
    $$$$$: 3946-block  3
call    8 never executed
    $$$$$: 3946-block  4
        -: 3947:  }
    #####: 3948:}
    %%%%%: 3948-block  0
        -: 3949:
        -: 3950:// Called after the unit test ends.
function _ZN7testing8internal24XmlUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 3951:void XmlUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3952:                                                  int /*iteration*/) {
    #####: 3953:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 3953-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3954:  std::stringstream stream;
    %%%%%: 3954-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3954-block  1
call    3 never executed
    $$$$$: 3954-block  2
call    4 never executed
    #####: 3955:  PrintXmlUnitTest(&stream, unit_test);
    %%%%%: 3955-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3956:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 3956-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3956-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3956-block  2
call    7 never executed
    $$$$$: 3956-block  3
call    8 never executed
    $$$$$: 3956-block  4
    #####: 3957:  fclose(xmlout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3958:}
        -: 3959:
function _ZN7testing8internal24XmlUnitTestResultPrinter23ListTestsMatchingFilterERKSt6vectorIPNS_9TestSuiteESaIS4_EE called 0 returned 0% blocks executed 0%
    #####: 3960:void XmlUnitTestResultPrinter::ListTestsMatchingFilter(
        -: 3961:    const std::vector<TestSuite*>& test_suites) {
    #####: 3962:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 3962-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3963:  std::stringstream stream;
    %%%%%: 3963-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3963-block  1
call    3 never executed
    $$$$$: 3963-block  2
call    4 never executed
    #####: 3964:  PrintXmlTestsList(&stream, test_suites);
    %%%%%: 3964-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3965:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 3965-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3965-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 3965-block  2
call    7 never executed
    $$$$$: 3965-block  3
call    8 never executed
    $$$$$: 3965-block  4
    #####: 3966:  fclose(xmlout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3967:}
        -: 3968:
        -: 3969:// Returns an XML-escaped copy of the input string str.  If is_attribute
        -: 3970:// is true, the text is meant to appear as an attribute value, and
        -: 3971:// normalizable whitespace is preserved by replacing it with character
        -: 3972:// references.
        -: 3973://
        -: 3974:// Invalid XML characters in str, if any, are stripped from the output.
        -: 3975:// It is expected that most, if not all, of the text processed by this
        -: 3976:// module will consist of ordinary English text.
        -: 3977:// If this module is ever modified to produce version 1.1 XML output,
        -: 3978:// most invalid characters can be retained using character references.
function _ZN7testing8internal24XmlUnitTestResultPrinter9EscapeXmlERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb called 0 returned 0% blocks executed 0%
    #####: 3979:std::string XmlUnitTestResultPrinter::EscapeXml(
        -: 3980:    const std::string& str, bool is_attribute) {
    #####: 3981:  Message m;
    %%%%%: 3981-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3981-block  1
call    3 never executed
    $$$$$: 3981-block  2
call    4 never executed
        -: 3982:
    #####: 3983:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 3983-block  0
    %%%%%: 3983-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3983-block  2
    #####: 3984:    const char ch = str[i];
    %%%%%: 3984-block  0
call    0 never executed
    #####: 3985:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3986:      case '<':
    #####: 3987:        m << "&lt;";
    %%%%%: 3987-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3988:        break;
    %%%%%: 3988-block  0
    #####: 3989:      case '>':
    #####: 3990:        m << "&gt;";
    %%%%%: 3990-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3991:        break;
    %%%%%: 3991-block  0
    #####: 3992:      case '&':
    #####: 3993:        m << "&amp;";
    %%%%%: 3993-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3994:        break;
    %%%%%: 3994-block  0
    #####: 3995:      case '\'':
    #####: 3996:        if (is_attribute)
    %%%%%: 3996-block  0
branch  0 never executed
branch  1 never executed
    #####: 3997:          m << "&apos;";
    %%%%%: 3997-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3998:        else
    #####: 3999:          m << '\'';
    %%%%%: 3999-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 3999-block  1
    $$$$$: 3999-block  2
    #####: 4000:        break;
    %%%%%: 4000-block  0
    #####: 4001:      case '"':
    #####: 4002:        if (is_attribute)
    %%%%%: 4002-block  0
branch  0 never executed
branch  1 never executed
    #####: 4003:          m << "&quot;";
    %%%%%: 4003-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4004:        else
    #####: 4005:          m << '"';
    %%%%%: 4005-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4005-block  1
    $$$$$: 4005-block  2
    #####: 4006:        break;
    %%%%%: 4006-block  0
    #####: 4007:      default:
    #####: 4008:        if (IsValidXmlCharacter(ch)) {
    %%%%%: 4008-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4009:          if (is_attribute && IsNormalizableWhitespace(ch))
    %%%%%: 4009-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4009-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4009-block  2
    %%%%%: 4009-block  3
    %%%%%: 4009-block  4
branch  5 never executed
branch  6 never executed
    #####: 4010:            m << "&#x" << String::FormatByte(static_cast<unsigned char>(ch))
    %%%%%: 4010-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4010-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4010-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4010-block  3
call    9 never executed
    $$$$$: 4010-block  4
call   10 never executed
    $$$$$: 4010-block  5
    #####: 4011:              << ";";
    %%%%%: 4011-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4012:          else
    #####: 4013:            m << ch;
    %%%%%: 4013-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4014:        }
    #####: 4015:        break;
    %%%%%: 4015-block  0
        -: 4016:    }
        -: 4017:  }
        -: 4018:
    #####: 4019:  return m.GetString();
    %%%%%: 4019-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4019-block  1
        -: 4020:}
        -: 4021:
        -: 4022:// Returns the given string with all characters invalid in XML removed.
        -: 4023:// Currently invalid characters are dropped from the string. An
        -: 4024:// alternative is to replace them with certain characters such as . or ?.
function _ZN7testing8internal24XmlUnitTestResultPrinter26RemoveInvalidXmlCharactersERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4025:std::string XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters(
        -: 4026:    const std::string& str) {
    #####: 4027:  std::string output;
    %%%%%: 4027-block  0
call    0 never executed
    #####: 4028:  output.reserve(str.size());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4029:  for (std::string::const_iterator it = str.begin(); it != str.end(); ++it)
    %%%%%: 4029-block  0
call    0 never executed
    %%%%%: 4029-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4029-block  2
call    5 never executed
    #####: 4030:    if (IsValidXmlCharacter(*it))
    %%%%%: 4030-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4031:      output.push_back(*it);
    %%%%%: 4031-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4032:
    #####: 4033:  return output;
    %%%%%: 4033-block  0
    %%%%%: 4033-block  1
        -: 4034:}
        -: 4035:
        -: 4036:// The following routines generate an XML representation of a UnitTest
        -: 4037:// object.
        -: 4038:// GOOGLETEST_CM0009 DO NOT DELETE
        -: 4039://
        -: 4040:// This is how Google Test concepts map to the DTD:
        -: 4041://
        -: 4042:// <testsuites name="AllTests">        <-- corresponds to a UnitTest object
        -: 4043://   <testsuite name="testcase-name">  <-- corresponds to a TestSuite object
        -: 4044://     <testcase name="test-name">     <-- corresponds to a TestInfo object
        -: 4045://       <failure message="...">...</failure>
        -: 4046://       <failure message="...">...</failure>
        -: 4047://       <failure message="...">...</failure>
        -: 4048://                                     <-- individual assertion failures
        -: 4049://     </testcase>
        -: 4050://   </testsuite>
        -: 4051:// </testsuites>
        -: 4052:
        -: 4053:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internal27FormatTimeInMillisAsSecondsB5cxx11El called 0 returned 0% blocks executed 0%
    #####: 4054:std::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {
    #####: 4055:  ::std::stringstream ss;
    %%%%%: 4055-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4055-block  1
call    3 never executed
    $$$$$: 4055-block  2
call    4 never executed
    #####: 4056:  ss << (static_cast<double>(ms) * 1e-3);
    %%%%%: 4056-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4057:  return ss.str();
    %%%%%: 4057-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4057-block  1
        -: 4058:}
        -: 4059:
function _ZN7testing8internalL17PortableLocaltimeElP2tm called 0 returned 0% blocks executed 0%
    #####: 4060:static bool PortableLocaltime(time_t seconds, struct tm* out) {
        -: 4061:#if defined(_MSC_VER)
        -: 4062:  return localtime_s(out, &seconds) == 0;
        -: 4063:#elif defined(__MINGW32__) || defined(__MINGW64__)
        -: 4064:  // MINGW <time.h> provides neither localtime_r nor localtime_s, but uses
        -: 4065:  // Windows' localtime(), which has a thread-local tm buffer.
        -: 4066:  struct tm* tm_ptr = localtime(&seconds);  // NOLINT
        -: 4067:  if (tm_ptr == nullptr) return false;
        -: 4068:  *out = *tm_ptr;
        -: 4069:  return true;
        -: 4070:#else
    #####: 4071:  return localtime_r(&seconds, out) != nullptr;
    %%%%%: 4071-block  0
call    0 never executed
        -: 4072:#endif
        -: 4073:}
        -: 4074:
        -: 4075:// Converts the given epoch time in milliseconds to a date string in the ISO
        -: 4076:// 8601 format, without the timezone information.
function _ZN7testing8internal32FormatEpochTimeInMillisAsIso8601B5cxx11El called 0 returned 0% blocks executed 0%
    #####: 4077:std::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {
        -: 4078:  struct tm time_struct;
    #####: 4079:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4079-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4080:    return "";
    %%%%%: 4080-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4080-block  1
call    4 never executed
    $$$$$: 4080-block  2
call    5 never executed
    $$$$$: 4080-block  3
        -: 4081:  // YYYY-MM-DDThh:mm:ss.sss
    #####: 4082:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4082-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4082-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4082-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 4082-block  3
call   11 never executed
    $$$$$: 4082-block  4
    $$$$$: 4082-block  5
call   12 never executed
    $$$$$: 4082-block  6
    $$$$$: 4082-block  7
call   13 never executed
    $$$$$: 4082-block  8
    $$$$$: 4082-block  9
    #####: 4083:      String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4083-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4083-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4083-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4083-block  3
call   12 never executed
    $$$$$: 4083-block  4
    $$$$$: 4083-block  5
call   13 never executed
    $$$$$: 4083-block  6
    $$$$$: 4083-block  7
call   14 never executed
    $$$$$: 4083-block  8
    #####: 4084:      String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4084-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4084-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4084-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4084-block  3
call   12 never executed
    $$$$$: 4084-block  4
    $$$$$: 4084-block  5
call   13 never executed
    $$$$$: 4084-block  6
    $$$$$: 4084-block  7
call   14 never executed
    $$$$$: 4084-block  8
    #####: 4085:      String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4085-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4085-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4085-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4085-block  3
call   12 never executed
    $$$$$: 4085-block  4
    $$$$$: 4085-block  5
call   13 never executed
    $$$$$: 4085-block  6
    $$$$$: 4085-block  7
call   14 never executed
    $$$$$: 4085-block  8
    #####: 4086:      String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4086-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4086-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4086-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4086-block  3
call   12 never executed
    $$$$$: 4086-block  4
    $$$$$: 4086-block  5
call   13 never executed
    $$$$$: 4086-block  6
    $$$$$: 4086-block  7
call   14 never executed
    $$$$$: 4086-block  8
    #####: 4087:      String::FormatIntWidth2(time_struct.tm_sec) + "." +
    %%%%%: 4087-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4087-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4087-block  2
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$: 4087-block  3
call    9 never executed
    $$$$$: 4087-block  4
    $$$$$: 4087-block  5
call   10 never executed
    $$$$$: 4087-block  6
    #####: 4088:      String::FormatIntWidthN(static_cast<int>(ms % 1000), 3);
    %%%%%: 4088-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4088-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4088-block  2
call    7 never executed
    $$$$$: 4088-block  3
        -: 4089:}
        -: 4090:
        -: 4091:// Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
function _ZN7testing8internal24XmlUnitTestResultPrinter21OutputXmlCDataSectionEPSoPKc called 0 returned 0% blocks executed 0%
    #####: 4092:void XmlUnitTestResultPrinter::OutputXmlCDataSection(::std::ostream* stream,
        -: 4093:                                                     const char* data) {
    #####: 4094:  const char* segment = data;
    #####: 4095:  *stream << "<![CDATA[";
    %%%%%: 4095-block  0
call    0 never executed
        -: 4096:  for (;;) {
    #####: 4097:    const char* const next_segment = strstr(segment, "]]>");
    #####: 4098:    if (next_segment != nullptr) {
    %%%%%: 4098-block  0
branch  0 never executed
branch  1 never executed
        -: 4099:      stream->write(
    #####: 4100:          segment, static_cast<std::streamsize>(next_segment - segment));
    %%%%%: 4100-block  0
call    0 never executed
    #####: 4101:      *stream << "]]>]]&gt;<![CDATA[";
call    0 never executed
    #####: 4102:      segment = next_segment + strlen("]]>");
        -: 4103:    } else {
    #####: 4104:      *stream << segment;
    %%%%%: 4104-block  0
call    0 never executed
    #####: 4105:      break;
        -: 4106:    }
    #####: 4107:  }
    %%%%%: 4107-block  0
    #####: 4108:  *stream << "]]>";
    %%%%%: 4108-block  0
call    0 never executed
    #####: 4109:}
        -: 4110:
function _ZN7testing8internal24XmlUnitTestResultPrinter18OutputXmlAttributeEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_ called 0 returned 0% blocks executed 0%
    #####: 4111:void XmlUnitTestResultPrinter::OutputXmlAttribute(
        -: 4112:    std::ostream* stream,
        -: 4113:    const std::string& element_name,
        -: 4114:    const std::string& name,
        -: 4115:    const std::string& value) {
        -: 4116:  const std::vector<std::string>& allowed_names =
    #####: 4117:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4117-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4117-block  1
call    3 never executed
        -: 4118:
    #####: 4119:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4119-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4119-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4119-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4119-block  3
call   13 never executed
    %%%%%: 4119-block  4
call   14 never executed
    $$$$$: 4119-block  5
    $$$$$: 4119-block  6
call   15 never executed
    $$$$$: 4119-block  7
        -: 4120:                   allowed_names.end())
        -: 4121:      << "Attribute " << name << " is not allowed for element <" << element_name
    #####: 4122:      << ">.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4122-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4122-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4122-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4122-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4122-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4123:
    #####: 4124:  *stream << " " << name << "=\"" << EscapeXmlAttribute(value) << "\"";
    %%%%%: 4124-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4124-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4124-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4124-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4124-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4124-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4124-block  6
call   18 never executed
call   19 never executed
    $$$$$: 4124-block  7
call   20 never executed
    $$$$$: 4124-block  8
    #####: 4125:}
        -: 4126:
        -: 4127:// Prints an XML representation of a TestInfo object.
function _ZN7testing8internal24XmlUnitTestResultPrinter17OutputXmlTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4128:void XmlUnitTestResultPrinter::OutputXmlTestInfo(::std::ostream* stream,
        -: 4129:                                                 const char* test_suite_name,
        -: 4130:                                                 const TestInfo& test_info) {
    #####: 4131:  const TestResult& result = *test_info.result();
    %%%%%: 4131-block  0
call    0 never executed
    #####: 4132:  const std::string kTestsuite = "testcase";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4132-block  0
    $$$$$: 4132-block  1
call    4 never executed
        -: 4133:
    #####: 4134:  if (test_info.is_in_another_shard()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4135:    return;
    %%%%%: 4135-block  0
        -: 4136:  }
        -: 4137:
    #####: 4138:  *stream << "    <testcase";
    %%%%%: 4138-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4139:  OutputXmlAttribute(stream, kTestsuite, "name", test_info.name());
    %%%%%: 4139-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4139-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4139-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4139-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4139-block  4
call   16 never executed
    $$$$$: 4139-block  5
    $$$$$: 4139-block  6
call   17 never executed
    $$$$$: 4139-block  7
    $$$$$: 4139-block  8
call   18 never executed
    $$$$$: 4139-block  9
    $$$$$: 4139-block 10
call   19 never executed
    $$$$$: 4139-block 11
        -: 4140:
    #####: 4141:  if (test_info.value_param() != nullptr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4142:    OutputXmlAttribute(stream, kTestsuite, "value_param",
    %%%%%: 4142-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4142-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4142-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4142-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4142-block  4
call   16 never executed
    $$$$$: 4142-block  5
    $$$$$: 4142-block  6
call   17 never executed
    $$$$$: 4142-block  7
    $$$$$: 4142-block  8
call   18 never executed
    $$$$$: 4142-block  9
    $$$$$: 4142-block 10
call   19 never executed
    $$$$$: 4142-block 11
        -: 4143:                       test_info.value_param());
        -: 4144:  }
    #####: 4145:  if (test_info.type_param() != nullptr) {
    %%%%%: 4145-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4146:    OutputXmlAttribute(stream, kTestsuite, "type_param",
    %%%%%: 4146-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4146-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4146-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4146-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4146-block  4
call   16 never executed
    $$$$$: 4146-block  5
    $$$$$: 4146-block  6
call   17 never executed
    $$$$$: 4146-block  7
    $$$$$: 4146-block  8
call   18 never executed
    $$$$$: 4146-block  9
    $$$$$: 4146-block 10
call   19 never executed
    $$$$$: 4146-block 11
        -: 4147:                       test_info.type_param());
        -: 4148:  }
    #####: 4149:  if (GTEST_FLAG(list_tests)) {
    %%%%%: 4149-block  0
branch  0 never executed
branch  1 never executed
    #####: 4150:    OutputXmlAttribute(stream, kTestsuite, "file", test_info.file());
    %%%%%: 4150-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4150-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4150-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4150-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4150-block  4
call   16 never executed
    $$$$$: 4150-block  5
    $$$$$: 4150-block  6
call   17 never executed
    $$$$$: 4150-block  7
    $$$$$: 4150-block  8
call   18 never executed
    $$$$$: 4150-block  9
    $$$$$: 4150-block 10
call   19 never executed
    $$$$$: 4150-block 11
    #####: 4151:    OutputXmlAttribute(stream, kTestsuite, "line",
    %%%%%: 4151-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4151-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4151-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4151-block  3
call    9 never executed
    $$$$$: 4151-block  4
    $$$$$: 4151-block  5
call   10 never executed
    $$$$$: 4151-block  6
    #####: 4152:                       StreamableToString(test_info.line()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4152-block  0
call    5 never executed
    $$$$$: 4152-block  1
    $$$$$: 4152-block  2
    #####: 4153:    *stream << " />\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4154:    return;
    %%%%%: 4154-block  0
        -: 4155:  }
        -: 4156:
    #####: 4157:  OutputXmlAttribute(stream, kTestsuite, "status",
    %%%%%: 4157-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4157-block  1
    %%%%%: 4157-block  2
    %%%%%: 4157-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4157-block  4
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4157-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4157-block  6
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4157-block  7
call   17 never executed
    $$$$$: 4157-block  8
    $$$$$: 4157-block  9
call   18 never executed
    $$$$$: 4157-block 10
    $$$$$: 4157-block 11
call   19 never executed
    $$$$$: 4157-block 12
    $$$$$: 4157-block 13
call   20 never executed
    $$$$$: 4157-block 14
    #####: 4158:                     test_info.should_run() ? "run" : "notrun");
call    0 never executed
    #####: 4159:  OutputXmlAttribute(stream, kTestsuite, "result",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4159-block  0
    %%%%%: 4159-block  1
    %%%%%: 4159-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4159-block  3
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4159-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4159-block  5
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4159-block  6
call   17 never executed
    $$$$$: 4159-block  7
    $$$$$: 4159-block  8
call   18 never executed
    $$$$$: 4159-block  9
    $$$$$: 4159-block 10
call   19 never executed
    $$$$$: 4159-block 11
    $$$$$: 4159-block 12
call   20 never executed
    $$$$$: 4159-block 13
    #####: 4160:                     test_info.should_run()
call    0 never executed
    #####: 4161:                         ? (result.Skipped() ? "skipped" : "completed")
    %%%%%: 4161-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4161-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 4161-block  2
    %%%%%: 4161-block  3
        -: 4162:                         : "suppressed");
    #####: 4163:  OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 4163-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4163-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4163-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4163-block  3
call    9 never executed
    $$$$$: 4163-block  4
    $$$$$: 4163-block  5
call   10 never executed
    $$$$$: 4163-block  6
    #####: 4164:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4164-block  0
call    5 never executed
    $$$$$: 4164-block  1
    #####: 4165:  OutputXmlAttribute(
    %%%%%: 4165-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4165-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4165-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4165-block  3
call    9 never executed
    $$$$$: 4165-block  4
    $$$$$: 4165-block  5
call   10 never executed
    $$$$$: 4165-block  6
        -: 4166:      stream, kTestsuite, "timestamp",
    #####: 4167:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4167-block  0
call    5 never executed
    $$$$$: 4167-block  1
    #####: 4168:  OutputXmlAttribute(stream, kTestsuite, "classname", test_suite_name);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4168-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4168-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4168-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4168-block  3
call   15 never executed
    $$$$$: 4168-block  4
    $$$$$: 4168-block  5
call   16 never executed
    $$$$$: 4168-block  6
    $$$$$: 4168-block  7
call   17 never executed
    $$$$$: 4168-block  8
    $$$$$: 4168-block  9
call   18 never executed
    $$$$$: 4168-block 10
        -: 4169:
    #####: 4170:  int failures = 0;
    #####: 4171:  int skips = 0;
    #####: 4172:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4172-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4172-block  1
    #####: 4173:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4173-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4174:    if (part.failed()) {
    %%%%%: 4174-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4175:      if (++failures == 1 && skips == 0) {
    %%%%%: 4175-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4175-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4175-block  2
    %%%%%: 4175-block  3
    %%%%%: 4175-block  4
branch  4 never executed
branch  5 never executed
    #####: 4176:        *stream << ">\n";
    %%%%%: 4176-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4177:      }
        -: 4178:      const std::string location =
        -: 4179:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4180:                                                          part.line_number());
    %%%%%: 4180-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    $$$$$: 4180-block  1
call    6 never executed
    #####: 4181:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4181-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4181-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4181-block  2
    $$$$$: 4181-block  3
call    8 never executed
        -: 4182:      *stream << "      <failure message=\""
    #####: 4183:              << EscapeXmlAttribute(summary)
    %%%%%: 4183-block  0
call    0 never executed
    $$$$$: 4183-block  1
call    1 never executed
    $$$$$: 4183-block  2
    #####: 4184:              << "\" type=\"\">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4184-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4184-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4184-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4185:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4185-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4185-block  1
call    7 never executed
    $$$$$: 4185-block  2
    $$$$$: 4185-block  3
call    8 never executed
    #####: 4186:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4186-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4186-block  1
call    7 never executed
    $$$$$: 4186-block  2
call    8 never executed
    $$$$$: 4186-block  3
    #####: 4187:      *stream << "</failure>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4188:    } else if (part.skipped()) {
    %%%%%: 4188-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4189:      if (++skips == 1 && failures == 0) {
    %%%%%: 4189-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4189-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4189-block  2
    %%%%%: 4189-block  3
    %%%%%: 4189-block  4
branch  4 never executed
branch  5 never executed
    #####: 4190:        *stream << ">\n";
    %%%%%: 4190-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4191:      }
        -: 4192:      const std::string location =
        -: 4193:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4194:                                                          part.line_number());
    %%%%%: 4194-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    $$$$$: 4194-block  1
call    6 never executed
    #####: 4195:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4195-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4195-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
    $$$$$: 4195-block  2
    $$$$$: 4195-block  3
call    8 never executed
        -: 4196:      *stream << "      <skipped message=\""
    #####: 4197:              << EscapeXmlAttribute(summary.c_str()) << "\">";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4197-block  0
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4197-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4197-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4197-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4197-block  4
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4197-block  5
call   20 never executed
    $$$$$: 4197-block  6
    $$$$$: 4197-block  7
call   21 never executed
    $$$$$: 4197-block  8
    $$$$$: 4197-block  9
call   22 never executed
    $$$$$: 4197-block 10
    #####: 4198:      const std::string detail = location + "\n" + part.message();
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4198-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4198-block  1
call    7 never executed
    $$$$$: 4198-block  2
    $$$$$: 4198-block  3
call    8 never executed
    #####: 4199:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4199-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4199-block  1
call    7 never executed
    $$$$$: 4199-block  2
call    8 never executed
    $$$$$: 4199-block  3
    #####: 4200:      *stream << "</skipped>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4201:    }
        -: 4202:  }
        -: 4203:
    #####: 4204:  if (failures == 0 && skips == 0 && result.test_property_count() == 0) {
    %%%%%: 4204-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4204-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 4204-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4204-block  3
    %%%%%: 4204-block  4
    %%%%%: 4204-block  5
branch  7 never executed
branch  8 never executed
    #####: 4205:    *stream << " />\n";
    %%%%%: 4205-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4206:  } else {
    #####: 4207:    if (failures == 0 && skips == 0) {
    %%%%%: 4207-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4207-block  1
branch  2 never executed
branch  3 never executed
    #####: 4208:      *stream << ">\n";
    %%%%%: 4208-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4209:    }
    #####: 4210:    OutputXmlTestProperties(stream, result);
    %%%%%: 4210-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4211:    *stream << "    </testcase>\n";
    %%%%%: 4211-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4212:  }
        -: 4213:}
        -: 4214:
        -: 4215:// Prints an XML representation of a TestSuite object
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4216:void XmlUnitTestResultPrinter::PrintXmlTestSuite(std::ostream* stream,
        -: 4217:                                                 const TestSuite& test_suite) {
    #####: 4218:  const std::string kTestsuite = "testsuite";
    %%%%%: 4218-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4218-block  1
call    4 never executed
    $$$$$: 4218-block  2
    $$$$$: 4218-block  3
call    5 never executed
    #####: 4219:  *stream << "  <" << kTestsuite;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4219-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4220:  OutputXmlAttribute(stream, kTestsuite, "name", test_suite.name());
    %%%%%: 4220-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4220-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4220-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4220-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4220-block  4
call   16 never executed
    $$$$$: 4220-block  5
    $$$$$: 4220-block  6
call   17 never executed
    $$$$$: 4220-block  7
    $$$$$: 4220-block  8
call   18 never executed
    $$$$$: 4220-block  9
    $$$$$: 4220-block 10
call   19 never executed
    $$$$$: 4220-block 11
    #####: 4221:  OutputXmlAttribute(stream, kTestsuite, "tests",
    %%%%%: 4221-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4221-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4221-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4221-block  3
call    9 never executed
    $$$$$: 4221-block  4
    $$$$$: 4221-block  5
call   10 never executed
    $$$$$: 4221-block  6
    #####: 4222:                     StreamableToString(test_suite.reportable_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4222-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4222-block  1
call    7 never executed
    $$$$$: 4222-block  2
    $$$$$: 4222-block  3
    #####: 4223:  if (!GTEST_FLAG(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4224:    OutputXmlAttribute(stream, kTestsuite, "failures",
    %%%%%: 4224-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4224-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4224-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4224-block  3
call    9 never executed
    $$$$$: 4224-block  4
    $$$$$: 4224-block  5
call   10 never executed
    $$$$$: 4224-block  6
    #####: 4225:                       StreamableToString(test_suite.failed_test_count()));
    %%%%%: 4225-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4225-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4225-block  2
call    7 never executed
    $$$$$: 4225-block  3
    $$$$$: 4225-block  4
    #####: 4226:    OutputXmlAttribute(
    %%%%%: 4226-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4226-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4226-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4226-block  3
call    9 never executed
    $$$$$: 4226-block  4
    $$$$$: 4226-block  5
call   10 never executed
    $$$$$: 4226-block  6
        -: 4227:        stream, kTestsuite, "disabled",
    #####: 4228:        StreamableToString(test_suite.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4228-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4228-block  1
call    7 never executed
    $$$$$: 4228-block  2
    $$$$$: 4228-block  3
    #####: 4229:    OutputXmlAttribute(stream, kTestsuite, "skipped",
    %%%%%: 4229-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4229-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4229-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4229-block  3
call    9 never executed
    $$$$$: 4229-block  4
    $$$$$: 4229-block  5
call   10 never executed
    $$$$$: 4229-block  6
    #####: 4230:                       StreamableToString(test_suite.skipped_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4230-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4230-block  1
call    7 never executed
    $$$$$: 4230-block  2
    $$$$$: 4230-block  3
        -: 4231:
    #####: 4232:    OutputXmlAttribute(stream, kTestsuite, "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4232-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4232-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4232-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4232-block  3
call   15 never executed
    $$$$$: 4232-block  4
    $$$$$: 4232-block  5
call   16 never executed
    $$$$$: 4232-block  6
    $$$$$: 4232-block  7
call   17 never executed
    $$$$$: 4232-block  8
    $$$$$: 4232-block  9
call   18 never executed
    $$$$$: 4232-block 10
        -: 4233:
    #####: 4234:    OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 4234-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4234-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4234-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4234-block  3
call    9 never executed
    $$$$$: 4234-block  4
    $$$$$: 4234-block  5
call   10 never executed
    $$$$$: 4234-block  6
    #####: 4235:                       FormatTimeInMillisAsSeconds(test_suite.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4235-block  0
call    5 never executed
    $$$$$: 4235-block  1
    #####: 4236:    OutputXmlAttribute(
    %%%%%: 4236-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4236-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4236-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4236-block  3
call    9 never executed
    $$$$$: 4236-block  4
    $$$$$: 4236-block  5
call   10 never executed
    $$$$$: 4236-block  6
        -: 4237:        stream, kTestsuite, "timestamp",
    #####: 4238:        FormatEpochTimeInMillisAsIso8601(test_suite.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4238-block  0
call    5 never executed
    $$$$$: 4238-block  1
    #####: 4239:    *stream << TestPropertiesAsXmlAttributes(test_suite.ad_hoc_test_result());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4239-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4239-block  1
call    7 never executed
    $$$$$: 4239-block  2
call    8 never executed
    $$$$$: 4239-block  3
        -: 4240:  }
    #####: 4241:  *stream << ">\n";
    %%%%%: 4241-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4242:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4242-block  0
    %%%%%: 4242-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4242-block  2
    #####: 4243:    if (test_suite.GetTestInfo(i)->is_reportable())
    %%%%%: 4243-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4243-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4244:      OutputXmlTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4244-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4244-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4245:  }
    #####: 4246:  *stream << "  </" << kTestsuite << ">\n";
    %%%%%: 4246-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4246-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4246-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4247:}
        -: 4248:
        -: 4249:// Prints an XML summary of unit_test to output stream out.
function _ZN7testing8internal24XmlUnitTestResultPrinter16PrintXmlUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4250:void XmlUnitTestResultPrinter::PrintXmlUnitTest(std::ostream* stream,
        -: 4251:                                                const UnitTest& unit_test) {
    #####: 4252:  const std::string kTestsuites = "testsuites";
    %%%%%: 4252-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4252-block  1
call    4 never executed
    $$$$$: 4252-block  2
    $$$$$: 4252-block  3
call    5 never executed
        -: 4253:
    #####: 4254:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4255:  *stream << "<" << kTestsuites;
    %%%%%: 4255-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4255-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4256:
    #####: 4257:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 4257-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4257-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4257-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4257-block  3
call    9 never executed
    $$$$$: 4257-block  4
    $$$$$: 4257-block  5
call   10 never executed
    $$$$$: 4257-block  6
    #####: 4258:                     StreamableToString(unit_test.reportable_test_count()));
    %%%%%: 4258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4258-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4258-block  2
call    7 never executed
    $$$$$: 4258-block  3
    $$$$$: 4258-block  4
    #####: 4259:  OutputXmlAttribute(stream, kTestsuites, "failures",
    %%%%%: 4259-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4259-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4259-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4259-block  3
call    9 never executed
    $$$$$: 4259-block  4
    $$$$$: 4259-block  5
call   10 never executed
    $$$$$: 4259-block  6
    #####: 4260:                     StreamableToString(unit_test.failed_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4260-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4260-block  1
call    7 never executed
    $$$$$: 4260-block  2
    $$$$$: 4260-block  3
    #####: 4261:  OutputXmlAttribute(
    %%%%%: 4261-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4261-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4261-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4261-block  3
call    9 never executed
    $$$$$: 4261-block  4
    $$$$$: 4261-block  5
call   10 never executed
    $$$$$: 4261-block  6
        -: 4262:      stream, kTestsuites, "disabled",
    #####: 4263:      StreamableToString(unit_test.reportable_disabled_test_count()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4263-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4263-block  1
call    7 never executed
    $$$$$: 4263-block  2
    $$$$$: 4263-block  3
    #####: 4264:  OutputXmlAttribute(stream, kTestsuites, "errors", "0");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4264-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4264-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4264-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4264-block  3
call   15 never executed
    $$$$$: 4264-block  4
    $$$$$: 4264-block  5
call   16 never executed
    $$$$$: 4264-block  6
    $$$$$: 4264-block  7
call   17 never executed
    $$$$$: 4264-block  8
    $$$$$: 4264-block  9
call   18 never executed
    $$$$$: 4264-block 10
    #####: 4265:  OutputXmlAttribute(stream, kTestsuites, "time",
    %%%%%: 4265-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4265-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4265-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4265-block  3
call    9 never executed
    $$$$$: 4265-block  4
    $$$$$: 4265-block  5
call   10 never executed
    $$$$$: 4265-block  6
    #####: 4266:                     FormatTimeInMillisAsSeconds(unit_test.elapsed_time()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4266-block  0
call    5 never executed
    $$$$$: 4266-block  1
    #####: 4267:  OutputXmlAttribute(
    %%%%%: 4267-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4267-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4267-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4267-block  3
call    9 never executed
    $$$$$: 4267-block  4
    $$$$$: 4267-block  5
call   10 never executed
    $$$$$: 4267-block  6
        -: 4268:      stream, kTestsuites, "timestamp",
    #####: 4269:      FormatEpochTimeInMillisAsIso8601(unit_test.start_timestamp()));
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4269-block  0
call    5 never executed
    $$$$$: 4269-block  1
        -: 4270:
    #####: 4271:  if (GTEST_FLAG(shuffle)) {
branch  0 never executed
branch  1 never executed
    #####: 4272:    OutputXmlAttribute(stream, kTestsuites, "random_seed",
    %%%%%: 4272-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4272-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4272-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4272-block  3
call    9 never executed
    $$$$$: 4272-block  4
    $$$$$: 4272-block  5
call   10 never executed
    $$$$$: 4272-block  6
    #####: 4273:                       StreamableToString(unit_test.random_seed()));
    %%%%%: 4273-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4273-block  1
call    5 never executed
    $$$$$: 4273-block  2
    $$$$$: 4273-block  3
        -: 4274:  }
    #####: 4275:  *stream << TestPropertiesAsXmlAttributes(unit_test.ad_hoc_test_result());
    %%%%%: 4275-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4275-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4275-block  2
call    7 never executed
    $$$$$: 4275-block  3
call    8 never executed
    $$$$$: 4275-block  4
        -: 4276:
    #####: 4277:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4277-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4277-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4277-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4277-block  3
call   15 never executed
    $$$$$: 4277-block  4
    $$$$$: 4277-block  5
call   16 never executed
    $$$$$: 4277-block  6
    $$$$$: 4277-block  7
call   17 never executed
    $$$$$: 4277-block  8
    $$$$$: 4277-block  9
call   18 never executed
    $$$$$: 4277-block 10
    #####: 4278:  *stream << ">\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4279:
    #####: 4280:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4280-block  0
    %%%%%: 4280-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4280-block  2
    #####: 4281:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0)
    %%%%%: 4281-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4281-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4281-block  2
branch  6 never executed
branch  7 never executed
    #####: 4282:      PrintXmlTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4282-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4282-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4283:  }
    #####: 4284:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4284-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4284-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4284-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4285:}
        -: 4286:
function _ZN7testing8internal24XmlUnitTestResultPrinter17PrintXmlTestsListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4287:void XmlUnitTestResultPrinter::PrintXmlTestsList(
        -: 4288:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4289:  const std::string kTestsuites = "testsuites";
    %%%%%: 4289-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4289-block  1
call    4 never executed
    $$$$$: 4289-block  2
    $$$$$: 4289-block  3
call    5 never executed
        -: 4290:
    #####: 4291:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4292:  *stream << "<" << kTestsuites;
    %%%%%: 4292-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4292-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4293:
    #####: 4294:  int total_tests = 0;
    #####: 4295:  for (auto test_suite : test_suites) {
    %%%%%: 4295-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4295-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4295-block  2
call    5 never executed
    #####: 4296:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
        -: 4297:  }
    #####: 4298:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 4298-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4298-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4298-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4298-block  3
call    9 never executed
    $$$$$: 4298-block  4
    $$$$$: 4298-block  5
call   10 never executed
    $$$$$: 4298-block  6
    #####: 4299:                     StreamableToString(total_tests));
    %%%%%: 4299-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 4299-block  1
call    4 never executed
    $$$$$: 4299-block  2
    #####: 4300:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4300-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4300-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4300-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4300-block  3
call   15 never executed
    $$$$$: 4300-block  4
    $$$$$: 4300-block  5
call   16 never executed
    $$$$$: 4300-block  6
    $$$$$: 4300-block  7
call   17 never executed
    $$$$$: 4300-block  8
    $$$$$: 4300-block  9
call   18 never executed
    $$$$$: 4300-block 10
    #####: 4301:  *stream << ">\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4302:
    #####: 4303:  for (auto test_suite : test_suites) {
    %%%%%: 4303-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4303-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4303-block  2
call    5 never executed
    %%%%%: 4303-block  3
call    6 never executed
    #####: 4304:    PrintXmlTestSuite(stream, *test_suite);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4305:  }
    #####: 4306:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4306-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4306-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4306-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4307:}
        -: 4308:
        -: 4309:// Produces a string representing the test properties in a result as space
        -: 4310:// delimited XML attributes based on the property key="value" pairs.
function _ZN7testing8internal24XmlUnitTestResultPrinter29TestPropertiesAsXmlAttributesB5cxx11ERKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4311:std::string XmlUnitTestResultPrinter::TestPropertiesAsXmlAttributes(
        -: 4312:    const TestResult& result) {
    #####: 4313:  Message attributes;
    %%%%%: 4313-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4313-block  1
call    3 never executed
    $$$$$: 4313-block  2
call    4 never executed
    #####: 4314:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4314-block  0
    %%%%%: 4314-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4315:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4315-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4316:    attributes << " " << property.key() << "="
    %%%%%: 4316-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4316-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4316-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$: 4316-block  3
    #####: 4317:        << "\"" << EscapeXmlAttribute(property.value()) << "\"";
    %%%%%: 4317-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4317-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4317-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4317-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4317-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4317-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4317-block  6
call   20 never executed
    $$$$$: 4317-block  7
    $$$$$: 4317-block  8
call   21 never executed
    $$$$$: 4317-block  9
    $$$$$: 4317-block 10
call   22 never executed
    $$$$$: 4317-block 11
        -: 4318:  }
    #####: 4319:  return attributes.GetString();
    %%%%%: 4319-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4319-block  1
        -: 4320:}
        -: 4321:
function _ZN7testing8internal24XmlUnitTestResultPrinter23OutputXmlTestPropertiesEPSoRKNS_10TestResultE called 0 returned 0% blocks executed 0%
    #####: 4322:void XmlUnitTestResultPrinter::OutputXmlTestProperties(
        -: 4323:    std::ostream* stream, const TestResult& result) {
    #####: 4324:  const std::string kProperties = "properties";
    %%%%%: 4324-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4324-block  1
    $$$$$: 4324-block  2
call    4 never executed
    #####: 4325:  const std::string kProperty = "property";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4325-block  0
    $$$$$: 4325-block  1
call    4 never executed
        -: 4326:
    #####: 4327:  if (result.test_property_count() <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4328:    return;
    %%%%%: 4328-block  0
        -: 4329:  }
        -: 4330:
    #####: 4331:  *stream << "<" << kProperties << ">\n";
    %%%%%: 4331-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4331-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4331-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4332:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4332-block  0
    %%%%%: 4332-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4332-block  2
    #####: 4333:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4333-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4334:    *stream << "<" << kProperty;
    %%%%%: 4334-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4334-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4335:    *stream << " name=\"" << EscapeXmlAttribute(property.key()) << "\"";
    %%%%%: 4335-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4335-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4335-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4335-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4335-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4335-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4335-block  6
call   20 never executed
    $$$$$: 4335-block  7
    $$$$$: 4335-block  8
call   21 never executed
    $$$$$: 4335-block  9
    $$$$$: 4335-block 10
call   22 never executed
    $$$$$: 4335-block 11
    #####: 4336:    *stream << " value=\"" << EscapeXmlAttribute(property.value()) << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4336-block  0
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4336-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4336-block  2
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4336-block  3
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4336-block  4
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4336-block  5
call   20 never executed
    $$$$$: 4336-block  6
    $$$$$: 4336-block  7
call   21 never executed
    $$$$$: 4336-block  8
    $$$$$: 4336-block  9
call   22 never executed
    $$$$$: 4336-block 10
    #####: 4337:    *stream << "/>\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4338:  }
    #####: 4339:  *stream << "</" << kProperties << ">\n";
    %%%%%: 4339-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4339-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4339-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 4340:}
        -: 4341:
        -: 4342:// End XmlUnitTestResultPrinter
        -: 4343:
        -: 4344:// This class generates an JSON output file.
        -: 4345:class JsonUnitTestResultPrinter : public EmptyTestEventListener {
        -: 4346: public:
        -: 4347:  explicit JsonUnitTestResultPrinter(const char* output_file);
        -: 4348:
        -: 4349:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 4350:
        -: 4351:  // Prints an JSON summary of all unit tests.
        -: 4352:  static void PrintJsonTestList(::std::ostream* stream,
        -: 4353:                                const std::vector<TestSuite*>& test_suites);
        -: 4354:
        -: 4355: private:
        -: 4356:  // Returns an JSON-escaped copy of the input string str.
        -: 4357:  static std::string EscapeJson(const std::string& str);
        -: 4358:
        -: 4359:  //// Verifies that the given attribute belongs to the given element and
        -: 4360:  //// streams the attribute as JSON.
        -: 4361:  static void OutputJsonKey(std::ostream* stream,
        -: 4362:                            const std::string& element_name,
        -: 4363:                            const std::string& name,
        -: 4364:                            const std::string& value,
        -: 4365:                            const std::string& indent,
        -: 4366:                            bool comma = true);
        -: 4367:  static void OutputJsonKey(std::ostream* stream,
        -: 4368:                            const std::string& element_name,
        -: 4369:                            const std::string& name,
        -: 4370:                            int value,
        -: 4371:                            const std::string& indent,
        -: 4372:                            bool comma = true);
        -: 4373:
        -: 4374:  // Streams a JSON representation of a TestInfo object.
        -: 4375:  static void OutputJsonTestInfo(::std::ostream* stream,
        -: 4376:                                 const char* test_suite_name,
        -: 4377:                                 const TestInfo& test_info);
        -: 4378:
        -: 4379:  // Prints a JSON representation of a TestSuite object
        -: 4380:  static void PrintJsonTestSuite(::std::ostream* stream,
        -: 4381:                                 const TestSuite& test_suite);
        -: 4382:
        -: 4383:  // Prints a JSON summary of unit_test to output stream out.
        -: 4384:  static void PrintJsonUnitTest(::std::ostream* stream,
        -: 4385:                                const UnitTest& unit_test);
        -: 4386:
        -: 4387:  // Produces a string representing the test properties in a result as
        -: 4388:  // a JSON dictionary.
        -: 4389:  static std::string TestPropertiesAsJson(const TestResult& result,
        -: 4390:                                          const std::string& indent);
        -: 4391:
        -: 4392:  // The output file.
        -: 4393:  const std::string output_file_;
        -: 4394:
        -: 4395:  GTEST_DISALLOW_COPY_AND_ASSIGN_(JsonUnitTestResultPrinter);
        -: 4396:};
        -: 4397:
        -: 4398:// Creates a new JsonUnitTestResultPrinter.
function _ZN7testing8internal25JsonUnitTestResultPrinterC2EPKc called 0 returned 0% blocks executed 0%
    #####: 4399:JsonUnitTestResultPrinter::JsonUnitTestResultPrinter(const char* output_file)
    #####: 4400:    : output_file_(output_file) {
    %%%%%: 4400-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4400-block  1
call    5 never executed
    $$$$$: 4400-block  2
call    6 never executed
    $$$$$: 4400-block  3
    $$$$$: 4400-block  4
call    7 never executed
    $$$$$: 4400-block  5
call    8 never executed
    #####: 4401:  if (output_file_.empty()) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4402:    GTEST_LOG_(FATAL) << "JSON output file may not be null";
    %%%%%: 4402-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4402-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4402-block  2
call    7 never executed
    $$$$$: 4402-block  3
call    8 never executed
    $$$$$: 4402-block  4
        -: 4403:  }
    #####: 4404:}
    %%%%%: 4404-block  0
        -: 4405:
function _ZN7testing8internal25JsonUnitTestResultPrinter18OnTestIterationEndERKNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 4406:void JsonUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 4407:                                                  int /*iteration*/) {
    #####: 4408:  FILE* jsonout = OpenFileForWriting(output_file_);
    %%%%%: 4408-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4409:  std::stringstream stream;
    %%%%%: 4409-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4409-block  1
call    3 never executed
    $$$$$: 4409-block  2
call    4 never executed
    #####: 4410:  PrintJsonUnitTest(&stream, unit_test);
    %%%%%: 4410-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4411:  fprintf(jsonout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4411-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4411-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4411-block  2
call    7 never executed
    $$$$$: 4411-block  3
call    8 never executed
    $$$$$: 4411-block  4
    #####: 4412:  fclose(jsonout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4413:}
        -: 4414:
        -: 4415:// Returns an JSON-escaped copy of the input string str.
function _ZN7testing8internal25JsonUnitTestResultPrinter10EscapeJsonERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4416:std::string JsonUnitTestResultPrinter::EscapeJson(const std::string& str) {
    #####: 4417:  Message m;
    %%%%%: 4417-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4417-block  1
call    3 never executed
    $$$$$: 4417-block  2
call    4 never executed
        -: 4418:
    #####: 4419:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4419-block  0
    %%%%%: 4419-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4419-block  2
    #####: 4420:    const char ch = str[i];
    %%%%%: 4420-block  0
call    0 never executed
    #####: 4421:    switch (ch) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    #####: 4422:      case '\\':
        -: 4423:      case '"':
        -: 4424:      case '/':
    #####: 4425:        m << '\\' << ch;
    %%%%%: 4425-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4425-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$: 4425-block  2
    #####: 4426:        break;
    %%%%%: 4426-block  0
    #####: 4427:      case '\b':
    #####: 4428:        m << "\\b";
    %%%%%: 4428-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4429:        break;
    %%%%%: 4429-block  0
    #####: 4430:      case '\t':
    #####: 4431:        m << "\\t";
    %%%%%: 4431-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4432:        break;
    %%%%%: 4432-block  0
    #####: 4433:      case '\n':
    #####: 4434:        m << "\\n";
    %%%%%: 4434-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4435:        break;
    %%%%%: 4435-block  0
    #####: 4436:      case '\f':
    #####: 4437:        m << "\\f";
    %%%%%: 4437-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4438:        break;
    %%%%%: 4438-block  0
    #####: 4439:      case '\r':
    #####: 4440:        m << "\\r";
    %%%%%: 4440-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4441:        break;
    %%%%%: 4441-block  0
    #####: 4442:      default:
    #####: 4443:        if (ch < ' ') {
    %%%%%: 4443-block  0
branch  0 never executed
branch  1 never executed
    #####: 4444:          m << "\\u00" << String::FormatByte(static_cast<unsigned char>(ch));
    %%%%%: 4444-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4444-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4444-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4444-block  3
call    9 never executed
    $$$$$: 4444-block  4
call   10 never executed
    $$$$$: 4444-block  5
        -: 4445:        } else {
    #####: 4446:          m << ch;
    %%%%%: 4446-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4447:        }
    #####: 4448:        break;
    %%%%%: 4448-block  0
        -: 4449:    }
        -: 4450:  }
        -: 4451:
    #####: 4452:  return m.GetString();
    %%%%%: 4452-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4452-block  1
        -: 4453:}
        -: 4454:
        -: 4455:// The following routines generate an JSON representation of a UnitTest
        -: 4456:// object.
        -: 4457:
        -: 4458:// Formats the given time in milliseconds as seconds.
function _ZN7testing8internalL28FormatTimeInMillisAsDurationEl called 0 returned 0% blocks executed 0%
    #####: 4459:static std::string FormatTimeInMillisAsDuration(TimeInMillis ms) {
    #####: 4460:  ::std::stringstream ss;
    %%%%%: 4460-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4460-block  1
call    3 never executed
    $$$$$: 4460-block  2
call    4 never executed
    #####: 4461:  ss << (static_cast<double>(ms) * 1e-3) << "s";
    %%%%%: 4461-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4461-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4462:  return ss.str();
    %%%%%: 4462-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4462-block  1
        -: 4463:}
        -: 4464:
        -: 4465:// Converts the given epoch time in milliseconds to a date string in the
        -: 4466:// RFC3339 format, without the timezone information.
function _ZN7testing8internalL32FormatEpochTimeInMillisAsRFC3339El called 0 returned 0% blocks executed 0%
    #####: 4467:static std::string FormatEpochTimeInMillisAsRFC3339(TimeInMillis ms) {
        -: 4468:  struct tm time_struct;
    #####: 4469:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4469-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4470:    return "";
    %%%%%: 4470-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4470-block  1
call    4 never executed
    $$$$$: 4470-block  2
call    5 never executed
    $$$$$: 4470-block  3
        -: 4471:  // YYYY-MM-DDThh:mm:ss
    #####: 4472:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4472-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4472-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4472-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
    $$$$$: 4472-block  3
call   11 never executed
    $$$$$: 4472-block  4
    $$$$$: 4472-block  5
call   12 never executed
    $$$$$: 4472-block  6
    $$$$$: 4472-block  7
call   13 never executed
    $$$$$: 4472-block  8
    $$$$$: 4472-block  9
    #####: 4473:      String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4473-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4473-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4473-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4473-block  3
call   12 never executed
    $$$$$: 4473-block  4
    $$$$$: 4473-block  5
call   13 never executed
    $$$$$: 4473-block  6
    $$$$$: 4473-block  7
call   14 never executed
    $$$$$: 4473-block  8
    #####: 4474:      String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4474-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4474-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4474-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4474-block  3
call   12 never executed
    $$$$$: 4474-block  4
    $$$$$: 4474-block  5
call   13 never executed
    $$$$$: 4474-block  6
    $$$$$: 4474-block  7
call   14 never executed
    $$$$$: 4474-block  8
    #####: 4475:      String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4475-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4475-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4475-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$: 4475-block  3
call   12 never executed
    $$$$$: 4475-block  4
    $$$$$: 4475-block  5
call   13 never executed
    $$$$$: 4475-block  6
    $$$$$: 4475-block  7
call   14 never executed
    $$$$$: 4475-block  8
    #####: 4476:      String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4476-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4476-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4476-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4476-block  3
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
    $$$$$: 4476-block  4
call   13 never executed
    $$$$$: 4476-block  5
    $$$$$: 4476-block  6
call   14 never executed
    $$$$$: 4476-block  7
    $$$$$: 4476-block  8
call   15 never executed
    $$$$$: 4476-block  9
    #####: 4477:      String::FormatIntWidth2(time_struct.tm_sec) + "Z";
    %%%%%: 4477-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4477-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    $$$$$: 4477-block  2
call    7 never executed
    $$$$$: 4477-block  3
        -: 4478:}
        -: 4479:
function _ZN7testing8internalL6IndentEm called 0 returned 0% blocks executed 0%
    #####: 4480:static inline std::string Indent(size_t width) {
    #####: 4481:  return std::string(width, ' ');
    %%%%%: 4481-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4481-block  1
call    4 never executed
    %%%%%: 4481-block  2
    $$$$$: 4481-block  3
call    5 never executed
        -: 4482:}
        -: 4483:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_SA_SA_b called 0 returned 0% blocks executed 0%
    #####: 4484:void JsonUnitTestResultPrinter::OutputJsonKey(
        -: 4485:    std::ostream* stream,
        -: 4486:    const std::string& element_name,
        -: 4487:    const std::string& name,
        -: 4488:    const std::string& value,
        -: 4489:    const std::string& indent,
        -: 4490:    bool comma) {
        -: 4491:  const std::vector<std::string>& allowed_names =
    #####: 4492:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4492-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4492-block  1
call    3 never executed
    $$$$$: 4492-block  2
call    4 never executed
        -: 4493:
    #####: 4494:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4494-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4494-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4494-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4494-block  3
call   13 never executed
    %%%%%: 4494-block  4
call   14 never executed
    $$$$$: 4494-block  5
    $$$$$: 4494-block  6
call   15 never executed
    $$$$$: 4494-block  7
        -: 4495:                   allowed_names.end())
        -: 4496:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4497:      << "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4497-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4497-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4497-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4497-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4497-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4498:
    #####: 4499:  *stream << indent << "\"" << name << "\": \"" << EscapeJson(value) << "\"";
    %%%%%: 4499-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4499-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4499-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4499-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4499-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4499-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4499-block  6
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 4499-block  7
call   21 never executed
    $$$$$: 4499-block  8
call   22 never executed
    $$$$$: 4499-block  9
    #####: 4500:  if (comma)
branch  0 never executed
branch  1 never executed
    #####: 4501:    *stream << ",\n";
    %%%%%: 4501-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4502:}
        -: 4503:
function _ZN7testing8internal25JsonUnitTestResultPrinter13OutputJsonKeyEPSoRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESA_iSA_b called 0 returned 0% blocks executed 0%
    #####: 4504:void JsonUnitTestResultPrinter::OutputJsonKey(
        -: 4505:    std::ostream* stream,
        -: 4506:    const std::string& element_name,
        -: 4507:    const std::string& name,
        -: 4508:    int value,
        -: 4509:    const std::string& indent,
        -: 4510:    bool comma) {
        -: 4511:  const std::vector<std::string>& allowed_names =
    #####: 4512:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4512-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4512-block  1
call    3 never executed
    $$$$$: 4512-block  2
call    4 never executed
        -: 4513:
    #####: 4514:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4514-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4514-block  1
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4514-block  2
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4514-block  3
call   13 never executed
    %%%%%: 4514-block  4
call   14 never executed
    $$$$$: 4514-block  5
    $$$$$: 4514-block  6
call   15 never executed
    $$$$$: 4514-block  7
        -: 4515:                   allowed_names.end())
        -: 4516:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4517:      << "\".";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4517-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4517-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4517-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4517-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4517-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
        -: 4518:
    #####: 4519:  *stream << indent << "\"" << name << "\": " << StreamableToString(value);
    %%%%%: 4519-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4519-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4519-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4519-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4519-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4519-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4519-block  6
call   18 never executed
    $$$$$: 4519-block  7
call   19 never executed
    $$$$$: 4519-block  8
    #####: 4520:  if (comma)
branch  0 never executed
branch  1 never executed
    #####: 4521:    *stream << ",\n";
    %%%%%: 4521-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4522:}
        -: 4523:
        -: 4524:// Prints a JSON representation of a TestInfo object.
function _ZN7testing8internal25JsonUnitTestResultPrinter18OutputJsonTestInfoEPSoPKcRKNS_8TestInfoE called 0 returned 0% blocks executed 0%
    #####: 4525:void JsonUnitTestResultPrinter::OutputJsonTestInfo(::std::ostream* stream,
        -: 4526:                                                   const char* test_suite_name,
        -: 4527:                                                   const TestInfo& test_info) {
    #####: 4528:  const TestResult& result = *test_info.result();
    %%%%%: 4528-block  0
call    0 never executed
    #####: 4529:  const std::string kTestsuite = "testcase";
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 4529-block  0
    $$$$$: 4529-block  1
call    4 never executed
    #####: 4530:  const std::string kIndent = Indent(10);
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4530-block  0
call    3 never executed
        -: 4531:
    #####: 4532:  *stream << Indent(8) << "{\n";
    %%%%%: 4532-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4532-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4532-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4532-block  3
call    9 never executed
    $$$$$: 4532-block  4
call   10 never executed
    $$$$$: 4532-block  5
    #####: 4533:  OutputJsonKey(stream, kTestsuite, "name", test_info.name(), kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4533-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4533-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4533-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4533-block  3
call   16 never executed
    $$$$$: 4533-block  4
    $$$$$: 4533-block  5
call   17 never executed
    $$$$$: 4533-block  6
    $$$$$: 4533-block  7
call   18 never executed
    $$$$$: 4533-block  8
    $$$$$: 4533-block  9
call   19 never executed
    $$$$$: 4533-block 10
        -: 4534:
    #####: 4535:  if (test_info.value_param() != nullptr) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4536:    OutputJsonKey(stream, kTestsuite, "value_param", test_info.value_param(),
    %%%%%: 4536-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4536-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4536-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4536-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4536-block  4
call   16 never executed
    $$$$$: 4536-block  5
    $$$$$: 4536-block  6
call   17 never executed
    $$$$$: 4536-block  7
    $$$$$: 4536-block  8
call   18 never executed
    $$$$$: 4536-block  9
    $$$$$: 4536-block 10
call   19 never executed
    $$$$$: 4536-block 11
        -: 4537:                  kIndent);
        -: 4538:  }
    #####: 4539:  if (test_info.type_param() != nullptr) {
    %%%%%: 4539-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4540:    OutputJsonKey(stream, kTestsuite, "type_param", test_info.type_param(),
    %%%%%: 4540-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4540-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4540-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4540-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4540-block  4
call   16 never executed
    $$$$$: 4540-block  5
    $$$$$: 4540-block  6
call   17 never executed
    $$$$$: 4540-block  7
    $$$$$: 4540-block  8
call   18 never executed
    $$$$$: 4540-block  9
    $$$$$: 4540-block 10
call   19 never executed
    $$$$$: 4540-block 11
        -: 4541:                  kIndent);
        -: 4542:  }
    #####: 4543:  if (GTEST_FLAG(list_tests)) {
    %%%%%: 4543-block  0
branch  0 never executed
branch  1 never executed
    #####: 4544:    OutputJsonKey(stream, kTestsuite, "file", test_info.file(), kIndent);
    %%%%%: 4544-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4544-block  1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4544-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4544-block  3
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4544-block  4
call   16 never executed
    $$$$$: 4544-block  5
    $$$$$: 4544-block  6
call   17 never executed
    $$$$$: 4544-block  7
    $$$$$: 4544-block  8
call   18 never executed
    $$$$$: 4544-block  9
    $$$$$: 4544-block 10
call   19 never executed
    $$$$$: 4544-block 11
    #####: 4545:    OutputJsonKey(stream, kTestsuite, "line", test_info.line(), kIndent, false);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4545-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4545-block  1
call    8 never executed
call    9 never executed
    $$$$$: 4545-block  2
call   10 never executed
    $$$$$: 4545-block  3
    $$$$$: 4545-block  4
call   11 never executed
    $$$$$: 4545-block  5
    #####: 4546:    *stream << "\n" << Indent(8) << "}";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4546-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4546-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4546-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4546-block  3
call   12 never executed
    $$$$$: 4546-block  4
call   13 never executed
    $$$$$: 4546-block  5
    #####: 4547:    return;
        -: 4548:  }
        -: 4549:
    #####: 4550:  OutputJsonKey(stream, kTestsuite, "status",
    %%%%%: 4550-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4550-block  1
    %%%%%: 4550-block  2
    %%%%%: 4550-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4550-block  4
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4550-block  5
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4550-block  6
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4550-block  7
call   17 never executed
    $$$$$: 4550-block  8
    $$$$$: 4550-block  9
call   18 never executed
    $$$$$: 4550-block 10
    $$$$$: 4550-block 11
call   19 never executed
    $$$$$: 4550-block 12
    $$$$$: 4550-block 13
call   20 never executed
    $$$$$: 4550-block 14
    #####: 4551:                test_info.should_run() ? "RUN" : "NOTRUN", kIndent);
call    0 never executed
    #####: 4552:  OutputJsonKey(stream, kTestsuite, "result",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4552-block  0
    %%%%%: 4552-block  1
    %%%%%: 4552-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4552-block  3
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4552-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4552-block  5
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
    $$$$$: 4552-block  6
call   17 never executed
    $$$$$: 4552-block  7
    $$$$$: 4552-block  8
call   18 never executed
    $$$$$: 4552-block  9
    $$$$$: 4552-block 10
call   19 never executed
    $$$$$: 4552-block 11
    $$$$$: 4552-block 12
call   20 never executed
    $$$$$: 4552-block 13
    #####: 4553:                test_info.should_run()
call    0 never executed
    #####: 4554:                    ? (result.Skipped() ? "SKIPPED" : "COMPLETED")
    %%%%%: 4554-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4554-block  1
branch  3 never executed
branch  4 never executed
    %%%%%: 4554-block  2
    %%%%%: 4554-block  3
        -: 4555:                    : "SUPPRESSED",
        -: 4556:                kIndent);
    #####: 4557:  OutputJsonKey(stream, kTestsuite, "timestamp",
    %%%%%: 4557-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4557-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4557-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4557-block  3
call    9 never executed
    $$$$$: 4557-block  4
    $$$$$: 4557-block  5
call   10 never executed
    $$$$$: 4557-block  6
    #####: 4558:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4558-block  0
call    5 never executed
    $$$$$: 4558-block  1
        -: 4559:                kIndent);
    #####: 4560:  OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 4560-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4560-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4560-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4560-block  3
call    9 never executed
    $$$$$: 4560-block  4
    $$$$$: 4560-block  5
call   10 never executed
    $$$$$: 4560-block  6
    #####: 4561:                FormatTimeInMillisAsDuration(result.elapsed_time()), kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4561-block  0
call    5 never executed
    $$$$$: 4561-block  1
    #####: 4562:  OutputJsonKey(stream, kTestsuite, "classname", test_suite_name, kIndent,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4562-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4562-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4562-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4562-block  3
call   15 never executed
    $$$$$: 4562-block  4
    $$$$$: 4562-block  5
call   16 never executed
    $$$$$: 4562-block  6
    $$$$$: 4562-block  7
call   17 never executed
    $$$$$: 4562-block  8
    $$$$$: 4562-block  9
call   18 never executed
    $$$$$: 4562-block 10
        -: 4563:                false);
    #####: 4564:  *stream << TestPropertiesAsJson(result, kIndent);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4564-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4564-block  1
call    6 never executed
    $$$$$: 4564-block  2
call    7 never executed
    $$$$$: 4564-block  3
        -: 4565:
    #####: 4566:  int failures = 0;
    #####: 4567:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4567-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4567-block  1
    #####: 4568:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4568-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4569:    if (part.failed()) {
    %%%%%: 4569-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4570:      *stream << ",\n";
    %%%%%: 4570-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4571:      if (++failures == 1) {
    %%%%%: 4571-block  0
branch  0 never executed
branch  1 never executed
    #####: 4572:        *stream << kIndent << "\"" << "failures" << "\": [\n";
    %%%%%: 4572-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4572-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4572-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4572-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4573:      }
        -: 4574:      const std::string location =
        -: 4575:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4576:                                                          part.line_number());
    %%%%%: 4576-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
    $$$$$: 4576-block  1
call    6 never executed
    #####: 4577:      const std::string message = EscapeJson(location + "\n" + part.message());
    %%%%%: 4577-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4577-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4577-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
    %%%%%: 4577-block  3
call   11 never executed
    $$$$$: 4577-block  4
    $$$$$: 4577-block  5
    $$$$$: 4577-block  6
call   12 never executed
        -: 4578:      *stream << kIndent << "  {\n"
        -: 4579:              << kIndent << "    \"failure\": \"" << message << "\",\n"
        -: 4580:              << kIndent << "    \"type\": \"\"\n"
    #####: 4581:              << kIndent << "  }";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4581-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4581-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4581-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4581-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4581-block  4
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4581-block  5
call   18 never executed
branch 19 never executed
branch 20 never executed
    %%%%%: 4581-block  6
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%: 4581-block  7
call   24 never executed
branch 25 never executed
branch 26 never executed
    %%%%%: 4581-block  8
call   27 never executed
branch 28 never executed
branch 29 never executed
        -: 4582:    }
        -: 4583:  }
        -: 4584:
    #####: 4585:  if (failures > 0)
    %%%%%: 4585-block  0
branch  0 never executed
branch  1 never executed
    #####: 4586:    *stream << "\n" << kIndent << "]";
    %%%%%: 4586-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4586-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4586-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 4587:  *stream << "\n" << Indent(8) << "}";
    %%%%%: 4587-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4587-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4587-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4587-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4587-block  4
call   12 never executed
    $$$$$: 4587-block  5
call   13 never executed
    $$$$$: 4587-block  6
        -: 4588:}
        -: 4589:
        -: 4590:// Prints an JSON representation of a TestSuite object
function _ZN7testing8internal25JsonUnitTestResultPrinter18PrintJsonTestSuiteEPSoRKNS_9TestSuiteE called 0 returned 0% blocks executed 0%
    #####: 4591:void JsonUnitTestResultPrinter::PrintJsonTestSuite(
        -: 4592:    std::ostream* stream, const TestSuite& test_suite) {
    #####: 4593:  const std::string kTestsuite = "testsuite";
    %%%%%: 4593-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4593-block  1
    $$$$$: 4593-block  2
call    5 never executed
    #####: 4594:  const std::string kIndent = Indent(6);
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 4594-block  0
call    3 never executed
        -: 4595:
    #####: 4596:  *stream << Indent(4) << "{\n";
    %%%%%: 4596-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4596-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4596-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4596-block  3
call    9 never executed
    $$$$$: 4596-block  4
call   10 never executed
    $$$$$: 4596-block  5
    #####: 4597:  OutputJsonKey(stream, kTestsuite, "name", test_suite.name(), kIndent);
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4597-block  0
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4597-block  1
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4597-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
    $$$$$: 4597-block  3
call   16 never executed
    $$$$$: 4597-block  4
    $$$$$: 4597-block  5
call   17 never executed
    $$$$$: 4597-block  6
    $$$$$: 4597-block  7
call   18 never executed
    $$$$$: 4597-block  8
    $$$$$: 4597-block  9
call   19 never executed
    $$$$$: 4597-block 10
    #####: 4598:  OutputJsonKey(stream, kTestsuite, "tests", test_suite.reportable_test_count(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4598-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4598-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4598-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4598-block  3
call   12 never executed
    $$$$$: 4598-block  4
    $$$$$: 4598-block  5
call   13 never executed
    $$$$$: 4598-block  6
        -: 4599:                kIndent);
    #####: 4600:  if (!GTEST_FLAG(list_tests)) {
branch  0 never executed
branch  1 never executed
    #####: 4601:    OutputJsonKey(stream, kTestsuite, "failures",
    %%%%%: 4601-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4601-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4601-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4601-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4601-block  4
call   12 never executed
    $$$$$: 4601-block  5
    $$$$$: 4601-block  6
call   13 never executed
    $$$$$: 4601-block  7
        -: 4602:                  test_suite.failed_test_count(), kIndent);
    #####: 4603:    OutputJsonKey(stream, kTestsuite, "disabled",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4603-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4603-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4603-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4603-block  3
call   12 never executed
    $$$$$: 4603-block  4
    $$$$$: 4603-block  5
call   13 never executed
    $$$$$: 4603-block  6
        -: 4604:                  test_suite.reportable_disabled_test_count(), kIndent);
    #####: 4605:    OutputJsonKey(stream, kTestsuite, "errors", 0, kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4605-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4605-block  1
call    7 never executed
call    8 never executed
    $$$$$: 4605-block  2
call    9 never executed
    $$$$$: 4605-block  3
    $$$$$: 4605-block  4
call   10 never executed
    $$$$$: 4605-block  5
    #####: 4606:    OutputJsonKey(
    %%%%%: 4606-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4606-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4606-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4606-block  3
call    9 never executed
    $$$$$: 4606-block  4
    $$$$$: 4606-block  5
call   10 never executed
    $$$$$: 4606-block  6
        -: 4607:        stream, kTestsuite, "timestamp",
    #####: 4608:        FormatEpochTimeInMillisAsRFC3339(test_suite.start_timestamp()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4608-block  0
call    5 never executed
    $$$$$: 4608-block  1
        -: 4609:        kIndent);
    #####: 4610:    OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 4610-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4610-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4610-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4610-block  3
call    9 never executed
    $$$$$: 4610-block  4
    $$$$$: 4610-block  5
call   10 never executed
    $$$$$: 4610-block  6
    #####: 4611:                  FormatTimeInMillisAsDuration(test_suite.elapsed_time()),
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4611-block  0
call    5 never executed
    $$$$$: 4611-block  1
        -: 4612:                  kIndent, false);
    #####: 4613:    *stream << TestPropertiesAsJson(test_suite.ad_hoc_test_result(), kIndent)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4613-block  0
call    4 never executed
    $$$$$: 4613-block  1
call    5 never executed
    $$$$$: 4613-block  2
    #####: 4614:            << ",\n";
    %%%%%: 4614-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4614-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4615:  }
        -: 4616:
    #####: 4617:  *stream << kIndent << "\"" << kTestsuite << "\": [\n";
    %%%%%: 4617-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4617-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4617-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4617-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4618:
    #####: 4619:  bool comma = false;
    #####: 4620:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4620-block  0
    %%%%%: 4620-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4620-block  2
    #####: 4621:    if (test_suite.GetTestInfo(i)->is_reportable()) {
    %%%%%: 4621-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4621-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4622:      if (comma) {
    %%%%%: 4622-block  0
branch  0 never executed
branch  1 never executed
    #####: 4623:        *stream << ",\n";
    %%%%%: 4623-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4624:      } else {
    #####: 4625:        comma = true;
    %%%%%: 4625-block  0
        -: 4626:      }
    #####: 4627:      OutputJsonTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4627-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4627-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4628:    }
        -: 4629:  }
    #####: 4630:  *stream << "\n" << kIndent << "]\n" << Indent(4) << "}";
    %%%%%: 4630-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4630-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4630-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4630-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 4630-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 4630-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%: 4630-block  6
call   18 never executed
call   19 never executed
    $$$$$: 4630-block  7
call   20 never executed
    $$$$$: 4630-block  8
    #####: 4631:}
        -: 4632:
        -: 4633:// Prints a JSON summary of unit_test to output stream out.
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonUnitTestEPSoRKNS_8UnitTestE called 0 returned 0% blocks executed 0%
    #####: 4634:void JsonUnitTestResultPrinter::PrintJsonUnitTest(std::ostream* stream,
        -: 4635:                                                  const UnitTest& unit_test) {
    #####: 4636:  const std::string kTestsuites = "testsuites";
    %%%%%: 4636-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4636-block  1
    $$$$$: 4636-block  2
call    5 never executed
    #####: 4637:  const std::string kIndent = Indent(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4637-block  0
call    3 never executed
    $$$$$: 4637-block  1
call    4 never executed
    #####: 4638:  *stream << "{\n";
    %%%%%: 4638-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4639:
    #####: 4640:  OutputJsonKey(stream, kTestsuites, "tests", unit_test.reportable_test_count(),
    %%%%%: 4640-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4640-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4640-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4640-block  3
call   10 never executed
call   11 never executed
    $$$$$: 4640-block  4
call   12 never executed
    $$$$$: 4640-block  5
    $$$$$: 4640-block  6
call   13 never executed
    $$$$$: 4640-block  7
        -: 4641:                kIndent);
    #####: 4642:  OutputJsonKey(stream, kTestsuites, "failures", unit_test.failed_test_count(),
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4642-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4642-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4642-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4642-block  3
call   12 never executed
    $$$$$: 4642-block  4
    $$$$$: 4642-block  5
call   13 never executed
    $$$$$: 4642-block  6
        -: 4643:                kIndent);
    #####: 4644:  OutputJsonKey(stream, kTestsuites, "disabled",
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4644-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4644-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 4644-block  2
call   10 never executed
call   11 never executed
    $$$$$: 4644-block  3
call   12 never executed
    $$$$$: 4644-block  4
    $$$$$: 4644-block  5
call   13 never executed
    $$$$$: 4644-block  6
        -: 4645:                unit_test.reportable_disabled_test_count(), kIndent);
    #####: 4646:  OutputJsonKey(stream, kTestsuites, "errors", 0, kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4646-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4646-block  1
call    7 never executed
call    8 never executed
    $$$$$: 4646-block  2
call    9 never executed
    $$$$$: 4646-block  3
    $$$$$: 4646-block  4
call   10 never executed
    $$$$$: 4646-block  5
    #####: 4647:  if (GTEST_FLAG(shuffle)) {
branch  0 never executed
branch  1 never executed
    #####: 4648:    OutputJsonKey(stream, kTestsuites, "random_seed", unit_test.random_seed(),
    %%%%%: 4648-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4648-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4648-block  2
call    8 never executed
call    9 never executed
    $$$$$: 4648-block  3
call   10 never executed
    $$$$$: 4648-block  4
    $$$$$: 4648-block  5
call   11 never executed
    $$$$$: 4648-block  6
        -: 4649:                  kIndent);
        -: 4650:  }
    #####: 4651:  OutputJsonKey(stream, kTestsuites, "timestamp",
    %%%%%: 4651-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4651-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4651-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4651-block  3
call    9 never executed
    $$$$$: 4651-block  4
    $$$$$: 4651-block  5
call   10 never executed
    $$$$$: 4651-block  6
    #####: 4652:                FormatEpochTimeInMillisAsRFC3339(unit_test.start_timestamp()),
    %%%%%: 4652-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4652-block  1
call    5 never executed
    $$$$$: 4652-block  2
        -: 4653:                kIndent);
    #####: 4654:  OutputJsonKey(stream, kTestsuites, "time",
    %%%%%: 4654-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4654-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4654-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4654-block  3
call    9 never executed
    $$$$$: 4654-block  4
    $$$$$: 4654-block  5
call   10 never executed
    $$$$$: 4654-block  6
    #####: 4655:                FormatTimeInMillisAsDuration(unit_test.elapsed_time()), kIndent,
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4655-block  0
call    5 never executed
    $$$$$: 4655-block  1
        -: 4656:                false);
        -: 4657:
    #####: 4658:  *stream << TestPropertiesAsJson(unit_test.ad_hoc_test_result(), kIndent)
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4658-block  0
call    4 never executed
    $$$$$: 4658-block  1
call    5 never executed
    $$$$$: 4658-block  2
    #####: 4659:          << ",\n";
    %%%%%: 4659-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4659-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4660:
    #####: 4661:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4661-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4661-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4661-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4661-block  3
call   15 never executed
    $$$$$: 4661-block  4
    $$$$$: 4661-block  5
call   16 never executed
    $$$$$: 4661-block  6
    $$$$$: 4661-block  7
call   17 never executed
    $$$$$: 4661-block  8
    $$$$$: 4661-block  9
call   18 never executed
    $$$$$: 4661-block 10
    #####: 4662:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4662-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4662-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4662-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4663:
    #####: 4664:  bool comma = false;
    #####: 4665:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4665-block  0
    %%%%%: 4665-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4665-block  2
    #####: 4666:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0) {
    %%%%%: 4666-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4666-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4666-block  2
branch  6 never executed
branch  7 never executed
    #####: 4667:      if (comma) {
    %%%%%: 4667-block  0
branch  0 never executed
branch  1 never executed
    #####: 4668:        *stream << ",\n";
    %%%%%: 4668-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4669:      } else {
    #####: 4670:        comma = true;
    %%%%%: 4670-block  0
        -: 4671:      }
    #####: 4672:      PrintJsonTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4672-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4672-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4673:    }
        -: 4674:  }
        -: 4675:
    #####: 4676:  *stream << "\n" << kIndent << "]\n" << "}\n";
    %%%%%: 4676-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4676-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4676-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4676-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4677:}
        -: 4678:
function _ZN7testing8internal25JsonUnitTestResultPrinter17PrintJsonTestListEPSoRKSt6vectorIPNS_9TestSuiteESaIS5_EE called 0 returned 0% blocks executed 0%
    #####: 4679:void JsonUnitTestResultPrinter::PrintJsonTestList(
        -: 4680:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4681:  const std::string kTestsuites = "testsuites";
    %%%%%: 4681-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$: 4681-block  1
    $$$$$: 4681-block  2
call    5 never executed
    #####: 4682:  const std::string kIndent = Indent(2);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4682-block  0
call    3 never executed
    $$$$$: 4682-block  1
call    4 never executed
    #####: 4683:  *stream << "{\n";
    %%%%%: 4683-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4684:  int total_tests = 0;
    #####: 4685:  for (auto test_suite : test_suites) {
    %%%%%: 4685-block  0
call    0 never executed
call    1 never executed
    %%%%%: 4685-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 4685-block  2
call    5 never executed
    #####: 4686:    total_tests += test_suite->total_test_count();
call    0 never executed
call    1 never executed
        -: 4687:  }
    #####: 4688:  OutputJsonKey(stream, kTestsuites, "tests", total_tests, kIndent);
    %%%%%: 4688-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4688-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 4688-block  2
call    7 never executed
call    8 never executed
    $$$$$: 4688-block  3
call    9 never executed
    $$$$$: 4688-block  4
    $$$$$: 4688-block  5
call   10 never executed
    $$$$$: 4688-block  6
        -: 4689:
    #####: 4690:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4690-block  0
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4690-block  1
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4690-block  2
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$: 4690-block  3
call   15 never executed
    $$$$$: 4690-block  4
    $$$$$: 4690-block  5
call   16 never executed
    $$$$$: 4690-block  6
    $$$$$: 4690-block  7
call   17 never executed
    $$$$$: 4690-block  8
    $$$$$: 4690-block  9
call   18 never executed
    $$$$$: 4690-block 10
    #####: 4691:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4691-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4691-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4691-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4692:
    #####: 4693:  for (size_t i = 0; i < test_suites.size(); ++i) {
    %%%%%: 4693-block  0
    %%%%%: 4693-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4693-block  2
    #####: 4694:    if (i != 0) {
    %%%%%: 4694-block  0
branch  0 never executed
branch  1 never executed
    #####: 4695:      *stream << ",\n";
    %%%%%: 4695-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4696:    }
    #####: 4697:    PrintJsonTestSuite(stream, *test_suites[i]);
    %%%%%: 4697-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 4698:  }
        -: 4699:
        -: 4700:  *stream << "\n"
        -: 4701:          << kIndent << "]\n"
    #####: 4702:          << "}\n";
    %%%%%: 4702-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4702-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4702-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4702-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 4703:}
        -: 4704:// Produces a string representing the test properties in a result as
        -: 4705:// a JSON dictionary.
function _ZN7testing8internal25JsonUnitTestResultPrinter20TestPropertiesAsJsonERKNS_10TestResultERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 4706:std::string JsonUnitTestResultPrinter::TestPropertiesAsJson(
        -: 4707:    const TestResult& result, const std::string& indent) {
    #####: 4708:  Message attributes;
    %%%%%: 4708-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4708-block  1
call    3 never executed
    $$$$$: 4708-block  2
call    4 never executed
    #####: 4709:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4709-block  0
    %%%%%: 4709-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4710:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4710-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4711:    attributes << ",\n" << indent << "\"" << property.key() << "\": "
    %%%%%: 4711-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4711-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4711-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4711-block  3
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%: 4711-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    $$$$$: 4711-block  5
    #####: 4712:               << "\"" << EscapeJson(property.value()) << "\"";
    %%%%%: 4712-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4712-block  1
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 4712-block  2
call    8 never executed
branch  9 never executed
branch 10 never executed
    %%%%%: 4712-block  3
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%: 4712-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%: 4712-block  5
call   17 never executed
call   18 never executed
call   19 never executed
    $$$$$: 4712-block  6
call   20 never executed
    $$$$$: 4712-block  7
    $$$$$: 4712-block  8
call   21 never executed
    $$$$$: 4712-block  9
    $$$$$: 4712-block 10
call   22 never executed
    $$$$$: 4712-block 11
        -: 4713:  }
    #####: 4714:  return attributes.GetString();
    %%%%%: 4714-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4714-block  1
        -: 4715:}
        -: 4716:
        -: 4717:// End JsonUnitTestResultPrinter
        -: 4718:
        -: 4719:#if GTEST_CAN_STREAM_RESULTS_
        -: 4720:
        -: 4721:// Checks if str contains '=', '&', '%' or '\n' characters. If yes,
        -: 4722:// replaces them by "%xx" where xx is their hexadecimal value. For
        -: 4723:// example, replaces "=" with "%3D".  This algorithm is O(strlen(str))
        -: 4724:// in both time and space -- important as the input str may contain an
        -: 4725:// arbitrarily long test failure message and stack trace.
function _ZN7testing8internal17StreamingListener9UrlEncodeB5cxx11EPKc called 0 returned 0% blocks executed 0%
    #####: 4726:std::string StreamingListener::UrlEncode(const char* str) {
    #####: 4727:  std::string result;
    %%%%%: 4727-block  0
call    0 never executed
    #####: 4728:  result.reserve(strlen(str) + 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4729:  for (char ch = *str; ch != '\0'; ch = *++str) {
    %%%%%: 4729-block  0
    %%%%%: 4729-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 4729-block  2
    #####: 4730:    switch (ch) {
    %%%%%: 4730-block  0
branch  0 never executed
branch  1 never executed
    #####: 4731:      case '%':
        -: 4732:      case '=':
        -: 4733:      case '&':
        -: 4734:      case '\n':
    #####: 4735:        result.append("%" + String::FormatByte(static_cast<unsigned char>(ch)));
    %%%%%: 4735-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4735-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4735-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4735-block  3
call    9 never executed
call   10 never executed
    $$$$$: 4735-block  4
call   11 never executed
    $$$$$: 4735-block  5
    $$$$$: 4735-block  6
call   12 never executed
    $$$$$: 4735-block  7
    #####: 4736:        break;
    #####: 4737:      default:
    #####: 4738:        result.push_back(ch);
    %%%%%: 4738-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4739:        break;
    %%%%%: 4739-block  0
        -: 4740:    }
        -: 4741:  }
    #####: 4742:  return result;
    %%%%%: 4742-block  0
    %%%%%: 4742-block  1
        -: 4743:}
        -: 4744:
function _ZN7testing8internal17StreamingListener12SocketWriter14MakeConnectionEv called 0 returned 0% blocks executed 0%
    #####: 4745:void StreamingListener::SocketWriter::MakeConnection() {
    #####: 4746:  GTEST_CHECK_(sockfd_ == -1)
    %%%%%: 4746-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4746-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4746-block  2
call    6 never executed
    %%%%%: 4746-block  3
call    7 never executed
    $$$$$: 4746-block  4
call    8 never executed
    $$$$$: 4746-block  5
    #####: 4747:      << "MakeConnection() can't be called when there is already a connection.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4747-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 4748:
        -: 4749:  addrinfo hints;
    #####: 4750:  memset(&hints, 0, sizeof(hints));
    #####: 4751:  hints.ai_family = AF_UNSPEC;    // To allow both IPv4 and IPv6 addresses.
    #####: 4752:  hints.ai_socktype = SOCK_STREAM;
    #####: 4753:  addrinfo* servinfo = nullptr;
        -: 4754:
        -: 4755:  // Use the getaddrinfo() to get a linked list of IP addresses for
        -: 4756:  // the given host name.
    #####: 4757:  const int error_num = getaddrinfo(
    %%%%%: 4757-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -: 4758:      host_name_.c_str(), port_num_.c_str(), &hints, &servinfo);
    #####: 4759:  if (error_num != 0) {
    %%%%%: 4759-block  0
branch  0 never executed
branch  1 never executed
    #####: 4760:    GTEST_LOG_(WARNING) << "stream_result_to: getaddrinfo() failed: "
    %%%%%: 4760-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4760-block  1
call    3 never executed
    %%%%%: 4760-block  2
call    4 never executed
    $$$$$: 4760-block  3
call    5 never executed
    $$$$$: 4760-block  4
    #####: 4761:                        << gai_strerror(error_num);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4761-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 4762:  }
        -: 4763:
        -: 4764:  // Loop through all the results and connect to the first we can.
    #####: 4765:  for (addrinfo* cur_addr = servinfo; sockfd_ == -1 && cur_addr != nullptr;
    %%%%%: 4765-block  0
    %%%%%: 4765-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 4765-block  2
branch  2 never executed
branch  3 never executed
    #####: 4766:       cur_addr = cur_addr->ai_next) {
    %%%%%: 4766-block  0
    #####: 4767:    sockfd_ = socket(
    %%%%%: 4767-block  0
call    0 never executed
        -: 4768:        cur_addr->ai_family, cur_addr->ai_socktype, cur_addr->ai_protocol);
    #####: 4769:    if (sockfd_ != -1) {
branch  0 never executed
branch  1 never executed
        -: 4770:      // Connect the client socket to the server socket.
    #####: 4771:      if (connect(sockfd_, cur_addr->ai_addr, cur_addr->ai_addrlen) == -1) {
    %%%%%: 4771-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4771-block  1
branch  3 never executed
branch  4 never executed
    #####: 4772:        close(sockfd_);
    %%%%%: 4772-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4773:        sockfd_ = -1;
    %%%%%: 4773-block  0
        -: 4774:      }
        -: 4775:    }
        -: 4776:  }
        -: 4777:
    #####: 4778:  freeaddrinfo(servinfo);  // all done with this structure
    %%%%%: 4778-block  0
call    0 never executed
        -: 4779:
    #####: 4780:  if (sockfd_ == -1) {
branch  0 never executed
branch  1 never executed
    #####: 4781:    GTEST_LOG_(WARNING) << "stream_result_to: failed to connect to "
    %%%%%: 4781-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4781-block  1
call    3 never executed
    %%%%%: 4781-block  2
call    4 never executed
    $$$$$: 4781-block  3
call    5 never executed
    $$$$$: 4781-block  4
    #####: 4782:                        << host_name_ << ":" << port_num_;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4782-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 4782-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 4782-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
        -: 4783:  }
    #####: 4784:}
    %%%%%: 4784-block  0
        -: 4785:
        -: 4786:// End of class Streaming Listener
        -: 4787:#endif  // GTEST_CAN_STREAM_RESULTS__
        -: 4788:
        -: 4789:// class OsStackTraceGetter
        -: 4790:
        -: 4791:const char* const OsStackTraceGetterInterface::kElidedFramesMarker =
        -: 4792:    "... " GTEST_NAME_ " internal frames ...";
        -: 4793:
function _ZN7testing8internal18OsStackTraceGetter17CurrentStackTraceB5cxx11Eii called 0 returned 0% blocks executed 0%
    #####: 4794:std::string OsStackTraceGetter::CurrentStackTrace(int max_depth, int skip_count)
        -: 4795:    GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 4796:#if GTEST_HAS_ABSL
        -: 4797:  std::string result;
        -: 4798:
        -: 4799:  if (max_depth <= 0) {
        -: 4800:    return result;
        -: 4801:  }
        -: 4802:
        -: 4803:  max_depth = std::min(max_depth, kMaxStackTraceDepth);
        -: 4804:
        -: 4805:  std::vector<void*> raw_stack(max_depth);
        -: 4806:  // Skips the frames requested by the caller, plus this function.
        -: 4807:  const int raw_stack_size =
        -: 4808:      absl::GetStackTrace(&raw_stack[0], max_depth, skip_count + 1);
        -: 4809:
        -: 4810:  void* caller_frame = nullptr;
        -: 4811:  {
        -: 4812:    MutexLock lock(&mutex_);
        -: 4813:    caller_frame = caller_frame_;
        -: 4814:  }
        -: 4815:
        -: 4816:  for (int i = 0; i < raw_stack_size; ++i) {
        -: 4817:    if (raw_stack[i] == caller_frame &&
        -: 4818:        !GTEST_FLAG(show_internal_stack_frames)) {
        -: 4819:      // Add a marker to the trace and stop adding frames.
        -: 4820:      absl::StrAppend(&result, kElidedFramesMarker, "\n");
        -: 4821:      break;
        -: 4822:    }
        -: 4823:
        -: 4824:    char tmp[1024];
        -: 4825:    const char* symbol = "(unknown)";
        -: 4826:    if (absl::Symbolize(raw_stack[i], tmp, sizeof(tmp))) {
        -: 4827:      symbol = tmp;
        -: 4828:    }
        -: 4829:
        -: 4830:    char line[1024];
        -: 4831:    snprintf(line, sizeof(line), "  %p: %s\n", raw_stack[i], symbol);
        -: 4832:    result += line;
        -: 4833:  }
        -: 4834:
        -: 4835:  return result;
        -: 4836:
        -: 4837:#else  // !GTEST_HAS_ABSL
        -: 4838:  static_cast<void>(max_depth);
        -: 4839:  static_cast<void>(skip_count);
    #####: 4840:  return "";
    %%%%%: 4840-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 4840-block  1
call    4 never executed
    %%%%%: 4840-block  2
    $$$$$: 4840-block  3
call    5 never executed
        -: 4841:#endif  // GTEST_HAS_ABSL
        -: 4842:}
        -: 4843:
function _ZN7testing8internal18OsStackTraceGetter16UponLeavingGTestEv called 76 returned 100% blocks executed 100%
       76: 4844:void OsStackTraceGetter::UponLeavingGTest() GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 4845:#if GTEST_HAS_ABSL
        -: 4846:  void* caller_frame = nullptr;
        -: 4847:  if (absl::GetStackTrace(&caller_frame, 1, 3) <= 0) {
        -: 4848:    caller_frame = nullptr;
        -: 4849:  }
        -: 4850:
        -: 4851:  MutexLock lock(&mutex_);
        -: 4852:  caller_frame_ = caller_frame;
        -: 4853:#endif  // GTEST_HAS_ABSL
       76: 4854:}
        -: 4855:
        -: 4856:// A helper class that creates the premature-exit file in its
        -: 4857:// constructor and deletes the file in its destructor.
        -: 4858:class ScopedPrematureExitFile {
        -: 4859: public:
function _ZN7testing8internal23ScopedPrematureExitFileC2EPKc called 1 returned 100% blocks executed 53%
        1: 4860:  explicit ScopedPrematureExitFile(const char* premature_exit_filepath)
        1: 4861:      : premature_exit_filepath_(premature_exit_filepath ?
       1*: 4862:                                 premature_exit_filepath : "") {
        1: 4862-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 4862-block  1
        1: 4862-block  2
        1: 4862-block  3
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 4862-block  4
call    6 returned 1
    $$$$$: 4862-block  5
call    7 never executed
    $$$$$: 4862-block  6
call    8 never executed
    $$$$$: 4862-block  7
call    9 never executed
        -: 4863:    // If a path to the premature-exit file is specified...
        1: 4864:    if (!premature_exit_filepath_.empty()) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 4865:      // create the file with a single "0" character in it.  I/O
        -: 4866:      // errors are ignored as there's nothing better we can do and we
        -: 4867:      // don't want to fail the test because of this.
    #####: 4868:      FILE* pfile = posix::FOpen(premature_exit_filepath, "w");
    %%%%%: 4868-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4869:      fwrite("0", 1, 1, pfile);
    %%%%%: 4869-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4870:      fclose(pfile);
    %%%%%: 4870-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 4871:    }
        1: 4872:  }
        1: 4872-block  0
        -: 4873:
function _ZN7testing8internal23ScopedPrematureExitFileD2Ev called 1 returned 100% blocks executed 27%
        1: 4874:  ~ScopedPrematureExitFile() {
        1: 4874-block  0
call    0 returned 1
        -: 4875:#if !defined GTEST_OS_ESP8266
        1: 4876:    if (!premature_exit_filepath_.empty()) {
        1: 4876-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 4877:      int retval = remove(premature_exit_filepath_.c_str());
    %%%%%: 4877-block  0
call    0 never executed
call    1 never executed
    #####: 4878:      if (retval) {
branch  0 never executed
branch  1 never executed
    #####: 4879:        GTEST_LOG_(ERROR) << "Failed to remove premature exit filepath \""
    %%%%%: 4879-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 4880:                          << premature_exit_filepath_ << "\" with error "
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 4881:                          << retval;
call    0 never executed
        -: 4882:      }
        -: 4883:    }
        -: 4884:#endif
        1: 4885:  }
        -: 4886:
        -: 4887: private:
        -: 4888:  const std::string premature_exit_filepath_;
        -: 4889:
        -: 4890:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ScopedPrematureExitFile);
        -: 4891:};
        -: 4892:
        -: 4893:}  // namespace internal
        -: 4894:
        -: 4895:// class TestEventListeners
        -: 4896:
function _ZN7testing18TestEventListenersC2Ev called 1 returned 100% blocks executed 100%
        1: 4897:TestEventListeners::TestEventListeners()
        1: 4898:    : repeater_(new internal::TestEventRepeater()),
        1: 4898-block  0
call    0 returned 1
call    1 returned 1
        -: 4899:      default_result_printer_(nullptr),
        1: 4900:      default_xml_generator_(nullptr) {}
        -: 4901:
function _ZN7testing18TestEventListenersD2Ev called 1 returned 100% blocks executed 100%
        1: 4902:TestEventListeners::~TestEventListeners() { delete repeater_; }
        1: 4902-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 4902-block  1
call    2 returned 1
        -: 4903:
        -: 4904:// Returns the standard listener responsible for the default console
        -: 4905:// output.  Can be removed from the listeners list to shut down default
        -: 4906:// console output.  Note that removing this object from the listener list
        -: 4907:// with Release transfers its ownership to the user.
function _ZN7testing18TestEventListeners6AppendEPNS_17TestEventListenerE called 1 returned 100% blocks executed 100%
        1: 4908:void TestEventListeners::Append(TestEventListener* listener) {
        1: 4909:  repeater_->Append(listener);
        1: 4909-block  0
call    0 returned 1
        1: 4910:}
        -: 4911:
        -: 4912:// Removes the given event listener from the list and returns it.  It then
        -: 4913:// becomes the caller's responsibility to delete the listener. Returns
        -: 4914:// NULL if the listener is not found in the list.
function _ZN7testing18TestEventListeners7ReleaseEPNS_17TestEventListenerE called 1 returned 100% blocks executed 71%
        1: 4915:TestEventListener* TestEventListeners::Release(TestEventListener* listener) {
        1: 4916:  if (listener == default_result_printer_)
        1: 4916-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 4917:    default_result_printer_ = nullptr;
        1: 4917-block  0
    #####: 4918:  else if (listener == default_xml_generator_)
    %%%%%: 4918-block  0
branch  0 never executed
branch  1 never executed
    #####: 4919:    default_xml_generator_ = nullptr;
    %%%%%: 4919-block  0
        1: 4920:  return repeater_->Release(listener);
        1: 4920-block  0
call    0 returned 1
        -: 4921:}
        -: 4922:
        -: 4923:// Returns repeater that broadcasts the TestEventListener events to all
        -: 4924:// subscribers.
function _ZN7testing18TestEventListeners8repeaterEv called 21 returned 100% blocks executed 100%
       21: 4925:TestEventListener* TestEventListeners::repeater() { return repeater_; }
       21: 4925-block  0
        -: 4926:
        -: 4927:// Sets the default_result_printer attribute to the provided listener.
        -: 4928:// The listener is also added to the listener list and previous
        -: 4929:// default_result_printer is removed from it and deleted. The listener can
        -: 4930:// also be NULL in which case it will not be added to the list. Does
        -: 4931:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners23SetDefaultResultPrinterEPNS_17TestEventListenerE called 1 returned 100% blocks executed 86%
        1: 4932:void TestEventListeners::SetDefaultResultPrinter(TestEventListener* listener) {
        1: 4933:  if (default_result_printer_ != listener) {
        1: 4933-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 4934:    // It is an error to pass this method a listener that is already in the
        -: 4935:    // list.
       1*: 4936:    delete Release(default_result_printer_);
        1: 4936-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 4936-block  1
call    3 never executed
        1: 4937:    default_result_printer_ = listener;
        1: 4938:    if (listener != nullptr) Append(listener);
        1: 4938-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 4938-block  1
call    2 returned 1
        -: 4939:  }
        1: 4940:}
        -: 4941:
        -: 4942:// Sets the default_xml_generator attribute to the provided listener.  The
        -: 4943:// listener is also added to the listener list and previous
        -: 4944:// default_xml_generator is removed from it and deleted. The listener can
        -: 4945:// also be NULL in which case it will not be added to the list. Does
        -: 4946:// nothing if the previous and the current listener objects are the same.
function _ZN7testing18TestEventListeners22SetDefaultXmlGeneratorEPNS_17TestEventListenerE called 0 returned 0% blocks executed 0%
    #####: 4947:void TestEventListeners::SetDefaultXmlGenerator(TestEventListener* listener) {
    #####: 4948:  if (default_xml_generator_ != listener) {
    %%%%%: 4948-block  0
branch  0 never executed
branch  1 never executed
        -: 4949:    // It is an error to pass this method a listener that is already in the
        -: 4950:    // list.
    #####: 4951:    delete Release(default_xml_generator_);
    %%%%%: 4951-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 4951-block  1
call    3 never executed
    #####: 4952:    default_xml_generator_ = listener;
    #####: 4953:    if (listener != nullptr) Append(listener);
    %%%%%: 4953-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 4953-block  1
call    2 never executed
        -: 4954:  }
    #####: 4955:}
        -: 4956:
        -: 4957:// Controls whether events will be forwarded by the repeater to the
        -: 4958:// listeners in the list.
function _ZNK7testing18TestEventListeners22EventForwardingEnabledEv called 0 returned 0% blocks executed 0%
    #####: 4959:bool TestEventListeners::EventForwardingEnabled() const {
    #####: 4960:  return repeater_->forwarding_enabled();
    %%%%%: 4960-block  0
call    0 never executed
        -: 4961:}
        -: 4962:
function _ZN7testing18TestEventListeners23SuppressEventForwardingEv called 0 returned 0% blocks executed 0%
    #####: 4963:void TestEventListeners::SuppressEventForwarding() {
    #####: 4964:  repeater_->set_forwarding_enabled(false);
    %%%%%: 4964-block  0
call    0 never executed
    #####: 4965:}
        -: 4966:
        -: 4967:// class UnitTest
        -: 4968:
        -: 4969:// Gets the singleton UnitTest object.  The first time this method is
        -: 4970:// called, a UnitTest object is constructed and returned.  Consecutive
        -: 4971:// calls will return the same object.
        -: 4972://
        -: 4973:// We don't protect this under mutex_ as a user is not supposed to
        -: 4974:// call this before main() starts, from which point on the return
        -: 4975:// value will never change.
function _ZN7testing8UnitTest11GetInstanceEv called 206 returned 100% blocks executed 82%
      206: 4976:UnitTest* UnitTest::GetInstance() {
        -: 4977:  // CodeGear C++Builder insists on a public destructor for the
        -: 4978:  // default implementation.  Use this implementation to keep good OO
        -: 4979:  // design with private destructor.
        -: 4980:
        -: 4981:#if defined(__BORLANDC__)
        -: 4982:  static UnitTest* const instance = new UnitTest;
        -: 4983:  return instance;
        -: 4984:#else
      206: 4985:  static UnitTest instance;
      206: 4985-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 205
        1: 4985-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 4985-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 4985-block  3
call    8 returned 1
call    9 returned 1
    $$$$$: 4985-block  4
branch 10 never executed
branch 11 never executed
    $$$$$: 4985-block  5
call   12 never executed
      206: 4986:  return &instance;
      206: 4986-block  0
      206: 4986-block  1
        -: 4987:#endif  // defined(__BORLANDC__)
        -: 4988:}
        -: 4989:
        -: 4990:// Gets the number of successful test suites.
function _ZNK7testing8UnitTest27successful_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 4991:int UnitTest::successful_test_suite_count() const {
    #####: 4992:  return impl()->successful_test_suite_count();
    %%%%%: 4992-block  0
call    0 never executed
call    1 never executed
        -: 4993:}
        -: 4994:
        -: 4995:// Gets the number of failed test suites.
function _ZNK7testing8UnitTest23failed_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 4996:int UnitTest::failed_test_suite_count() const {
    #####: 4997:  return impl()->failed_test_suite_count();
    %%%%%: 4997-block  0
call    0 never executed
call    1 never executed
        -: 4998:}
        -: 4999:
        -: 5000:// Gets the number of all test suites.
function _ZNK7testing8UnitTest22total_test_suite_countEv called 0 returned 0% blocks executed 0%
    #####: 5001:int UnitTest::total_test_suite_count() const {
    #####: 5002:  return impl()->total_test_suite_count();
    %%%%%: 5002-block  0
call    0 never executed
call    1 never executed
        -: 5003:}
        -: 5004:
        -: 5005:// Gets the number of all test suites that contain at least one test
        -: 5006:// that should run.
function _ZNK7testing8UnitTest23test_suite_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 5007:int UnitTest::test_suite_to_run_count() const {
        2: 5008:  return impl()->test_suite_to_run_count();
        2: 5008-block  0
call    0 returned 2
call    1 returned 2
        -: 5009:}
        -: 5010:
        -: 5011://  Legacy API is deprecated but still available
        -: 5012:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest26successful_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5013:int UnitTest::successful_test_case_count() const {
    #####: 5014:  return impl()->successful_test_suite_count();
    %%%%%: 5014-block  0
call    0 never executed
call    1 never executed
        -: 5015:}
function _ZNK7testing8UnitTest22failed_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5016:int UnitTest::failed_test_case_count() const {
    #####: 5017:  return impl()->failed_test_suite_count();
    %%%%%: 5017-block  0
call    0 never executed
call    1 never executed
        -: 5018:}
function _ZNK7testing8UnitTest21total_test_case_countEv called 0 returned 0% blocks executed 0%
    #####: 5019:int UnitTest::total_test_case_count() const {
    #####: 5020:  return impl()->total_test_suite_count();
    %%%%%: 5020-block  0
call    0 never executed
call    1 never executed
        -: 5021:}
function _ZNK7testing8UnitTest22test_case_to_run_countEv called 0 returned 0% blocks executed 0%
    #####: 5022:int UnitTest::test_case_to_run_count() const {
    #####: 5023:  return impl()->test_suite_to_run_count();
    %%%%%: 5023-block  0
call    0 never executed
call    1 never executed
        -: 5024:}
        -: 5025:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5026:
        -: 5027:// Gets the number of successful tests.
function _ZNK7testing8UnitTest21successful_test_countEv called 1 returned 100% blocks executed 100%
        1: 5028:int UnitTest::successful_test_count() const {
        1: 5029:  return impl()->successful_test_count();
        1: 5029-block  0
call    0 returned 1
call    1 returned 1
        -: 5030:}
        -: 5031:
        -: 5032:// Gets the number of skipped tests.
function _ZNK7testing8UnitTest18skipped_test_countEv called 1 returned 100% blocks executed 100%
        1: 5033:int UnitTest::skipped_test_count() const {
        1: 5034:  return impl()->skipped_test_count();
        1: 5034-block  0
call    0 returned 1
call    1 returned 1
        -: 5035:}
        -: 5036:
        -: 5037:// Gets the number of failed tests.
function _ZNK7testing8UnitTest17failed_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5038:int UnitTest::failed_test_count() const { return impl()->failed_test_count(); }
    %%%%%: 5038-block  0
call    0 never executed
call    1 never executed
        -: 5039:
        -: 5040:// Gets the number of disabled tests that will be reported in the XML report.
function _ZNK7testing8UnitTest30reportable_disabled_test_countEv called 1 returned 100% blocks executed 100%
        1: 5041:int UnitTest::reportable_disabled_test_count() const {
        1: 5042:  return impl()->reportable_disabled_test_count();
        1: 5042-block  0
call    0 returned 1
call    1 returned 1
        -: 5043:}
        -: 5044:
        -: 5045:// Gets the number of disabled tests.
function _ZNK7testing8UnitTest19disabled_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5046:int UnitTest::disabled_test_count() const {
    #####: 5047:  return impl()->disabled_test_count();
    %%%%%: 5047-block  0
call    0 never executed
call    1 never executed
        -: 5048:}
        -: 5049:
        -: 5050:// Gets the number of tests to be printed in the XML report.
function _ZNK7testing8UnitTest21reportable_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5051:int UnitTest::reportable_test_count() const {
    #####: 5052:  return impl()->reportable_test_count();
    %%%%%: 5052-block  0
call    0 never executed
call    1 never executed
        -: 5053:}
        -: 5054:
        -: 5055:// Gets the number of all tests.
function _ZNK7testing8UnitTest16total_test_countEv called 0 returned 0% blocks executed 0%
    #####: 5056:int UnitTest::total_test_count() const { return impl()->total_test_count(); }
    %%%%%: 5056-block  0
call    0 never executed
call    1 never executed
        -: 5057:
        -: 5058:// Gets the number of tests that should run.
function _ZNK7testing8UnitTest17test_to_run_countEv called 2 returned 100% blocks executed 100%
        2: 5059:int UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }
        2: 5059-block  0
call    0 returned 2
call    1 returned 2
        -: 5060:
        -: 5061:// Gets the time of the test program start, in ms from the start of the
        -: 5062:// UNIX epoch.
function _ZNK7testing8UnitTest15start_timestampEv called 0 returned 0% blocks executed 0%
    #####: 5063:internal::TimeInMillis UnitTest::start_timestamp() const {
    #####: 5064:    return impl()->start_timestamp();
    %%%%%: 5064-block  0
call    0 never executed
call    1 never executed
        -: 5065:}
        -: 5066:
        -: 5067:// Gets the elapsed time, in milliseconds.
function _ZNK7testing8UnitTest12elapsed_timeEv called 1 returned 100% blocks executed 100%
        1: 5068:internal::TimeInMillis UnitTest::elapsed_time() const {
        1: 5069:  return impl()->elapsed_time();
        1: 5069-block  0
call    0 returned 1
call    1 returned 1
        -: 5070:}
        -: 5071:
        -: 5072:// Returns true if and only if the unit test passed (i.e. all test suites
        -: 5073:// passed).
function _ZNK7testing8UnitTest6PassedEv called 1 returned 100% blocks executed 100%
        1: 5074:bool UnitTest::Passed() const { return impl()->Passed(); }
        1: 5074-block  0
call    0 returned 1
call    1 returned 1
        -: 5075:
        -: 5076:// Returns true if and only if the unit test failed (i.e. some test suite
        -: 5077:// failed or something outside of all tests failed).
function _ZNK7testing8UnitTest6FailedEv called 0 returned 0% blocks executed 0%
    #####: 5078:bool UnitTest::Failed() const { return impl()->Failed(); }
    %%%%%: 5078-block  0
call    0 never executed
call    1 never executed
        -: 5079:
        -: 5080:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5081:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZNK7testing8UnitTest12GetTestSuiteEi called 0 returned 0% blocks executed 0%
    #####: 5082:const TestSuite* UnitTest::GetTestSuite(int i) const {
    #####: 5083:  return impl()->GetTestSuite(i);
    %%%%%: 5083-block  0
call    0 never executed
call    1 never executed
        -: 5084:}
        -: 5085:
        -: 5086://  Legacy API is deprecated but still available
        -: 5087:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest11GetTestCaseEi called 0 returned 0% blocks executed 0%
    #####: 5088:const TestCase* UnitTest::GetTestCase(int i) const {
    #####: 5089:  return impl()->GetTestCase(i);
    %%%%%: 5089-block  0
call    0 never executed
call    1 never executed
        -: 5090:}
        -: 5091:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5092:
        -: 5093:// Returns the TestResult containing information on test failures and
        -: 5094:// properties logged outside of individual test suites.
function _ZNK7testing8UnitTest18ad_hoc_test_resultEv called 0 returned 0% blocks executed 0%
    #####: 5095:const TestResult& UnitTest::ad_hoc_test_result() const {
    #####: 5096:  return *impl()->ad_hoc_test_result();
    %%%%%: 5096-block  0
call    0 never executed
call    1 never executed
        -: 5097:}
        -: 5098:
        -: 5099:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5100:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
function _ZN7testing8UnitTest19GetMutableTestSuiteEi called 0 returned 0% blocks executed 0%
    #####: 5101:TestSuite* UnitTest::GetMutableTestSuite(int i) {
    #####: 5102:  return impl()->GetMutableSuiteCase(i);
    %%%%%: 5102-block  0
call    0 never executed
call    1 never executed
        -: 5103:}
        -: 5104:
        -: 5105:// Returns the list of event listeners that can be used to track events
        -: 5106:// inside Google Test.
function _ZN7testing8UnitTest9listenersEv called 20 returned 100% blocks executed 100%
       20: 5107:TestEventListeners& UnitTest::listeners() {
       20: 5108:  return *impl()->listeners();
       20: 5108-block  0
call    0 returned 20
call    1 returned 20
        -: 5109:}
        -: 5110:
        -: 5111:// Registers and returns a global test environment.  When a test
        -: 5112:// program is run, all global test environments will be set-up in the
        -: 5113:// order they were registered.  After all tests in the program have
        -: 5114:// finished, all global test environments will be torn-down in the
        -: 5115:// *reverse* order they were registered.
        -: 5116://
        -: 5117:// The UnitTest object takes ownership of the given environment.
        -: 5118://
        -: 5119:// We don't protect this under mutex_, as we only support calling it
        -: 5120:// from the main thread.
function _ZN7testing8UnitTest14AddEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5121:Environment* UnitTest::AddEnvironment(Environment* env) {
    #####: 5122:  if (env == nullptr) {
    %%%%%: 5122-block  0
branch  0 never executed
branch  1 never executed
    #####: 5123:    return nullptr;
    %%%%%: 5123-block  0
        -: 5124:  }
        -: 5125:
    #####: 5126:  impl_->environments().push_back(env);
    %%%%%: 5126-block  0
call    0 never executed
call    1 never executed
    #####: 5127:  return env;
        -: 5128:}
        -: 5129:
        -: 5130:// Adds a TestPartResult to the current TestResult object.  All Google Test
        -: 5131:// assertion macros (e.g. ASSERT_TRUE, EXPECT_EQ, etc) eventually call
        -: 5132:// this to report their results.  The user code should use the
        -: 5133:// assertion macros instead of calling this directly.
function _ZN7testing8UnitTest17AddTestPartResultENS_14TestPartResult4TypeEPKciRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESC_ called 0 returned 0% blocks executed 0%
    #####: 5134:void UnitTest::AddTestPartResult(
        -: 5135:    TestPartResult::Type result_type,
        -: 5136:    const char* file_name,
        -: 5137:    int line_number,
        -: 5138:    const std::string& message,
        -: 5139:    const std::string& os_stack_trace) GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5140:  Message msg;
    %%%%%: 5140-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 5140-block  1
call    4 never executed
    #####: 5141:  msg << message;
    %%%%%: 5141-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5142:
    #####: 5143:  internal::MutexLock lock(&mutex_);
    %%%%%: 5143-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 5143-block  1
call    4 never executed
    #####: 5144:  if (impl_->gtest_trace_stack().size() > 0) {
    %%%%%: 5144-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5144-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5145:    msg << "\n" << GTEST_NAME_ << " trace:";
    %%%%%: 5145-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5145-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5145-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5146:
    #####: 5147:    for (size_t i = impl_->gtest_trace_stack().size(); i > 0; --i) {
    %%%%%: 5147-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5147-block  1
call    3 never executed
    %%%%%: 5147-block  2
branch  4 never executed
branch  5 never executed
    #####: 5148:      const internal::TraceInfo& trace = impl_->gtest_trace_stack()[i - 1];
    %%%%%: 5148-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5148-block  1
call    3 never executed
    #####: 5149:      msg << "\n" << internal::FormatFileLocation(trace.file, trace.line)
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5149-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5149-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5149-block  2
call    9 never executed
    $$$$$: 5149-block  3
call   10 never executed
    $$$$$: 5149-block  4
    #####: 5150:          << " " << trace.message;
    %%%%%: 5150-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5150-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5151:    }
        -: 5152:  }
        -: 5153:
    #####: 5154:  if (os_stack_trace.c_str() != nullptr && !os_stack_trace.empty()) {
    %%%%%: 5154-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5154-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5154-block  2
    %%%%%: 5154-block  3
    %%%%%: 5154-block  4
branch  6 never executed
branch  7 never executed
    #####: 5155:    msg << internal::kStackTraceMarker << os_stack_trace;
    %%%%%: 5155-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5155-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 5156:  }
        -: 5157:
        -: 5158:  const TestPartResult result = TestPartResult(
    #####: 5159:      result_type, file_name, line_number, msg.GetString().c_str());
    %%%%%: 5159-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5159-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5159-block  2
call    7 never executed
    $$$$$: 5159-block  3
    $$$$$: 5159-block  4
call    8 never executed
    #####: 5160:  impl_->GetTestPartResultReporterForCurrentThread()->
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5161:      ReportTestPartResult(result);
    %%%%%: 5161-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5162:
    #####: 5163:  if (result_type != TestPartResult::kSuccess &&
    %%%%%: 5163-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5163-block  1
branch  2 never executed
branch  3 never executed
        -: 5164:      result_type != TestPartResult::kSkip) {
        -: 5165:    // gtest_break_on_failure takes precedence over
        -: 5166:    // gtest_throw_on_failure.  This allows a user to set the latter
        -: 5167:    // in the code (perhaps in order to use Google Test assertions
        -: 5168:    // with another testing framework) and specify the former on the
        -: 5169:    // command line for debugging.
    #####: 5170:    if (GTEST_FLAG(break_on_failure)) {
    %%%%%: 5170-block  0
branch  0 never executed
branch  1 never executed
        -: 5171:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 5172:      // Using DebugBreak on Windows allows gtest to still break into a debugger
        -: 5173:      // when a failure happens and both the --gtest_break_on_failure and
        -: 5174:      // the --gtest_catch_exceptions flags are specified.
        -: 5175:      DebugBreak();
        -: 5176:#elif (!defined(__native_client__)) &&            \
        -: 5177:    ((defined(__clang__) || defined(__GNUC__)) && \
        -: 5178:     (defined(__x86_64__) || defined(__i386__)))
        -: 5179:      // with clang/gcc we can achieve the same effect on x86 by invoking int3
    #####: 5180:      asm("int3");
    %%%%%: 5180-block  0
call    0 never executed
        -: 5181:#else
        -: 5182:      // Dereference nullptr through a volatile pointer to prevent the compiler
        -: 5183:      // from removing. We use this rather than abort() or __builtin_trap() for
        -: 5184:      // portability: some debuggers don't correctly trap abort().
        -: 5185:      *static_cast<volatile int*>(nullptr) = 1;
        -: 5186:#endif  // GTEST_OS_WINDOWS
    #####: 5187:    } else if (GTEST_FLAG(throw_on_failure)) {
    %%%%%: 5187-block  0
branch  0 never executed
branch  1 never executed
        -: 5188:#if GTEST_HAS_EXCEPTIONS
    #####: 5189:      throw internal::GoogleTestFailureException(result);
    %%%%%: 5189-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5189-block  1
call    4 never executed
    $$$$$: 5189-block  2
call    5 never executed
        -: 5190:#else
        -: 5191:      // We cannot call abort() as it generates a pop-up in debug mode
        -: 5192:      // that cannot be suppressed in VC 7.1 or below.
        -: 5193:      exit(1);
        -: 5194:#endif
        -: 5195:    }
        -: 5196:  }
    #####: 5197:}
        -: 5198:
        -: 5199:// Adds a TestProperty to the current TestResult object when invoked from
        -: 5200:// inside a test, to current TestSuite's ad_hoc_test_result_ when invoked
        -: 5201:// from SetUpTestSuite or TearDownTestSuite, or to the global property set
        -: 5202:// when invoked elsewhere.  If the result already contains a property with
        -: 5203:// the same key, the value will be updated.
function _ZN7testing8UnitTest14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_ called 0 returned 0% blocks executed 0%
    #####: 5204:void UnitTest::RecordProperty(const std::string& key,
        -: 5205:                              const std::string& value) {
    #####: 5206:  impl_->RecordProperty(TestProperty(key, value));
    %%%%%: 5206-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5206-block  1
call    4 never executed
    $$$$$: 5206-block  2
call    5 never executed
    #####: 5207:}
        -: 5208:
        -: 5209:// Runs all tests in this UnitTest object and prints the result.
        -: 5210:// Returns 0 if successful, or 1 otherwise.
        -: 5211://
        -: 5212:// We don't protect this under mutex_, as we only support calling it
        -: 5213:// from the main thread.
function _ZN7testing8UnitTest3RunEv called 1 returned 100% blocks executed 78%
        1: 5214:int UnitTest::Run() {
        -: 5215:  const bool in_death_test_child_process =
        1: 5216:      internal::GTEST_FLAG(internal_run_death_test).length() > 0;
        1: 5216-block  0
call    0 returned 1
        -: 5217:
        -: 5218:  // Google Test implements this protocol for catching that a test
        -: 5219:  // program exits before returning control to Google Test:
        -: 5220:  //
        -: 5221:  //   1. Upon start, Google Test creates a file whose absolute path
        -: 5222:  //      is specified by the environment variable
        -: 5223:  //      TEST_PREMATURE_EXIT_FILE.
        -: 5224:  //   2. When Google Test has finished its work, it deletes the file.
        -: 5225:  //
        -: 5226:  // This allows a test runner to set TEST_PREMATURE_EXIT_FILE before
        -: 5227:  // running a Google-Test-based test program and check the existence
        -: 5228:  // of the file at the end of the test execution to see if it has
        -: 5229:  // exited prematurely.
        -: 5230:
        -: 5231:  // If we are in the child process of a death test, don't
        -: 5232:  // create/delete the premature exit file, as doing so is unnecessary
        -: 5233:  // and will confuse the parent process.  Otherwise, create/delete
        -: 5234:  // the file upon entering/leaving this function.  If the program
        -: 5235:  // somehow exits before this function has a chance to return, the
        -: 5236:  // premature-exit file will be left undeleted, causing a test runner
        -: 5237:  // that understands the premature-exit-file protocol to report the
        -: 5238:  // test as having failed.
        -: 5239:  const internal::ScopedPrematureExitFile premature_exit_file(
        -: 5240:      in_death_test_child_process
        -: 5241:          ? nullptr
       1*: 5242:          : internal::posix::GetEnv("TEST_PREMATURE_EXIT_FILE"));
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5242-block  0
        1: 5242-block  1
call    2 returned 1
        1: 5242-block  2
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 5242-block  3
call    6 never executed
        -: 5243:
        -: 5244:  // Captures the value of GTEST_FLAG(catch_exceptions).  This value will be
        -: 5245:  // used for the duration of the program.
        1: 5246:  impl()->set_catch_exceptions(GTEST_FLAG(catch_exceptions));
        1: 5246-block  0
call    0 returned 1
call    1 returned 1
        -: 5247:
        -: 5248:#if GTEST_OS_WINDOWS
        -: 5249:  // Either the user wants Google Test to catch exceptions thrown by the
        -: 5250:  // tests or this is executing in the context of death test child
        -: 5251:  // process. In either case the user does not want to see pop-up dialogs
        -: 5252:  // about crashes - they are expected.
        -: 5253:  if (impl()->catch_exceptions() || in_death_test_child_process) {
        -: 5254:# if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 5255:    // SetErrorMode doesn't exist on CE.
        -: 5256:    SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOALIGNMENTFAULTEXCEPT |
        -: 5257:                 SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX);
        -: 5258:# endif  // !GTEST_OS_WINDOWS_MOBILE
        -: 5259:
        -: 5260:# if (defined(_MSC_VER) || GTEST_OS_WINDOWS_MINGW) && !GTEST_OS_WINDOWS_MOBILE
        -: 5261:    // Death test children can be terminated with _abort().  On Windows,
        -: 5262:    // _abort() can show a dialog with a warning message.  This forces the
        -: 5263:    // abort message to go to stderr instead.
        -: 5264:    _set_error_mode(_OUT_TO_STDERR);
        -: 5265:# endif
        -: 5266:
        -: 5267:# if defined(_MSC_VER) && !GTEST_OS_WINDOWS_MOBILE
        -: 5268:    // In the debug version, Visual Studio pops up a separate dialog
        -: 5269:    // offering a choice to debug the aborted program. We need to suppress
        -: 5270:    // this dialog or it will pop up for every EXPECT/ASSERT_DEATH statement
        -: 5271:    // executed. Google Test will notify the user of any unexpected
        -: 5272:    // failure via stderr.
        -: 5273:    if (!GTEST_FLAG(break_on_failure))
        -: 5274:      _set_abort_behavior(
        -: 5275:          0x0,                                    // Clear the following flags:
        -: 5276:          _WRITE_ABORT_MSG | _CALL_REPORTFAULT);  // pop-up window, core dump.
        -: 5277:
        -: 5278:    // In debug mode, the Windows CRT can crash with an assertion over invalid
        -: 5279:    // input (e.g. passing an invalid file descriptor).  The default handling
        -: 5280:    // for these assertions is to pop up a dialog and wait for user input.
        -: 5281:    // Instead ask the CRT to dump such assertions to stderr non-interactively.
        -: 5282:    if (!IsDebuggerPresent()) {
        -: 5283:      (void)_CrtSetReportMode(_CRT_ASSERT,
        -: 5284:                              _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);
        -: 5285:      (void)_CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);
        -: 5286:    }
        -: 5287:# endif
        -: 5288:  }
        -: 5289:#endif  // GTEST_OS_WINDOWS
        -: 5290:
        1: 5291:  return internal::HandleExceptionsInMethodIfSupported(
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        -: 5292:      impl(),
        -: 5293:      &internal::UnitTestImpl::RunAllTests,
       2*: 5294:      "auxiliary test code (environments or event listeners)") ? 0 : 1;
        1: 5294-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5294-block  1
    %%%%%: 5294-block  2
        1: 5294-block  3
call    2 returned 1
        1: 5294-block  4
        -: 5295:}
        -: 5296:
        -: 5297:// Returns the working directory when the first TEST() or TEST_F() was
        -: 5298:// executed.
function _ZNK7testing8UnitTest20original_working_dirEv called 0 returned 0% blocks executed 0%
    #####: 5299:const char* UnitTest::original_working_dir() const {
    #####: 5300:  return impl_->original_working_dir_.c_str();
    %%%%%: 5300-block  0
call    0 never executed
        -: 5301:}
        -: 5302:
        -: 5303:// Returns the TestSuite object for the test that's currently running,
        -: 5304:// or NULL if no test is running.
function _ZNK7testing8UnitTest18current_test_suiteEv called 0 returned 0% blocks executed 0%
    #####: 5305:const TestSuite* UnitTest::current_test_suite() const
        -: 5306:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5307:  internal::MutexLock lock(&mutex_);
    %%%%%: 5307-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5308:  return impl_->current_test_suite();
    %%%%%: 5308-block  0
call    0 never executed
    %%%%%: 5308-block  1
        -: 5309:}
        -: 5310:
        -: 5311:// Legacy API is still available but deprecated
        -: 5312:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
function _ZNK7testing8UnitTest17current_test_caseEv called 0 returned 0% blocks executed 0%
    #####: 5313:const TestCase* UnitTest::current_test_case() const
        -: 5314:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5315:  internal::MutexLock lock(&mutex_);
    %%%%%: 5315-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5316:  return impl_->current_test_suite();
    %%%%%: 5316-block  0
call    0 never executed
    %%%%%: 5316-block  1
        -: 5317:}
        -: 5318:#endif
        -: 5319:
        -: 5320:// Returns the TestInfo object for the test that's currently running,
        -: 5321:// or NULL if no test is running.
function _ZNK7testing8UnitTest17current_test_infoEv called 0 returned 0% blocks executed 0%
    #####: 5322:const TestInfo* UnitTest::current_test_info() const
        -: 5323:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5324:  internal::MutexLock lock(&mutex_);
    %%%%%: 5324-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    #####: 5325:  return impl_->current_test_info();
    %%%%%: 5325-block  0
call    0 never executed
    %%%%%: 5325-block  1
        -: 5326:}
        -: 5327:
        -: 5328:// Returns the random seed used at the start of the current test run.
function _ZNK7testing8UnitTest11random_seedEv called 0 returned 0% blocks executed 0%
    #####: 5329:int UnitTest::random_seed() const { return impl_->random_seed(); }
    %%%%%: 5329-block  0
call    0 never executed
        -: 5330:
        -: 5331:// Returns ParameterizedTestSuiteRegistry object used to keep track of
        -: 5332:// value-parameterized tests and instantiate and register them.
        -: 5333:internal::ParameterizedTestSuiteRegistry&
function _ZN7testing8UnitTest27parameterized_test_registryEv called 0 returned 0% blocks executed 0%
    #####: 5334:UnitTest::parameterized_test_registry() GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5335:  return impl_->parameterized_test_registry();
    %%%%%: 5335-block  0
call    0 never executed
        -: 5336:}
        -: 5337:
        -: 5338:// Creates an empty UnitTest.
function _ZN7testing8UnitTestC2Ev called 1 returned 100% blocks executed 62%
        1: 5339:UnitTest::UnitTest() {
        1: 5339-block  0
call    0 returned 1
    $$$$$: 5339-block  1
call    1 never executed
        1: 5340:  impl_ = new internal::UnitTestImpl(this);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5340-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 5340-block  1
call    6 never executed
        1: 5341:}
        1: 5341-block  0
        -: 5342:
        -: 5343:// Destructor of UnitTest.
       1*: 5344:UnitTest::~UnitTest() {
        1: 5345:  delete impl_;
       1*: 5346:}
------------------
_ZN7testing8UnitTestD0Ev:
function _ZN7testing8UnitTestD0Ev called 0 returned 0% blocks executed 0%
    #####: 5344:UnitTest::~UnitTest() {
        -: 5345:  delete impl_;
    #####: 5346:}
    %%%%%: 5346-block  0
call    0 never executed
call    1 never executed
------------------
_ZN7testing8UnitTestD2Ev:
function _ZN7testing8UnitTestD2Ev called 1 returned 100% blocks executed 100%
        1: 5344:UnitTest::~UnitTest() {
        1: 5344-block  0
call    0 returned 1
        1: 5345:  delete impl_;
        1: 5345-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5345-block  1
call    2 returned 1
        1: 5346:}
------------------
        -: 5347:
        -: 5348:// Pushes a trace defined by SCOPED_TRACE() on to the per-thread
        -: 5349:// Google Test trace stack.
function _ZN7testing8UnitTest14PushGTestTraceERKNS_8internal9TraceInfoE called 0 returned 0% blocks executed 0%
    #####: 5350:void UnitTest::PushGTestTrace(const internal::TraceInfo& trace)
        -: 5351:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5352:  internal::MutexLock lock(&mutex_);
    %%%%%: 5352-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5352-block  1
call    3 never executed
    $$$$$: 5352-block  2
call    4 never executed
    #####: 5353:  impl_->gtest_trace_stack().push_back(trace);
    %%%%%: 5353-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5353-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 5354:}
        -: 5355:
        -: 5356:// Pops a trace from the per-thread Google Test trace stack.
function _ZN7testing8UnitTest13PopGTestTraceEv called 0 returned 0% blocks executed 0%
    #####: 5357:void UnitTest::PopGTestTrace()
        -: 5358:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5359:  internal::MutexLock lock(&mutex_);
    %%%%%: 5359-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 5359-block  1
call    4 never executed
    #####: 5360:  impl_->gtest_trace_stack().pop_back();
    %%%%%: 5360-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5360-block  1
call    3 never executed
    #####: 5361:}
        -: 5362:
        -: 5363:namespace internal {
        -: 5364:
function _ZN7testing8internal12UnitTestImplC2EPNS_8UnitTestE called 1 returned 100% blocks executed 44%
        1: 5365:UnitTestImpl::UnitTestImpl(UnitTest* parent)
        -: 5366:    : parent_(parent),
        -: 5367:      GTEST_DISABLE_MSC_WARNINGS_PUSH_(4355 /* using this in initializer */)
        -: 5368:          default_global_test_part_result_reporter_(this),
        -: 5369:      default_per_thread_test_part_result_reporter_(this),
        -: 5370:      GTEST_DISABLE_MSC_WARNINGS_POP_() global_test_part_result_repoter_(
        -: 5371:          &default_global_test_part_result_reporter_),
        -: 5372:      per_thread_test_part_result_reporter_(
        -: 5373:          &default_per_thread_test_part_result_reporter_),
        -: 5374:      parameterized_test_registry_(),
        -: 5375:      parameterized_tests_registered_(false),
        -: 5376:      last_death_test_suite_(-1),
        -: 5377:      current_test_suite_(nullptr),
        -: 5378:      current_test_info_(nullptr),
        -: 5379:      ad_hoc_test_result_(),
        -: 5380:      os_stack_trace_getter_(nullptr),
        -: 5381:      post_flag_parse_init_performed_(false),
        -: 5382:      random_seed_(0),  // Will be overridden by the flag before first use.
        -: 5383:      random_(0),       // Will be reseeded before first use.
        -: 5384:      start_timestamp_(0),
        -: 5385:      elapsed_time_(0),
        -: 5386:#if GTEST_HAS_DEATH_TEST
        1: 5387:      death_test_factory_(new DefaultDeathTestFactory),
        1: 5387-block  0
call    0 returned 1
        -: 5388:#endif
        -: 5389:      // Will be overridden by the flag before first use.
        2: 5390:      catch_exceptions_(false) {
        1: 5390-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1: 5390-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1: 5390-block  2
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
        1: 5390-block  3
call   18 returned 1
branch 19 taken 1 (fallthrough)
branch 20 taken 0 (throw)
        1: 5390-block  4
call   21 returned 1
call   22 returned 1
call   23 returned 1
branch 24 taken 1 (fallthrough)
branch 25 taken 0 (throw)
call   26 returned 1
call   27 returned 1
branch 28 taken 1 (fallthrough)
branch 29 taken 0 (throw)
    $$$$$: 5390-block  5
    $$$$$: 5390-block  6
call   30 never executed
    $$$$$: 5390-block  7
call   31 never executed
    $$$$$: 5390-block  8
call   32 never executed
    $$$$$: 5390-block  9
call   33 never executed
    $$$$$: 5390-block 10
call   34 never executed
    $$$$$: 5390-block 11
call   35 never executed
    $$$$$: 5390-block 12
call   36 never executed
    $$$$$: 5390-block 13
call   37 never executed
    $$$$$: 5390-block 14
call   38 never executed
    $$$$$: 5390-block 15
call   39 never executed
    $$$$$: 5390-block 16
call   40 never executed
    $$$$$: 5390-block 17
call   41 never executed
    $$$$$: 5390-block 18
call   42 never executed
    $$$$$: 5390-block 19
call   43 never executed
    $$$$$: 5390-block 20
call   44 never executed
    $$$$$: 5390-block 21
call   45 never executed
        1: 5391:  listeners()->SetDefaultResultPrinter(new PrettyUnitTestResultPrinter);
        1: 5391-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1: 5391-block  1
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1: 5392:}
        1: 5392-block  0
        -: 5393:
        2: 5394:UnitTestImpl::~UnitTestImpl() {
        -: 5395:  // Deletes every TestSuite.
        1: 5396:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5397:
        -: 5398:  // Deletes every Environment.
        1: 5399:  ForEach(environments_, internal::Delete<Environment>);
        -: 5400:
        1: 5401:  delete os_stack_trace_getter_;
        2: 5402:}
------------------
_ZN7testing8internal12UnitTestImplD0Ev:
function _ZN7testing8internal12UnitTestImplD0Ev called 1 returned 100% blocks executed 100%
        1: 5394:UnitTestImpl::~UnitTestImpl() {
        -: 5395:  // Deletes every TestSuite.
        -: 5396:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5397:
        -: 5398:  // Deletes every Environment.
        -: 5399:  ForEach(environments_, internal::Delete<Environment>);
        -: 5400:
        -: 5401:  delete os_stack_trace_getter_;
        1: 5402:}
        1: 5402-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN7testing8internal12UnitTestImplD2Ev:
function _ZN7testing8internal12UnitTestImplD2Ev called 1 returned 100% blocks executed 100%
        1: 5394:UnitTestImpl::~UnitTestImpl() {
        1: 5394-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
call    9 returned 1
call   10 returned 1
call   11 returned 1
call   12 returned 1
call   13 returned 1
call   14 returned 1
call   15 returned 1
        -: 5395:  // Deletes every TestSuite.
        1: 5396:  ForEach(test_suites_, internal::Delete<TestSuite>);
        1: 5396-block  0
call    0 returned 1
        -: 5397:
        -: 5398:  // Deletes every Environment.
        1: 5399:  ForEach(environments_, internal::Delete<Environment>);
call    0 returned 1
        -: 5400:
        1: 5401:  delete os_stack_trace_getter_;
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5401-block  0
call    2 returned 1
        1: 5402:}
------------------
        -: 5403:
        -: 5404:// Adds a TestProperty to the current TestResult object when invoked in a
        -: 5405:// context of a test, to current test suite's ad_hoc_test_result when invoke
        -: 5406:// from SetUpTestSuite/TearDownTestSuite, or to the global property set
        -: 5407:// otherwise.  If the result already contains a property with the same key,
        -: 5408:// the value will be updated.
function _ZN7testing8internal12UnitTestImpl14RecordPropertyERKNS_12TestPropertyE called 0 returned 0% blocks executed 0%
    #####: 5409:void UnitTestImpl::RecordProperty(const TestProperty& test_property) {
    #####: 5410:  std::string xml_element;
    %%%%%: 5410-block  0
call    0 never executed
    %%%%%: 5410-block  1
call    1 never executed
    $$$$$: 5410-block  2
call    2 never executed
        -: 5411:  TestResult* test_result;  // TestResult appropriate for property recording.
        -: 5412:
    #####: 5413:  if (current_test_info_ != nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 5414:    xml_element = "testcase";
    %%%%%: 5414-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5415:    test_result = &(current_test_info_->result_);
    %%%%%: 5415-block  0
    #####: 5416:  } else if (current_test_suite_ != nullptr) {
    %%%%%: 5416-block  0
branch  0 never executed
branch  1 never executed
    #####: 5417:    xml_element = "testsuite";
    %%%%%: 5417-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5418:    test_result = &(current_test_suite_->ad_hoc_test_result_);
    %%%%%: 5418-block  0
        -: 5419:  } else {
    #####: 5420:    xml_element = "testsuites";
    %%%%%: 5420-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5421:    test_result = &ad_hoc_test_result_;
    %%%%%: 5421-block  0
        -: 5422:  }
    #####: 5423:  test_result->RecordProperty(xml_element, test_property);
    %%%%%: 5423-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5424:}
        -: 5425:
        -: 5426:#if GTEST_HAS_DEATH_TEST
        -: 5427:// Disables event forwarding if the control is currently in a death test
        -: 5428:// subprocess. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl32SuppressTestEventsIfInSubprocessEv called 1 returned 100% blocks executed 60%
        1: 5429:void UnitTestImpl::SuppressTestEventsIfInSubprocess() {
        1: 5430:  if (internal_run_death_test_flag_.get() != nullptr)
        1: 5430-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5431:    listeners()->SuppressEventForwarding();
    %%%%%: 5431-block  0
call    0 never executed
call    1 never executed
        1: 5432:}
        -: 5433:#endif  // GTEST_HAS_DEATH_TEST
        -: 5434:
        -: 5435:// Initializes event listeners performing XML output as specified by
        -: 5436:// UnitTestOptions. Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl18ConfigureXmlOutputEv called 1 returned 100% blocks executed 21%
        1: 5437:void UnitTestImpl::ConfigureXmlOutput() {
        2: 5438:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
        1: 5438-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5438-block  1
call    3 returned 1
    $$$$$: 5438-block  2
call    4 never executed
        1: 5439:  if (output_format == "xml") {
        1: 5439-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5440:    listeners()->SetDefaultXmlGenerator(new XmlUnitTestResultPrinter(
    %%%%%: 5440-block  0
call    0 never executed
    %%%%%: 5440-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5441:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5441-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5441-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5441-block  2
call   10 never executed
    $$$$$: 5441-block  3
call   11 never executed
    $$$$$: 5441-block  4
call   12 never executed
    $$$$$: 5441-block  5
        1: 5442:  } else if (output_format == "json") {
        1: 5442-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5443:    listeners()->SetDefaultXmlGenerator(new JsonUnitTestResultPrinter(
    %%%%%: 5443-block  0
call    0 never executed
    %%%%%: 5443-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5444:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5444-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5444-block  1
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 5444-block  2
call   10 never executed
    $$$$$: 5444-block  3
call   11 never executed
    $$$$$: 5444-block  4
call   12 never executed
    $$$$$: 5444-block  5
        1: 5445:  } else if (output_format != "") {
        1: 5445-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 5445-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    #####: 5446:    GTEST_LOG_(WARNING) << "WARNING: unrecognized output format \""
    %%%%%: 5446-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5446-block  1
call    3 never executed
    %%%%%: 5446-block  2
call    4 never executed
    $$$$$: 5446-block  3
call    5 never executed
    $$$$$: 5446-block  4
    #####: 5447:                        << output_format << "\" ignored.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5447-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5447-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5448:  }
        1: 5449:}
        -: 5450:
        -: 5451:#if GTEST_CAN_STREAM_RESULTS_
        -: 5452:// Initializes event listeners for streaming test results in string form.
        -: 5453:// Must not be called before InitGoogleTest.
function _ZN7testing8internal12UnitTestImpl24ConfigureStreamingOutputEv called 1 returned 100% blocks executed 12%
        1: 5454:void UnitTestImpl::ConfigureStreamingOutput() {
        1: 5455:  const std::string& target = GTEST_FLAG(stream_result_to);
        1: 5456:  if (!target.empty()) {
        1: 5456-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5457:    const size_t pos = target.find(':');
    %%%%%: 5457-block  0
call    0 never executed
    #####: 5458:    if (pos != std::string::npos) {
branch  0 never executed
branch  1 never executed
    #####: 5459:      listeners()->Append(new StreamingListener(target.substr(0, pos),
    %%%%%: 5459-block  0
call    0 never executed
call    1 never executed
    %%%%%: 5459-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$: 5459-block  2
call    5 never executed
    $$$$$: 5459-block  3
call    6 never executed
    #####: 5460:                                                target.substr(pos+1)));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5460-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5460-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5460-block  2
call    9 never executed
call   10 never executed
    $$$$$: 5460-block  3
call   11 never executed
    $$$$$: 5460-block  4
call   12 never executed
    $$$$$: 5460-block  5
        -: 5461:    } else {
    #####: 5462:      GTEST_LOG_(WARNING) << "unrecognized streaming target \"" << target
    %%%%%: 5462-block  0
call    0 never executed
call    1 never executed
    %%%%%: 5462-block  1
call    2 never executed
    $$$$$: 5462-block  2
call    3 never executed
    #####: 5463:                          << "\" ignored.";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5463-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5463-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 5464:    }
        -: 5465:  }
        1: 5466:}
        1: 5466-block  0
        -: 5467:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5468:
        -: 5469:// Performs initialization dependent upon flag values obtained in
        -: 5470:// ParseGoogleTestFlagsOnly.  Is called from InitGoogleTest after the call to
        -: 5471:// ParseGoogleTestFlagsOnly.  In case a user neglects to call InitGoogleTest
        -: 5472:// this function is also called from RunAllTests.  Since this function can be
        -: 5473:// called more than once, it has to be idempotent.
function _ZN7testing8internal12UnitTestImpl19PostFlagParsingInitEv called 2 returned 100% blocks executed 67%
        2: 5474:void UnitTestImpl::PostFlagParsingInit() {
        -: 5475:  // Ensures that this function does not execute more than once.
        2: 5476:  if (!post_flag_parse_init_performed_) {
        2: 5476-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 5477:    post_flag_parse_init_performed_ = true;
        -: 5478:
        -: 5479:#if defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5480:    // Register to send notifications about key process state changes.
        -: 5481:    listeners()->Append(new GTEST_CUSTOM_TEST_EVENT_LISTENER_());
        -: 5482:#endif  // defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5483:
        -: 5484:#if GTEST_HAS_DEATH_TEST
        1: 5485:    InitDeathTestSubprocessControlInfo();
        1: 5485-block  0
call    0 returned 1
        1: 5486:    SuppressTestEventsIfInSubprocess();
call    0 returned 1
        -: 5487:#endif  // GTEST_HAS_DEATH_TEST
        -: 5488:
        -: 5489:    // Registers parameterized tests. This makes parameterized tests
        -: 5490:    // available to the UnitTest reflection API without running
        -: 5491:    // RUN_ALL_TESTS.
        1: 5492:    RegisterParameterizedTests();
call    0 returned 1
        -: 5493:
        -: 5494:    // Configures listeners for XML output. This makes it possible for users
        -: 5495:    // to shut down the default XML output before invoking RUN_ALL_TESTS.
        1: 5496:    ConfigureXmlOutput();
call    0 returned 1
        -: 5497:
        1: 5498:    if (GTEST_FLAG(brief)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5499:      listeners()->SetDefaultResultPrinter(new BriefUnitTestResultPrinter);
    %%%%%: 5499-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 5500:    }
        -: 5501:
        -: 5502:#if GTEST_CAN_STREAM_RESULTS_
        -: 5503:    // Configures listeners for streaming test results to the specified server.
        1: 5504:    ConfigureStreamingOutput();
        1: 5504-block  0
call    0 returned 1
        -: 5505:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5506:
        -: 5507:#if GTEST_HAS_ABSL
        -: 5508:    if (GTEST_FLAG(install_failure_signal_handler)) {
        -: 5509:      absl::FailureSignalHandlerOptions options;
        -: 5510:      absl::InstallFailureSignalHandler(options);
        -: 5511:    }
        -: 5512:#endif  // GTEST_HAS_ABSL
        -: 5513:  }
        2: 5514:}
        -: 5515:
        -: 5516:// A predicate that checks the name of a TestSuite against a known
        -: 5517:// value.
        -: 5518://
        -: 5519:// This is used for implementation of the UnitTest class only.  We put
        -: 5520:// it in the anonymous namespace to prevent polluting the outer
        -: 5521:// namespace.
        -: 5522://
        -: 5523:// TestSuiteNameIs is copyable.
        -: 5524:class TestSuiteNameIs {
        -: 5525: public:
        -: 5526:  // Constructor.
function _ZN7testing8internal15TestSuiteNameIsC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 12 returned 100% blocks executed 100%
       12: 5527:  explicit TestSuiteNameIs(const std::string& name) : name_(name) {}
       12: 5527-block  0
call    0 returned 12
        -: 5528:
        -: 5529:  // Returns true if and only if the name of test_suite matches name_.
function _ZNK7testing8internal15TestSuiteNameIsclEPKNS_9TestSuiteE called 32 returned 100% blocks executed 100%
       32: 5530:  bool operator()(const TestSuite* test_suite) const {
       64: 5531:    return test_suite != nullptr &&
       32: 5531-block  0
branch  0 taken 32 (fallthrough)
branch  1 taken 0
        4: 5531-block  1
       28: 5531-block  2
       64: 5532:           strcmp(test_suite->name(), name_.c_str()) == 0;
       32: 5532-block  0
call    0 returned 32
call    1 returned 32
branch  2 taken 4 (fallthrough)
branch  3 taken 28
       32: 5532-block  1
        -: 5533:  }
        -: 5534:
        -: 5535: private:
        -: 5536:  std::string name_;
        -: 5537:};
        -: 5538:
        -: 5539:// Finds and returns a TestSuite with the given name.  If one doesn't
        -: 5540:// exist, creates one and returns it.  It's the CALLER'S
        -: 5541:// RESPONSIBILITY to ensure that this function is only called WHEN THE
        -: 5542:// TESTS ARE NOT SHUFFLED.
        -: 5543://
        -: 5544:// Arguments:
        -: 5545://
        -: 5546://   test_suite_name: name of the test suite
        -: 5547://   type_param:      the name of the test suite's type parameter, or NULL if
        -: 5548://                    this is not a typed or a type-parameterized test suite.
        -: 5549://   set_up_tc:       pointer to the function that sets up the test suite
        -: 5550://   tear_down_tc:    pointer to the function that tears down the test suite
function _ZN7testing8internal12UnitTestImpl12GetTestSuiteEPKcS3_PFvvES5_ called 12 returned 100% blocks executed 53%
       12: 5551:TestSuite* UnitTestImpl::GetTestSuite(
        -: 5552:    const char* test_suite_name, const char* type_param,
        -: 5553:    internal::SetUpTestSuiteFunc set_up_tc,
        -: 5554:    internal::TearDownTestSuiteFunc tear_down_tc) {
        -: 5555:  // Can we find a TestSuite with the given name?
        -: 5556:  const auto test_suite =
       12: 5557:      std::find_if(test_suites_.rbegin(), test_suites_.rend(),
       12: 5557-block  0
call    0 returned 12
call    1 returned 12
    $$$$$: 5557-block  1
    $$$$$: 5557-block  2
       24: 5558:                   TestSuiteNameIs(test_suite_name));
       12: 5558-block  0
call    0 returned 12
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0 (throw)
       12: 5558-block  1
call    4 returned 12
branch  5 taken 12 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 12
branch  8 taken 12 (fallthrough)
branch  9 taken 0 (throw)
       12: 5558-block  2
call   10 returned 12
call   11 returned 12
call   12 returned 12
    $$$$$: 5558-block  3
call   13 never executed
    $$$$$: 5558-block  4
    $$$$$: 5558-block  5
call   14 never executed
    $$$$$: 5558-block  6
    $$$$$: 5558-block  7
call   15 never executed
    $$$$$: 5558-block  8
        -: 5559:
       12: 5560:  if (test_suite != test_suites_.rend()) return *test_suite;
call    0 returned 12
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0 (throw)
       12: 5560-block  0
branch  4 taken 4 (fallthrough)
branch  5 taken 8
        4: 5560-block  1
call    6 returned 4
    $$$$$: 5560-block  2
        -: 5561:
        -: 5562:  // No.  Let's create one.
        -: 5563:  auto* const new_test_suite =
        8: 5564:      new TestSuite(test_suite_name, type_param, set_up_tc, tear_down_tc);
        8: 5564-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8: 5564-block  1
call    3 returned 8
branch  4 taken 8 (fallthrough)
branch  5 taken 0 (throw)
    $$$$$: 5564-block  2
call    6 never executed
        -: 5565:
        -: 5566:  // Is this a death test suite?
        8: 5567:  if (internal::UnitTestOptions::MatchesFilter(test_suite_name,
        8: 5567-block  0
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0 (throw)
        8: 5567-block  1
call    4 returned 8
call    5 returned 8
call    6 returned 8
branch  7 taken 0 (fallthrough)
branch  8 taken 8
    $$$$$: 5567-block  2
call    9 never executed
    $$$$$: 5567-block  3
        -: 5568:                                               kDeathTestSuiteFilter)) {
        -: 5569:    // Yes.  Inserts the test suite after the last death test suite
        -: 5570:    // defined so far.  This only works when the test suites haven't
        -: 5571:    // been shuffled.  Otherwise we may end up running a death test
        -: 5572:    // after a non-death test.
    #####: 5573:    ++last_death_test_suite_;
    #####: 5574:    test_suites_.insert(test_suites_.begin() + last_death_test_suite_,
call    0 never executed
    $$$$$: 5574-block  0
    $$$$$: 5574-block  1
    #####: 5575:                        new_test_suite);
    %%%%%: 5575-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5575-block  1
    $$$$$: 5575-block  2
        -: 5576:  } else {
        -: 5577:    // No.  Appends to the end of the list.
        8: 5578:    test_suites_.push_back(new_test_suite);
        8: 5578-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        -: 5579:  }
        -: 5580:
        8: 5581:  test_suite_indices_.push_back(static_cast<int>(test_suite_indices_.size()));
        8: 5581-block  0
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 5581-block  1
        8: 5582:  return new_test_suite;
        8: 5582-block  0
        -: 5583:}
        -: 5584:
        -: 5585:// Helpers for setting up / tearing down the given environment.  They
        -: 5586:// are for use in the ForEach() function.
function _ZN7testing8internalL16SetUpEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5587:static void SetUpEnvironment(Environment* env) { env->SetUp(); }
    %%%%%: 5587-block  0
call    0 never executed
function _ZN7testing8internalL19TearDownEnvironmentEPNS_11EnvironmentE called 0 returned 0% blocks executed 0%
    #####: 5588:static void TearDownEnvironment(Environment* env) { env->TearDown(); }
    %%%%%: 5588-block  0
call    0 never executed
        -: 5589:
        -: 5590:// Runs all tests in this UnitTest object, prints the result, and
        -: 5591:// returns true if all tests are successful.  If any exception is
        -: 5592:// thrown during a test, the test is considered to be failed, but the
        -: 5593:// rest of the tests will still be run.
        -: 5594://
        -: 5595:// When parameterized tests are enabled, it expands and registers
        -: 5596:// parameterized tests first in RegisterParameterizedTests().
        -: 5597:// All other functions called from RunAllTests() may safely assume that
        -: 5598:// parameterized tests are ready to be counted and run.
function _ZN7testing8internal12UnitTestImpl11RunAllTestsEv called 1 returned 100% blocks executed 55%
        1: 5599:bool UnitTestImpl::RunAllTests() {
        -: 5600:  // True if and only if Google Test is initialized before RUN_ALL_TESTS() is
        -: 5601:  // called.
        1: 5602:  const bool gtest_is_initialized_before_run_all_tests = GTestIsInitialized();
        1: 5602-block  0
call    0 returned 1
        -: 5603:
        -: 5604:  // Do not run any test if the --help flag was specified.
        1: 5605:  if (g_help_flag)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5606:    return true;
    %%%%%: 5606-block  0
        -: 5607:
        -: 5608:  // Repeats the call to the post-flag parsing initialization in case the
        -: 5609:  // user didn't call InitGoogleTest.
        1: 5610:  PostFlagParsingInit();
        1: 5610-block  0
call    0 returned 1
        -: 5611:
        -: 5612:  // Even if sharding is not on, test runners may want to use the
        -: 5613:  // GTEST_SHARD_STATUS_FILE to query whether the test supports the sharding
        -: 5614:  // protocol.
        1: 5615:  internal::WriteToShardStatusFileIfNeeded();
call    0 returned 1
        -: 5616:
        -: 5617:  // True if and only if we are in a subprocess for running a thread-safe-style
        -: 5618:  // death test.
        1: 5619:  bool in_subprocess_for_death_test = false;
        -: 5620:
        -: 5621:#if GTEST_HAS_DEATH_TEST
        1: 5622:  in_subprocess_for_death_test =
        1: 5623:      (internal_run_death_test_flag_.get() != nullptr);
call    0 returned 1
        -: 5624:# if defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5625:  if (in_subprocess_for_death_test) {
        -: 5626:    GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_();
        -: 5627:  }
        -: 5628:# endif  // defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5629:#endif  // GTEST_HAS_DEATH_TEST
        -: 5630:
        1: 5631:  const bool should_shard = ShouldShard(kTestTotalShards, kTestShardIndex,
call    0 returned 1
        -: 5632:                                        in_subprocess_for_death_test);
        -: 5633:
        -: 5634:  // Compares the full test names with the filter to decide which
        -: 5635:  // tests to run.
       1*: 5636:  const bool has_tests_to_run = FilterTests(should_shard
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5636-block  0
        1: 5636-block  1
        1: 5636-block  2
call    2 returned 1
        -: 5637:                                              ? HONOR_SHARDING_PROTOCOL
        1: 5638:                                              : IGNORE_SHARDING_PROTOCOL) > 0;
        -: 5639:
        -: 5640:  // Lists the tests and exits if the --gtest_list_tests flag was specified.
        1: 5641:  if (GTEST_FLAG(list_tests)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 5642:    // This must be called *after* FilterTests() has been called.
    #####: 5643:    ListTestsMatchingFilter();
    %%%%%: 5643-block  0
call    0 never executed
    #####: 5644:    return true;
        -: 5645:  }
        -: 5646:
        1: 5647:  random_seed_ = GTEST_FLAG(shuffle) ?
        1: 5647-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1: 5647-block  1
    #####: 5648:      GetRandomSeedFromFlag(GTEST_FLAG(random_seed)) : 0;
    %%%%%: 5648-block  0
call    0 never executed
        -: 5649:
        -: 5650:  // True if and only if at least one test has failed.
        1: 5651:  bool failed = false;
        -: 5652:
        1: 5653:  TestEventListener* repeater = listeners()->repeater();
        1: 5653-block  0
call    0 returned 1
call    1 returned 1
        -: 5654:
        1: 5655:  start_timestamp_ = GetTimeInMillis();
call    0 returned 1
        1: 5656:  repeater->OnTestProgramStart(*parent_);
call    0 returned 1
        -: 5657:
        -: 5658:  // How many times to repeat the tests?  We don't want to repeat them
        -: 5659:  // when we are inside the subprocess of a death test.
       1*: 5660:  const int repeat = in_subprocess_for_death_test ? 1 : GTEST_FLAG(repeat);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 5660-block  0
        1: 5660-block  1
        -: 5661:  // Repeats forever if the repeat count is negative.
        1: 5662:  const bool gtest_repeat_forever = repeat < 0;
        2: 5663:  for (int i = 0; gtest_repeat_forever || i != repeat; i++) {
        1: 5663-block  0
        2: 5663-block  1
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 5663-block  2
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1: 5663-block  3
        -: 5664:    // We want to preserve failures generated by ad-hoc test
        -: 5665:    // assertions executed before RUN_ALL_TESTS().
        1: 5666:    ClearNonAdHocTestResult();
        1: 5666-block  0
call    0 returned 1
        -: 5667:
        1: 5668:    const TimeInMillis start = GetTimeInMillis();
call    0 returned 1
        -: 5669:
        -: 5670:    // Shuffles test suites and tests if requested.
        1: 5671:    if (has_tests_to_run && GTEST_FLAG(shuffle)) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 5671-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    #####: 5672:      random()->Reseed(static_cast<uint32_t>(random_seed_));
    %%%%%: 5672-block  0
call    0 never executed
call    1 never executed
        -: 5673:      // This should be done before calling OnTestIterationStart(),
        -: 5674:      // such that a test event listener can see the actual test order
        -: 5675:      // in the event.
    #####: 5676:      ShuffleTests();
call    0 never executed
        -: 5677:    }
        -: 5678:
        -: 5679:    // Tells the unit test event listeners that the tests are about to start.
        1: 5680:    repeater->OnTestIterationStart(*parent_, i);
        1: 5680-block  0
call    0 returned 1
        -: 5681:
        -: 5682:    // Runs each test suite if there is at least one test to run.
        1: 5683:    if (has_tests_to_run) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 5684:      // Sets up all environments beforehand.
        1: 5685:      repeater->OnEnvironmentsSetUpStart(*parent_);
        1: 5685-block  0
call    0 returned 1
        1: 5686:      ForEach(environments_, SetUpEnvironment);
call    0 returned 1
        1: 5687:      repeater->OnEnvironmentsSetUpEnd(*parent_);
call    0 returned 1
        -: 5688:
        -: 5689:      // Runs the tests only if there was no fatal failure or skip triggered
        -: 5690:      // during global set-up.
        1: 5691:      if (Test::IsSkipped()) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 5692:        // Emit diagnostics when global set-up calls skip, as it will not be
        -: 5693:        // emitted by default.
        -: 5694:        TestResult& test_result =
    #####: 5695:            *internal::GetUnitTestImpl()->current_test_result();
    %%%%%: 5695-block  0
call    0 never executed
call    1 never executed
    #####: 5696:        for (int j = 0; j < test_result.total_part_count(); ++j) {
    %%%%%: 5696-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5696-block  1
        -: 5697:          const TestPartResult& test_part_result =
    #####: 5698:              test_result.GetTestPartResult(j);
    %%%%%: 5698-block  0
call    0 never executed
    #####: 5699:          if (test_part_result.type() == TestPartResult::kSkip) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5700:            const std::string& result = test_part_result.message();
    %%%%%: 5700-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5700-block  1
call    5 never executed
    %%%%%: 5700-block  2
call    6 never executed
    $$$$$: 5700-block  3
call    7 never executed
    $$$$$: 5700-block  4
    $$$$$: 5700-block  5
call    8 never executed
    #####: 5701:            printf("%s\n", result.c_str());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 5702:          }
        -: 5703:        }
    #####: 5704:        fflush(stdout);
    %%%%%: 5704-block  0
call    0 never executed
        1: 5705:      } else if (!Test::HasFatalFailure()) {
        1: 5705-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        9: 5706:        for (int test_index = 0; test_index < total_test_suite_count();
        1: 5706-block  0
        9: 5706-block  1
call    0 returned 9
branch  1 taken 8 (fallthrough)
branch  2 taken 1
        8: 5706-block  2
        -: 5707:             test_index++) {
        8: 5708:          GetMutableSuiteCase(test_index)->Run();
        8: 5708-block  0
call    0 returned 8
call    1 returned 8
       8*: 5709:          if (GTEST_FLAG(fail_fast) &&
branch  0 taken 0 (fallthrough)
branch  1 taken 8
    %%%%%: 5709-block  0
        8: 5709-block  1
        8: 5709-block  2
branch  2 taken 0 (fallthrough)
branch  3 taken 8
    #####: 5710:              GetMutableSuiteCase(test_index)->Failed()) {
    %%%%%: 5710-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5711:            for (int j = test_index + 1; j < total_test_suite_count(); j++) {
    %%%%%: 5711-block  0
    %%%%%: 5711-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5712:              GetMutableSuiteCase(j)->Skip();
    %%%%%: 5712-block  0
call    0 never executed
call    1 never executed
        -: 5713:            }
    #####: 5714:            break;
    %%%%%: 5714-block  0
        -: 5715:          }
        -: 5716:        }
        -: 5717:      }
        -: 5718:
        -: 5719:      // Tears down all environments in reverse order afterwards.
        1: 5720:      repeater->OnEnvironmentsTearDownStart(*parent_);
        1: 5720-block  0
call    0 returned 1
        1: 5721:      std::for_each(environments_.rbegin(), environments_.rend(),
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$: 5721-block  0
        -: 5722:                    TearDownEnvironment);
        1: 5723:      repeater->OnEnvironmentsTearDownEnd(*parent_);
        1: 5723-block  0
call    0 returned 1
        -: 5724:    }
        -: 5725:
        1: 5726:    elapsed_time_ = GetTimeInMillis() - start;
        1: 5726-block  0
call    0 returned 1
        -: 5727:
        -: 5728:    // Tells the unit test event listener that the tests have just finished.
        1: 5729:    repeater->OnTestIterationEnd(*parent_, i);
call    0 returned 1
        -: 5730:
        -: 5731:    // Gets the result and clears it.
        1: 5732:    if (!Passed()) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 5733:      failed = true;
    %%%%%: 5733-block  0
        -: 5734:    }
        -: 5735:
        -: 5736:    // Restores the original test order after the iteration.  This
        -: 5737:    // allows the user to quickly repro a failure that happens in the
        -: 5738:    // N-th iteration without repeating the first (N - 1) iterations.
        -: 5739:    // This is not enclosed in "if (GTEST_FLAG(shuffle)) { ... }", in
        -: 5740:    // case the user somehow changes the value of the flag somewhere
        -: 5741:    // (it's always safe to unshuffle the tests).
        1: 5742:    UnshuffleTests();
        1: 5742-block  0
call    0 returned 1
        -: 5743:
        1: 5744:    if (GTEST_FLAG(shuffle)) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 5745:      // Picks a new random seed for each iteration.
    #####: 5746:      random_seed_ = GetNextRandomSeed(random_seed_);
    %%%%%: 5746-block  0
call    0 never executed
        -: 5747:    }
        -: 5748:  }
        -: 5749:
        1: 5750:  repeater->OnTestProgramEnd(*parent_);
        1: 5750-block  0
call    0 returned 1
        -: 5751:
        1: 5752:  if (!gtest_is_initialized_before_run_all_tests) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5753:    ColoredPrintf(
    %%%%%: 5753-block  0
call    0 never executed
        -: 5754:        GTestColor::kRed,
        -: 5755:        "\nIMPORTANT NOTICE - DO NOT IGNORE:\n"
        -: 5756:        "This test program did NOT call " GTEST_INIT_GOOGLE_TEST_NAME_
        -: 5757:        "() before calling RUN_ALL_TESTS(). This is INVALID. Soon " GTEST_NAME_
        -: 5758:        " will start to enforce the valid usage. "
        -: 5759:        "Please fix it ASAP, or IT WILL START TO FAIL.\n");  // NOLINT
        -: 5760:#if GTEST_FOR_GOOGLE_
        -: 5761:    ColoredPrintf(GTestColor::kRed,
        -: 5762:                  "For more details, see http://wiki/Main/ValidGUnitMain.\n");
        -: 5763:#endif  // GTEST_FOR_GOOGLE_
        -: 5764:  }
        -: 5765:
        1: 5766:  return !failed;
        1: 5766-block  0
        -: 5767:}
        -: 5768:
        -: 5769:// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file
        -: 5770:// if the variable is present. If a file already exists at this location, this
        -: 5771:// function will write over it. If the variable is present, but the file cannot
        -: 5772:// be created, prints an error and exits.
function _ZN7testing8internal30WriteToShardStatusFileIfNeededEv called 1 returned 100% blocks executed 33%
        1: 5773:void WriteToShardStatusFileIfNeeded() {
        1: 5774:  const char* const test_shard_file = posix::GetEnv(kTestShardStatusFile);
        1: 5774-block  0
call    0 returned 1
        1: 5775:  if (test_shard_file != nullptr) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 5776:    FILE* const file = posix::FOpen(test_shard_file, "w");
    %%%%%: 5776-block  0
call    0 never executed
    #####: 5777:    if (file == nullptr) {
branch  0 never executed
branch  1 never executed
    #####: 5778:      ColoredPrintf(GTestColor::kRed,
    %%%%%: 5778-block  0
call    0 never executed
        -: 5779:                    "Could not write to the test shard status file \"%s\" "
        -: 5780:                    "specified by the %s environment variable.\n",
        -: 5781:                    test_shard_file, kTestShardStatusFile);
    #####: 5782:      fflush(stdout);
call    0 never executed
    #####: 5783:      exit(EXIT_FAILURE);
call    0 never executed
        -: 5784:    }
    #####: 5785:    fclose(file);
    %%%%%: 5785-block  0
call    0 never executed
        -: 5786:  }
        1: 5787:}
        -: 5788:
        -: 5789:// Checks whether sharding is enabled by examining the relevant
        -: 5790:// environment variable values. If the variables are present,
        -: 5791:// but inconsistent (i.e., shard_index >= total_shards), prints
        -: 5792:// an error and exits. If in_subprocess_for_death_test, sharding is
        -: 5793:// disabled because it must only be applied to the original test
        -: 5794:// process. Otherwise, we could filter out death tests we intended to execute.
function _ZN7testing8internal11ShouldShardEPKcS2_b called 2 returned 100% blocks executed 9%
        2: 5795:bool ShouldShard(const char* total_shards_env,
        -: 5796:                 const char* shard_index_env,
        -: 5797:                 bool in_subprocess_for_death_test) {
        2: 5798:  if (in_subprocess_for_death_test) {
        2: 5798-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 5799:    return false;
    %%%%%: 5799-block  0
        -: 5800:  }
        -: 5801:
        2: 5802:  const int32_t total_shards = Int32FromEnvOrDie(total_shards_env, -1);
        2: 5802-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2: 5803:  const int32_t shard_index = Int32FromEnvOrDie(shard_index_env, -1);
        2: 5803-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -: 5804:
        2: 5805:  if (total_shards == -1 && shard_index == -1) {
        2: 5805-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2: 5805-block  1
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2: 5806:    return false;
        2: 5806-block  0
    #####: 5807:  } else if (total_shards == -1 && shard_index != -1) {
    %%%%%: 5807-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5807-block  1
branch  2 never executed
branch  3 never executed
    #####: 5808:    const Message msg = Message()
    %%%%%: 5808-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5808-block  1
    #####: 5809:      << "Invalid environment variables: you have "
    %%%%%: 5809-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5810:      << kTestShardIndex << " = " << shard_index
    %%%%%: 5810-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5810-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5810-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5811:      << ", but have left " << kTestTotalShards << " unset.\n";
    %%%%%: 5811-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5811-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5811-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5811-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 5811-block  4
call   12 never executed
    #####: 5812:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5812-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5812-block  1
call    7 never executed
    $$$$$: 5812-block  2
call    8 never executed
    $$$$$: 5812-block  3
    #####: 5813:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5814:    exit(EXIT_FAILURE);
    %%%%%: 5814-block  0
call    0 never executed
    #####: 5815:  } else if (total_shards != -1 && shard_index == -1) {
    %%%%%: 5815-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5815-block  1
branch  2 never executed
branch  3 never executed
    #####: 5816:    const Message msg = Message()
    %%%%%: 5816-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5816-block  1
    #####: 5817:      << "Invalid environment variables: you have "
    %%%%%: 5817-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5818:      << kTestTotalShards << " = " << total_shards
    %%%%%: 5818-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5818-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5818-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5819:      << ", but have left " << kTestShardIndex << " unset.\n";
    %%%%%: 5819-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5819-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5819-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5819-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$: 5819-block  4
call   12 never executed
    #####: 5820:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5820-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5820-block  1
call    7 never executed
    $$$$$: 5820-block  2
call    8 never executed
    $$$$$: 5820-block  3
    #####: 5821:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5822:    exit(EXIT_FAILURE);
    %%%%%: 5822-block  0
call    0 never executed
    #####: 5823:  } else if (shard_index < 0 || shard_index >= total_shards) {
    %%%%%: 5823-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 5823-block  1
branch  2 never executed
branch  3 never executed
    #####: 5824:    const Message msg = Message()
    %%%%%: 5824-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 5824-block  1
    #####: 5825:      << "Invalid environment variables: we require 0 <= "
    %%%%%: 5825-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5826:      << kTestShardIndex << " < " << kTestTotalShards
    %%%%%: 5826-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5826-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5826-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####: 5827:      << ", but you have " << kTestShardIndex << "=" << shard_index
    %%%%%: 5827-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5827-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5827-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5827-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####: 5828:      << ", " << kTestTotalShards << "=" << total_shards << ".\n";
    %%%%%: 5828-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5828-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5828-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5828-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5828-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%: 5828-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$: 5828-block  6
call   18 never executed
    #####: 5829:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5829-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5829-block  1
call    7 never executed
    $$$$$: 5829-block  2
call    8 never executed
    $$$$$: 5829-block  3
    #####: 5830:    fflush(stdout);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5831:    exit(EXIT_FAILURE);
    %%%%%: 5831-block  0
call    0 never executed
        -: 5832:  }
        -: 5833:
    #####: 5834:  return total_shards > 1;
    %%%%%: 5834-block  0
        -: 5835:}
        -: 5836:
        -: 5837:// Parses the environment variable var as an Int32. If it is unset,
        -: 5838:// returns default_val. If it is not an Int32, prints an error
        -: 5839:// and aborts.
function _ZN7testing8internal17Int32FromEnvOrDieEPKci called 4 returned 100% blocks executed 35%
        4: 5840:int32_t Int32FromEnvOrDie(const char* var, int32_t default_val) {
        4: 5841:  const char* str_val = posix::GetEnv(var);
        4: 5841-block  0
call    0 returned 4
        4: 5842:  if (str_val == nullptr) {
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 5843:    return default_val;
        4: 5843-block  0
        -: 5844:  }
        -: 5845:
        -: 5846:  int32_t result;
    #####: 5847:  if (!ParseInt32(Message() << "The value of environment variable " << var,
    %%%%%: 5847-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5847-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5847-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 5847-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%: 5847-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$: 5847-block  5
call   15 never executed
    $$$$$: 5847-block  6
        -: 5848:                  str_val, &result)) {
    #####: 5849:    exit(EXIT_FAILURE);
    %%%%%: 5849-block  0
call    0 never executed
        -: 5850:  }
    #####: 5851:  return result;
    %%%%%: 5851-block  0
        -: 5852:}
        -: 5853:
        -: 5854:// Given the total number of shards, the shard index, and the test id,
        -: 5855:// returns true if and only if the test should be run on this shard. The test id
        -: 5856:// is some arbitrary but unique non-negative integer assigned to each test
        -: 5857:// method. Assumes that 0 <= shard_index < total_shards.
function _ZN7testing8internal20ShouldRunTestOnShardEiii called 0 returned 0% blocks executed 0%
    #####: 5858:bool ShouldRunTestOnShard(int total_shards, int shard_index, int test_id) {
    #####: 5859:  return (test_id % total_shards) == shard_index;
    %%%%%: 5859-block  0
        -: 5860:}
        -: 5861:
        -: 5862:// Compares the name of each test with the user-specified filter to
        -: 5863:// decide whether the test should be run, then records the result in
        -: 5864:// each TestSuite and TestInfo object.
        -: 5865:// If shard_tests == true, further filters tests based on sharding
        -: 5866:// variables in the environment - see
        -: 5867:// https://github.com/google/googletest/blob/master/googletest/docs/advanced.md
        -: 5868:// . Returns the number of tests that should run.
function _ZN7testing8internal12UnitTestImpl11FilterTestsENS1_18ReactionToShardingE called 1 returned 100% blocks executed 69%
        1: 5869:int UnitTestImpl::FilterTests(ReactionToSharding shard_tests) {
        1: 5870:  const int32_t total_shards = shard_tests == HONOR_SHARDING_PROTOCOL ?
        1: 5870-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1: 5870-block  1
    #####: 5871:      Int32FromEnvOrDie(kTestTotalShards, -1) : -1;
    %%%%%: 5871-block  0
call    0 never executed
        1: 5872:  const int32_t shard_index = shard_tests == HONOR_SHARDING_PROTOCOL ?
        1: 5872-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1: 5872-block  1
    #####: 5873:      Int32FromEnvOrDie(kTestShardIndex, -1) : -1;
    %%%%%: 5873-block  0
call    0 never executed
        -: 5874:
        -: 5875:  // num_runnable_tests are the number of tests that will
        -: 5876:  // run across all shards (i.e., match filter and are not disabled).
        -: 5877:  // num_selected_tests are the number of tests to be run on
        -: 5878:  // this shard.
        1: 5879:  int num_runnable_tests = 0;
        1: 5880:  int num_selected_tests = 0;
        9: 5881:  for (auto* test_suite : test_suites_) {
        1: 5881-block  0
call    0 returned 1
call    1 returned 1
        9: 5881-block  1
call    2 returned 9
branch  3 taken 8 (fallthrough)
branch  4 taken 1
        8: 5881-block  2
call    5 returned 8
call    6 returned 8
       16: 5882:    const std::string& test_suite_name = test_suite->name();
call    0 returned 8
call    1 returned 8
call    2 returned 8
branch  3 taken 8 (fallthrough)
branch  4 taken 0 (throw)
        8: 5882-block  0
call    5 returned 8
        8: 5882-block  1
call    6 returned 8
    $$$$$: 5882-block  2
call    7 never executed
    $$$$$: 5882-block  3
    $$$$$: 5882-block  4
call    8 never executed
        8: 5883:    test_suite->set_should_run(false);
call    0 returned 8
        -: 5884:
       20: 5885:    for (size_t j = 0; j < test_suite->test_info_list().size(); j++) {
       20: 5885-block  0
call    0 returned 20
call    1 returned 20
branch  2 taken 12 (fallthrough)
branch  3 taken 8
       12: 5886:      TestInfo* const test_info = test_suite->test_info_list()[j];
       12: 5886-block  0
call    0 returned 12
call    1 returned 12
       24: 5887:      const std::string test_name(test_info->name());
call    0 returned 12
call    1 returned 12
call    2 returned 12
branch  3 taken 12 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 12
    $$$$$: 5887-block  0
    $$$$$: 5887-block  1
call    6 never executed
        -: 5888:      // A test is disabled if test suite name or test name matches
        -: 5889:      // kDisableTestFilter.
       12: 5890:      const bool is_disabled = internal::UnitTestOptions::MatchesFilter(
call    0 returned 12
      24*: 5891:                                   test_suite_name, kDisableTestFilter) ||
branch  0 taken 12 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 12
    %%%%%: 5891-block  0
       12: 5891-block  1
       12: 5892:                               internal::UnitTestOptions::MatchesFilter(
       12: 5892-block  0
call    0 returned 12
       12: 5893:                                   test_name, kDisableTestFilter);
       12: 5894:      test_info->is_disabled_ = is_disabled;
        -: 5895:
       12: 5896:      const bool matches_filter = internal::UnitTestOptions::FilterMatchesTest(
       12: 5896-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
        -: 5897:          test_suite_name, test_name);
       12: 5898:      test_info->matches_filter_ = matches_filter;
        -: 5899:
       12: 5900:      const bool is_runnable =
      12*: 5901:          (GTEST_FLAG(also_run_disabled_tests) || !is_disabled) &&
       12: 5901-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 0
       12: 5901-block  1
branch  2 taken 12 (fallthrough)
branch  3 taken 0
       12: 5901-block  2
branch  4 taken 12 (fallthrough)
branch  5 taken 0
       12: 5901-block  3
    %%%%%: 5901-block  4
        -: 5902:          matches_filter;
        -: 5903:
        -: 5904:      const bool is_in_another_shard =
      12*: 5905:          shard_tests != IGNORE_SHARDING_PROTOCOL &&
       12: 5905-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    %%%%%: 5905-block  1
       12: 5905-block  2
    #####: 5906:          !ShouldRunTestOnShard(total_shards, shard_index, num_runnable_tests);
    %%%%%: 5906-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
       12: 5907:      test_info->is_in_another_shard_ = is_in_another_shard;
      12*: 5908:      const bool is_selected = is_runnable && !is_in_another_shard;
       12: 5908-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 0
       12: 5908-block  1
branch  2 taken 12 (fallthrough)
branch  3 taken 0
       12: 5908-block  2
    %%%%%: 5908-block  3
        -: 5909:
       12: 5910:      num_runnable_tests += is_runnable;
       12: 5911:      num_selected_tests += is_selected;
        -: 5912:
       12: 5913:      test_info->should_run_ = is_selected;
      12*: 5914:      test_suite->set_should_run(test_suite->should_run() || is_selected);
       12: 5914-block  0
call    0 returned 12
branch  1 taken 8 (fallthrough)
branch  2 taken 4
        8: 5914-block  1
branch  3 taken 8 (fallthrough)
branch  4 taken 0
       12: 5914-block  2
    %%%%%: 5914-block  3
       12: 5914-block  4
call    5 returned 12
        -: 5915:    }
        -: 5916:  }
        1: 5917:  return num_selected_tests;
        1: 5917-block  0
        1: 5917-block  1
        -: 5918:}
        -: 5919:
        -: 5920:// Prints the given C-string on a single line by replacing all '\n'
        -: 5921:// characters with string "\\n".  If the output takes more than
        -: 5922:// max_length characters, only prints the first max_length characters
        -: 5923:// and "...".
function _ZN7testing8internalL14PrintOnOneLineEPKci called 0 returned 0% blocks executed 0%
    #####: 5924:static void PrintOnOneLine(const char* str, int max_length) {
    #####: 5925:  if (str != nullptr) {
    %%%%%: 5925-block  0
branch  0 never executed
branch  1 never executed
    #####: 5926:    for (int i = 0; *str != '\0'; ++str) {
    %%%%%: 5926-block  0
    %%%%%: 5926-block  1
branch  0 never executed
branch  1 never executed
    %%%%%: 5926-block  2
    #####: 5927:      if (i >= max_length) {
    %%%%%: 5927-block  0
branch  0 never executed
branch  1 never executed
    #####: 5928:        printf("...");
    %%%%%: 5928-block  0
call    0 never executed
    #####: 5929:        break;
        -: 5930:      }
    #####: 5931:      if (*str == '\n') {
    %%%%%: 5931-block  0
branch  0 never executed
branch  1 never executed
    #####: 5932:        printf("\\n");
    %%%%%: 5932-block  0
call    0 never executed
    #####: 5933:        i += 2;
        -: 5934:      } else {
    #####: 5935:        printf("%c", *str);
    %%%%%: 5935-block  0
call    0 never executed
    #####: 5936:        ++i;
        -: 5937:      }
        -: 5938:    }
        -: 5939:  }
    #####: 5940:}
        -: 5941:
        -: 5942:// Prints the names of the tests matching the user-specified filter flag.
function _ZN7testing8internal12UnitTestImpl23ListTestsMatchingFilterEv called 0 returned 0% blocks executed 0%
    #####: 5943:void UnitTestImpl::ListTestsMatchingFilter() {
        -: 5944:  // Print at most this many characters for each type/value parameter.
    #####: 5945:  const int kMaxParamLength = 250;
        -: 5946:
    #####: 5947:  for (auto* test_suite : test_suites_) {
    %%%%%: 5947-block  0
call    0 never executed
call    1 never executed
    %%%%%: 5947-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5947-block  2
call    5 never executed
    %%%%%: 5947-block  3
call    6 never executed
    #####: 5948:    bool printed_test_suite_name = false;
        -: 5949:
    #####: 5950:    for (size_t j = 0; j < test_suite->test_info_list().size(); j++) {
    %%%%%: 5950-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5950-block  1
    #####: 5951:      const TestInfo* const test_info = test_suite->test_info_list()[j];
    %%%%%: 5951-block  0
call    0 never executed
call    1 never executed
    #####: 5952:      if (test_info->matches_filter_) {
branch  0 never executed
branch  1 never executed
    #####: 5953:        if (!printed_test_suite_name) {
    %%%%%: 5953-block  0
branch  0 never executed
branch  1 never executed
    #####: 5954:          printed_test_suite_name = true;
    #####: 5955:          printf("%s.", test_suite->name());
    %%%%%: 5955-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5956:          if (test_suite->type_param() != nullptr) {
    %%%%%: 5956-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5957:            printf("  # %s = ", kTypeParamLabel);
    %%%%%: 5957-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5958:            // We print the type parameter on a single line to make
        -: 5959:            // the output easy to parse by a program.
    #####: 5960:            PrintOnOneLine(test_suite->type_param(), kMaxParamLength);
    %%%%%: 5960-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 5961:          }
    #####: 5962:          printf("\n");
    %%%%%: 5962-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5963:        }
    #####: 5964:        printf("  %s", test_info->name());
    %%%%%: 5964-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 5965:        if (test_info->value_param() != nullptr) {
    %%%%%: 5965-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5966:          printf("  # %s = ", kValueParamLabel);
    %%%%%: 5966-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5967:          // We print the value parameter on a single line to make the
        -: 5968:          // output easy to parse by a program.
    #####: 5969:          PrintOnOneLine(test_info->value_param(), kMaxParamLength);
    %%%%%: 5969-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 5970:        }
    #####: 5971:        printf("\n");
    %%%%%: 5971-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5972:      }
        -: 5973:    }
        -: 5974:  }
    #####: 5975:  fflush(stdout);
    %%%%%: 5975-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5976:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
    %%%%%: 5976-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5976-block  1
call    3 never executed
    $$$$$: 5976-block  2
call    4 never executed
    #####: 5977:  if (output_format == "xml" || output_format == "json") {
    %%%%%: 5977-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5977-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 5977-block  2
    %%%%%: 5977-block  3
    %%%%%: 5977-block  4
branch  6 never executed
branch  7 never executed
    #####: 5978:    FILE* fileout = OpenFileForWriting(
    %%%%%: 5978-block  0
call    0 never executed
    %%%%%: 5978-block  1
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 5978-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 5978-block  3
call    8 never executed
    $$$$$: 5978-block  4
call    9 never executed
    $$$$$: 5978-block  5
    $$$$$: 5978-block  6
call   10 never executed
    $$$$$: 5978-block  7
    #####: 5979:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str());
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    $$$$$: 5979-block  0
call    5 never executed
    $$$$$: 5979-block  1
    #####: 5980:    std::stringstream stream;
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5980-block  0
call    3 never executed
    $$$$$: 5980-block  1
call    4 never executed
    #####: 5981:    if (output_format == "xml") {
    %%%%%: 5981-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5982:      XmlUnitTestResultPrinter(
    %%%%%: 5982-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5982-block  1
call    4 never executed
    $$$$$: 5982-block  2
call    5 never executed
    $$$$$: 5982-block  3
    #####: 5983:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 5983-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 5983-block  1
call    4 never executed
    $$$$$: 5983-block  2
    #####: 5984:          .PrintXmlTestsList(&stream, test_suites_);
    %%%%%: 5984-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5985:    } else if (output_format == "json") {
    %%%%%: 5985-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 5986:      JsonUnitTestResultPrinter(
    %%%%%: 5986-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 5986-block  1
call    4 never executed
    $$$$$: 5986-block  2
call    5 never executed
    $$$$$: 5986-block  3
    #####: 5987:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 5987-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 5987-block  1
call    4 never executed
    $$$$$: 5987-block  2
    #####: 5988:          .PrintJsonTestList(&stream, test_suites_);
    %%%%%: 5988-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5989:    }
    #####: 5990:    fprintf(fileout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 5990-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 5990-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 5990-block  2
call    7 never executed
    $$$$$: 5990-block  3
call    8 never executed
    $$$$$: 5990-block  4
    #####: 5991:    fclose(fileout);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 5992:  }
    #####: 5993:}
        -: 5994:
        -: 5995:// Sets the OS stack trace getter.
        -: 5996://
        -: 5997:// Does nothing if the input and the current OS stack trace getter are
        -: 5998:// the same; otherwise, deletes the old getter and makes the input the
        -: 5999:// current getter.
function _ZN7testing8internal12UnitTestImpl25set_os_stack_trace_getterEPNS0_27OsStackTraceGetterInterfaceE called 0 returned 0% blocks executed 0%
    #####: 6000:void UnitTestImpl::set_os_stack_trace_getter(
        -: 6001:    OsStackTraceGetterInterface* getter) {
    #####: 6002:  if (os_stack_trace_getter_ != getter) {
    %%%%%: 6002-block  0
branch  0 never executed
branch  1 never executed
    #####: 6003:    delete os_stack_trace_getter_;
    %%%%%: 6003-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6003-block  1
call    2 never executed
    #####: 6004:    os_stack_trace_getter_ = getter;
    %%%%%: 6004-block  0
        -: 6005:  }
    #####: 6006:}
        -: 6007:
        -: 6008:// Returns the current OS stack trace getter if it is not NULL;
        -: 6009:// otherwise, creates an OsStackTraceGetter, makes it the current
        -: 6010:// getter, and returns it.
function _ZN7testing8internal12UnitTestImpl21os_stack_trace_getterEv called 76 returned 100% blocks executed 100%
       76: 6011:OsStackTraceGetterInterface* UnitTestImpl::os_stack_trace_getter() {
       76: 6012:  if (os_stack_trace_getter_ == nullptr) {
       76: 6012-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 75
        -: 6013:#ifdef GTEST_OS_STACK_TRACE_GETTER_
        -: 6014:    os_stack_trace_getter_ = new GTEST_OS_STACK_TRACE_GETTER_;
        -: 6015:#else
        1: 6016:    os_stack_trace_getter_ = new OsStackTraceGetter;
        1: 6016-block  0
call    0 returned 1
call    1 returned 1
        -: 6017:#endif  // GTEST_OS_STACK_TRACE_GETTER_
        -: 6018:  }
        -: 6019:
       76: 6020:  return os_stack_trace_getter_;
       76: 6020-block  0
        -: 6021:}
        -: 6022:
        -: 6023:// Returns the most specific TestResult currently running.
function _ZN7testing8internal12UnitTestImpl19current_test_resultEv called 50 returned 100% blocks executed 83%
       50: 6024:TestResult* UnitTestImpl::current_test_result() {
       50: 6025:  if (current_test_info_ != nullptr) {
       50: 6025-block  0
branch  0 taken 48 (fallthrough)
branch  1 taken 2
       48: 6026:    return &current_test_info_->result_;
       48: 6026-block  0
        -: 6027:  }
        2: 6028:  if (current_test_suite_ != nullptr) {
        2: 6028-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####: 6029:    return &current_test_suite_->ad_hoc_test_result_;
    %%%%%: 6029-block  0
        -: 6030:  }
        2: 6031:  return &ad_hoc_test_result_;
        2: 6031-block  0
        -: 6032:}
        -: 6033:
        -: 6034:// Shuffles all test suites, and the tests within each test suite,
        -: 6035:// making sure that death tests are still run first.
function _ZN7testing8internal12UnitTestImpl12ShuffleTestsEv called 0 returned 0% blocks executed 0%
    #####: 6036:void UnitTestImpl::ShuffleTests() {
        -: 6037:  // Shuffles the death test suites.
    #####: 6038:  ShuffleRange(random(), 0, last_death_test_suite_ + 1, &test_suite_indices_);
    %%%%%: 6038-block  0
call    0 never executed
call    1 never executed
        -: 6039:
        -: 6040:  // Shuffles the non-death test suites.
    #####: 6041:  ShuffleRange(random(), last_death_test_suite_ + 1,
call    0 never executed
call    1 never executed
    #####: 6042:               static_cast<int>(test_suites_.size()), &test_suite_indices_);
call    0 never executed
        -: 6043:
        -: 6044:  // Shuffles the tests inside each test suite.
    #####: 6045:  for (auto& test_suite : test_suites_) {
call    0 never executed
call    1 never executed
    %%%%%: 6045-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6045-block  1
call    5 never executed
    %%%%%: 6045-block  2
call    6 never executed
    #####: 6046:    test_suite->ShuffleTests(random());
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 6047:  }
    #####: 6048:}
    %%%%%: 6048-block  0
        -: 6049:
        -: 6050:// Restores the test suites and tests to their order before the first shuffle.
function _ZN7testing8internal12UnitTestImpl14UnshuffleTestsEv called 1 returned 100% blocks executed 100%
        1: 6051:void UnitTestImpl::UnshuffleTests() {
        9: 6052:  for (size_t i = 0; i < test_suites_.size(); i++) {
        1: 6052-block  0
        9: 6052-block  1
call    0 returned 9
branch  1 taken 8 (fallthrough)
branch  2 taken 1
        -: 6053:    // Unshuffles the tests in each test suite.
        8: 6054:    test_suites_[i]->UnshuffleTests();
        8: 6054-block  0
call    0 returned 8
call    1 returned 8
        -: 6055:    // Resets the index of each test suite.
        8: 6056:    test_suite_indices_[i] = static_cast<int>(i);
call    0 returned 8
        -: 6057:  }
        1: 6058:}
        -: 6059:
        -: 6060:// Returns the current OS stack trace as an std::string.
        -: 6061://
        -: 6062:// The maximum number of stack frames to be included is specified by
        -: 6063:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 6064:// specifies the number of top frames to be skipped, which doesn't
        -: 6065:// count against the number of frames to be included.
        -: 6066://
        -: 6067:// For example, if Foo() calls Bar(), which in turn calls
        -: 6068:// GetCurrentOsStackTraceExceptTop(..., 1), Foo() will be included in
        -: 6069:// the trace but Bar() and GetCurrentOsStackTraceExceptTop() won't.
function _ZN7testing8internal31GetCurrentOsStackTraceExceptTopB5cxx11EPNS_8UnitTestEi called 0 returned 0% blocks executed 0%
    #####: 6070:std::string GetCurrentOsStackTraceExceptTop(UnitTest* /*unit_test*/,
        -: 6071:                                            int skip_count) {
        -: 6072:  // We pass skip_count + 1 to skip this wrapper function in addition
        -: 6073:  // to what the user really wants to skip.
    #####: 6074:  return GetUnitTestImpl()->CurrentOsStackTraceExceptTop(skip_count + 1);
    %%%%%: 6074-block  0
call    0 never executed
call    1 never executed
        -: 6075:}
        -: 6076:
        -: 6077:// Used by the GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_ macro to
        -: 6078:// suppress unreachable code warnings.
        -: 6079:namespace {
        -: 6080:class ClassUniqueToAlwaysTrue {};
        -: 6081:}
        -: 6082:
function _ZN7testing8internal6IsTrueEb called 102 returned 100% blocks executed 100%
      102: 6083:bool IsTrue(bool condition) { return condition; }
      102: 6083-block  0
        -: 6084:
function _ZN7testing8internal10AlwaysTrueEv called 77 returned 100% blocks executed 67%
       77: 6085:bool AlwaysTrue() {
        -: 6086:#if GTEST_HAS_EXCEPTIONS
        -: 6087:  // This condition is always false so AlwaysTrue() never actually throws,
        -: 6088:  // but it makes the compiler think that it may throw.
       77: 6089:  if (IsTrue(false))
       77: 6089-block  0
call    0 returned 77
branch  1 taken 0 (fallthrough)
branch  2 taken 77
    #####: 6090:    throw ClassUniqueToAlwaysTrue();
    %%%%%: 6090-block  0
call    0 never executed
call    1 never executed
        -: 6091:#endif  // GTEST_HAS_EXCEPTIONS
       77: 6092:  return true;
       77: 6092-block  0
        -: 6093:}
        -: 6094:
        -: 6095:// If *pstr starts with the given prefix, modifies *pstr to be right
        -: 6096:// past the prefix and returns true; otherwise leaves *pstr unchanged
        -: 6097:// and returns false.  None of pstr, *pstr, and prefix can be NULL.
function _ZN7testing8internal10SkipPrefixEPKcPS2_ called 0 returned 0% blocks executed 0%
    #####: 6098:bool SkipPrefix(const char* prefix, const char** pstr) {
    #####: 6099:  const size_t prefix_len = strlen(prefix);
    #####: 6100:  if (strncmp(*pstr, prefix, prefix_len) == 0) {
    %%%%%: 6100-block  0
branch  0 never executed
branch  1 never executed
    #####: 6101:    *pstr += prefix_len;
    #####: 6102:    return true;
    %%%%%: 6102-block  0
        -: 6103:  }
    #####: 6104:  return false;
    %%%%%: 6104-block  0
        -: 6105:}
        -: 6106:
        -: 6107:// Parses a string as a command line flag.  The string should have
        -: 6108:// the format "--flag=value".  When def_optional is true, the "=value"
        -: 6109:// part can be omitted.
        -: 6110://
        -: 6111:// Returns the value of the flag, or NULL if the parsing failed.
function _ZN7testing8internalL14ParseFlagValueEPKcS2_b called 4 returned 100% blocks executed 61%
        4: 6112:static const char* ParseFlagValue(const char* str, const char* flag,
        -: 6113:                                  bool def_optional) {
        -: 6114:  // str and flag must not be NULL.
       4*: 6115:  if (str == nullptr || flag == nullptr) return nullptr;
        4: 6115-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 0
        4: 6115-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 4
    %%%%%: 6115-block  2
        -: 6116:
        -: 6117:  // The flag must start with "--" followed by GTEST_FLAG_PREFIX_.
       12: 6118:  const std::string flag_str = std::string("--") + GTEST_FLAG_PREFIX_ + flag;
        4: 6118-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4: 6118-block  1
call    4 returned 4
branch  5 taken 4 (fallthrough)
branch  6 taken 0 (throw)
        4: 6118-block  2
call    7 returned 4
branch  8 taken 4 (fallthrough)
branch  9 taken 0 (throw)
call   10 returned 4
call   11 returned 4
        4: 6118-block  3
call   12 returned 4
    $$$$$: 6118-block  4
    $$$$$: 6118-block  5
    $$$$$: 6118-block  6
        4: 6119:  const size_t flag_len = flag_str.length();
call    0 returned 4
        4: 6120:  if (strncmp(str, flag_str.c_str(), flag_len) != 0) return nullptr;
call    0 returned 4
branch  1 taken 3 (fallthrough)
branch  2 taken 1
        3: 6120-block  0
        -: 6121:
        -: 6122:  // Skips the flag name.
        1: 6123:  const char* flag_end = str + flag_len;
        -: 6124:
        -: 6125:  // When def_optional is true, it's OK to not have a "=value" part.
       1*: 6126:  if (def_optional && (flag_end[0] == '\0')) {
        1: 6126-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6126-block  1
branch  2 never executed
branch  3 never executed
    #####: 6127:    return flag_end;
    %%%%%: 6127-block  0
        -: 6128:  }
        -: 6129:
        -: 6130:  // If def_optional is true and there are more characters after the
        -: 6131:  // flag name, or if def_optional is false, there must be a '=' after
        -: 6132:  // the flag name.
       1*: 6133:  if (flag_end[0] != '=') return nullptr;
        1: 6133-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6133-block  1
        -: 6134:
        -: 6135:  // Returns the string after "=".
        1: 6136:  return flag_end + 1;
        1: 6136-block  0
        -: 6137:}
        -: 6138:
        -: 6139:// Parses a string for a bool flag, in the form of either
        -: 6140:// "--flag=value" or "--flag".
        -: 6141://
        -: 6142:// In the former case, the value is taken as true as long as it does
        -: 6143:// not start with '0', 'f', or 'F'.
        -: 6144://
        -: 6145:// In the latter case, the value is taken as true.
        -: 6146://
        -: 6147:// On success, stores the value of the flag in *value, and returns
        -: 6148:// true.  On failure, returns false without changing *value.
function _ZN7testing8internalL13ParseBoolFlagEPKcS2_Pb called 3 returned 100% blocks executed 40%
        3: 6149:static bool ParseBoolFlag(const char* str, const char* flag, bool* value) {
        -: 6150:  // Gets the value of the flag as a string.
        3: 6151:  const char* const value_str = ParseFlagValue(str, flag, true);
        3: 6151-block  0
call    0 returned 3
        -: 6152:
        -: 6153:  // Aborts if the parsing failed.
        3: 6154:  if (value_str == nullptr) return false;
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3: 6154-block  0
        -: 6155:
        -: 6156:  // Converts the string value to a bool.
    #####: 6157:  *value = !(*value_str == '0' || *value_str == 'f' || *value_str == 'F');
    %%%%%: 6157-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6157-block  1
branch  2 never executed
branch  3 never executed
    %%%%%: 6157-block  2
branch  4 never executed
branch  5 never executed
    %%%%%: 6157-block  3
    %%%%%: 6157-block  4
    #####: 6158:  return true;
    %%%%%: 6158-block  0
        -: 6159:}
        -: 6160:
        -: 6161:// Parses a string for an int32_t flag, in the form of "--flag=value".
        -: 6162://
        -: 6163:// On success, stores the value of the flag in *value, and returns
        -: 6164:// true.  On failure, returns false without changing *value.
function _ZN7testing8internal14ParseInt32FlagEPKcS2_Pi called 0 returned 0% blocks executed 0%
    #####: 6165:bool ParseInt32Flag(const char* str, const char* flag, int32_t* value) {
        -: 6166:  // Gets the value of the flag as a string.
    #####: 6167:  const char* const value_str = ParseFlagValue(str, flag, false);
    %%%%%: 6167-block  0
call    0 never executed
        -: 6168:
        -: 6169:  // Aborts if the parsing failed.
    #####: 6170:  if (value_str == nullptr) return false;
branch  0 never executed
branch  1 never executed
    %%%%%: 6170-block  0
        -: 6171:
        -: 6172:  // Sets *value to the value of the flag.
    #####: 6173:  return ParseInt32(Message() << "The value of flag --" << flag,
    %%%%%: 6173-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6173-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6173-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%: 6173-block  3
call   10 never executed
    $$$$$: 6173-block  4
call   11 never executed
    #####: 6174:                    value_str, value);
    %%%%%: 6174-block  0
        -: 6175:}
        -: 6176:
        -: 6177:// Parses a string for a string flag, in the form of "--flag=value".
        -: 6178://
        -: 6179:// On success, stores the value of the flag in *value, and returns
        -: 6180:// true.  On failure, returns false without changing *value.
        -: 6181:template <typename String>
function _ZN7testing8internalL15ParseStringFlagINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbPKcS9_PT_ called 1 returned 100% blocks executed 83%
        1: 6182:static bool ParseStringFlag(const char* str, const char* flag, String* value) {
        -: 6183:  // Gets the value of the flag as a string.
        1: 6184:  const char* const value_str = ParseFlagValue(str, flag, false);
        1: 6184-block  0
call    0 returned 1
        -: 6185:
        -: 6186:  // Aborts if the parsing failed.
       1*: 6187:  if (value_str == nullptr) return false;
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6187-block  0
        -: 6188:
        -: 6189:  // Sets *value to the value of the flag.
        1: 6190:  *value = value_str;
        1: 6190-block  0
call    0 returned 1
        1: 6191:  return true;
        -: 6192:}
        -: 6193:
        -: 6194:// Determines whether a string has a prefix that Google Test uses for its
        -: 6195:// flags, i.e., starts with GTEST_FLAG_PREFIX_ or GTEST_FLAG_PREFIX_DASH_.
        -: 6196:// If Google Test detects that a command line flag has its prefix but is not
        -: 6197:// recognized, it will print its help message. Flags starting with
        -: 6198:// GTEST_INTERNAL_PREFIX_ followed by "internal_" are considered Google Test
        -: 6199:// internal flags and do not trigger the help message.
function _ZN7testing8internalL23HasGoogleTestFlagPrefixEPKc called 0 returned 0% blocks executed 0%
    #####: 6200:static bool HasGoogleTestFlagPrefix(const char* str) {
    #####: 6201:  return (SkipPrefix("--", &str) ||
    %%%%%: 6201-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6202:          SkipPrefix("-", &str) ||
    %%%%%: 6202-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6203:          SkipPrefix("/", &str)) &&
    %%%%%: 6203-block  0
call    0 never executed
    #####: 6204:         !SkipPrefix(GTEST_FLAG_PREFIX_ "internal_", &str) &&
branch  0 never executed
branch  1 never executed
    %%%%%: 6204-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 6204-block  1
    %%%%%: 6204-block  2
    #####: 6205:         (SkipPrefix(GTEST_FLAG_PREFIX_, &str) ||
    %%%%%: 6205-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6206:          SkipPrefix(GTEST_FLAG_PREFIX_DASH_, &str));
    %%%%%: 6206-block  0
call    0 never executed
    %%%%%: 6206-block  1
        -: 6207:}
        -: 6208:
        -: 6209:// Prints a string containing code-encoded text.  The following escape
        -: 6210:// sequences can be used in the string to control the text color:
        -: 6211://
        -: 6212://   @@    prints a single '@' character.
        -: 6213://   @R    changes the color to red.
        -: 6214://   @G    changes the color to green.
        -: 6215://   @Y    changes the color to yellow.
        -: 6216://   @D    changes to the default terminal text color.
        -: 6217://
function _ZN7testing8internalL17PrintColorEncodedEPKc called 0 returned 0% blocks executed 0%
    #####: 6218:static void PrintColorEncoded(const char* str) {
    #####: 6219:  GTestColor color = GTestColor::kDefault;  // The current color.
    %%%%%: 6219-block  0
        -: 6220:
        -: 6221:  // Conceptually, we split the string into segments divided by escape
        -: 6222:  // sequences.  Then we print one segment at a time.  At the end of
        -: 6223:  // each iteration, the str pointer advances to the beginning of the
        -: 6224:  // next segment.
        -: 6225:  for (;;) {
    #####: 6226:    const char* p = strchr(str, '@');
    #####: 6227:    if (p == nullptr) {
    %%%%%: 6227-block  0
branch  0 never executed
branch  1 never executed
    #####: 6228:      ColoredPrintf(color, "%s", str);
    %%%%%: 6228-block  0
call    0 never executed
    #####: 6229:      return;
    %%%%%: 6229-block  0
        -: 6230:    }
        -: 6231:
    #####: 6232:    ColoredPrintf(color, "%s", std::string(str, p).c_str());
    %%%%%: 6232-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6232-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6232-block  2
call    8 never executed
call    9 never executed
    $$$$$: 6232-block  3
call   10 never executed
    $$$$$: 6232-block  4
    $$$$$: 6232-block  5
call   11 never executed
        -: 6233:
    #####: 6234:    const char ch = p[1];
    #####: 6235:    str = p + 2;
    #####: 6236:    if (ch == '@') {
branch  0 never executed
branch  1 never executed
    #####: 6237:      ColoredPrintf(color, "@");
    %%%%%: 6237-block  0
call    0 never executed
    #####: 6238:    } else if (ch == 'D') {
    %%%%%: 6238-block  0
branch  0 never executed
branch  1 never executed
    #####: 6239:      color = GTestColor::kDefault;
    %%%%%: 6239-block  0
    #####: 6240:    } else if (ch == 'R') {
    %%%%%: 6240-block  0
branch  0 never executed
branch  1 never executed
    #####: 6241:      color = GTestColor::kRed;
    %%%%%: 6241-block  0
    #####: 6242:    } else if (ch == 'G') {
    %%%%%: 6242-block  0
branch  0 never executed
branch  1 never executed
    #####: 6243:      color = GTestColor::kGreen;
    %%%%%: 6243-block  0
    #####: 6244:    } else if (ch == 'Y') {
    %%%%%: 6244-block  0
branch  0 never executed
branch  1 never executed
    #####: 6245:      color = GTestColor::kYellow;
    %%%%%: 6245-block  0
        -: 6246:    } else {
    #####: 6247:      --str;
    %%%%%: 6247-block  0
        -: 6248:    }
    #####: 6249:  }
    %%%%%: 6249-block  0
        -: 6250:}
        -: 6251:
        -: 6252:static const char kColorEncodedHelpMessage[] =
        -: 6253:    "This program contains tests written using " GTEST_NAME_
        -: 6254:    ". You can use the\n"
        -: 6255:    "following command line flags to control its behavior:\n"
        -: 6256:    "\n"
        -: 6257:    "Test Selection:\n"
        -: 6258:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6259:    "list_tests@D\n"
        -: 6260:    "      List the names of all tests instead of running them. The name of\n"
        -: 6261:    "      TEST(Foo, Bar) is \"Foo.Bar\".\n"
        -: 6262:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6263:    "filter=@YPOSITIVE_PATTERNS"
        -: 6264:    "[@G-@YNEGATIVE_PATTERNS]@D\n"
        -: 6265:    "      Run only the tests whose name matches one of the positive patterns "
        -: 6266:    "but\n"
        -: 6267:    "      none of the negative patterns. '?' matches any single character; "
        -: 6268:    "'*'\n"
        -: 6269:    "      matches any substring; ':' separates two patterns.\n"
        -: 6270:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6271:    "also_run_disabled_tests@D\n"
        -: 6272:    "      Run all disabled tests too.\n"
        -: 6273:    "\n"
        -: 6274:    "Test Execution:\n"
        -: 6275:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6276:    "repeat=@Y[COUNT]@D\n"
        -: 6277:    "      Run the tests repeatedly; use a negative count to repeat forever.\n"
        -: 6278:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6279:    "shuffle@D\n"
        -: 6280:    "      Randomize tests' orders on every iteration.\n"
        -: 6281:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6282:    "random_seed=@Y[NUMBER]@D\n"
        -: 6283:    "      Random number seed to use for shuffling test orders (between 1 and\n"
        -: 6284:    "      99999, or 0 to use a seed based on the current time).\n"
        -: 6285:    "\n"
        -: 6286:    "Test Output:\n"
        -: 6287:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6288:    "color=@Y(@Gyes@Y|@Gno@Y|@Gauto@Y)@D\n"
        -: 6289:    "      Enable/disable colored output. The default is @Gauto@D.\n"
        -: 6290:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6291:    "brief=1@D\n"
        -: 6292:    "      Only print test failures.\n"
        -: 6293:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6294:    "print_time=0@D\n"
        -: 6295:    "      Don't print the elapsed time of each test.\n"
        -: 6296:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6297:    "output=@Y(@Gjson@Y|@Gxml@Y)[@G:@YDIRECTORY_PATH@G" GTEST_PATH_SEP_
        -: 6298:    "@Y|@G:@YFILE_PATH]@D\n"
        -: 6299:    "      Generate a JSON or XML report in the given directory or with the "
        -: 6300:    "given\n"
        -: 6301:    "      file name. @YFILE_PATH@D defaults to @Gtest_detail.xml@D.\n"
        -: 6302:# if GTEST_CAN_STREAM_RESULTS_
        -: 6303:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6304:    "stream_result_to=@YHOST@G:@YPORT@D\n"
        -: 6305:    "      Stream test results to the given server.\n"
        -: 6306:# endif  // GTEST_CAN_STREAM_RESULTS_
        -: 6307:    "\n"
        -: 6308:    "Assertion Behavior:\n"
        -: 6309:# if GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 6310:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6311:    "death_test_style=@Y(@Gfast@Y|@Gthreadsafe@Y)@D\n"
        -: 6312:    "      Set the default death test style.\n"
        -: 6313:# endif  // GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 6314:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6315:    "break_on_failure@D\n"
        -: 6316:    "      Turn assertion failures into debugger break-points.\n"
        -: 6317:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6318:    "throw_on_failure@D\n"
        -: 6319:    "      Turn assertion failures into C++ exceptions for use by an external\n"
        -: 6320:    "      test framework.\n"
        -: 6321:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6322:    "catch_exceptions=0@D\n"
        -: 6323:    "      Do not report exceptions as test failures. Instead, allow them\n"
        -: 6324:    "      to crash the program or throw a pop-up (on Windows).\n"
        -: 6325:    "\n"
        -: 6326:    "Except for @G--" GTEST_FLAG_PREFIX_
        -: 6327:    "list_tests@D, you can alternatively set "
        -: 6328:    "the corresponding\n"
        -: 6329:    "environment variable of a flag (all letters in upper-case). For example, "
        -: 6330:    "to\n"
        -: 6331:    "disable colored text output, you can either specify "
        -: 6332:    "@G--" GTEST_FLAG_PREFIX_
        -: 6333:    "color=no@D or set\n"
        -: 6334:    "the @G" GTEST_FLAG_PREFIX_UPPER_
        -: 6335:    "COLOR@D environment variable to @Gno@D.\n"
        -: 6336:    "\n"
        -: 6337:    "For more information, please read the " GTEST_NAME_
        -: 6338:    " documentation at\n"
        -: 6339:    "@G" GTEST_PROJECT_URL_ "@D. If you find a bug in " GTEST_NAME_
        -: 6340:    "\n"
        -: 6341:    "(not one in your own code or tests), please report it to\n"
        -: 6342:    "@G<" GTEST_DEV_EMAIL_ ">@D.\n";
        -: 6343:
function _ZN7testing8internalL19ParseGoogleTestFlagEPKc called 1 returned 100% blocks executed 25%
        1: 6344:static bool ParseGoogleTestFlag(const char* const arg) {
        1: 6345:  return ParseBoolFlag(arg, kAlsoRunDisabledTestsFlag,
        1: 6345-block  0
call    0 returned 1
        1: 6346:                       &GTEST_FLAG(also_run_disabled_tests)) ||
        1: 6347:         ParseBoolFlag(arg, kBreakOnFailureFlag,
        1: 6347-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 6348:                       &GTEST_FLAG(break_on_failure)) ||
        1: 6349:         ParseBoolFlag(arg, kCatchExceptionsFlag,
        1: 6349-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1: 6350:                       &GTEST_FLAG(catch_exceptions)) ||
       1*: 6351:         ParseStringFlag(arg, kColorFlag, &GTEST_FLAG(color)) ||
        1: 6351-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####: 6352:         ParseStringFlag(arg, kDeathTestStyleFlag,
    %%%%%: 6352-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6353:                         &GTEST_FLAG(death_test_style)) ||
    #####: 6354:         ParseBoolFlag(arg, kDeathTestUseFork,
    %%%%%: 6354-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6355:                       &GTEST_FLAG(death_test_use_fork)) ||
    #####: 6356:         ParseBoolFlag(arg, kFailFast, &GTEST_FLAG(fail_fast)) ||
    %%%%%: 6356-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6357:         ParseStringFlag(arg, kFilterFlag, &GTEST_FLAG(filter)) ||
    %%%%%: 6357-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6358:         ParseStringFlag(arg, kInternalRunDeathTestFlag,
    %%%%%: 6358-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6359:                         &GTEST_FLAG(internal_run_death_test)) ||
    #####: 6360:         ParseBoolFlag(arg, kListTestsFlag, &GTEST_FLAG(list_tests)) ||
    %%%%%: 6360-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6361:         ParseStringFlag(arg, kOutputFlag, &GTEST_FLAG(output)) ||
    %%%%%: 6361-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6362:         ParseBoolFlag(arg, kBriefFlag, &GTEST_FLAG(brief)) ||
    %%%%%: 6362-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6363:         ParseBoolFlag(arg, kPrintTimeFlag, &GTEST_FLAG(print_time)) ||
    %%%%%: 6363-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6364:         ParseBoolFlag(arg, kPrintUTF8Flag, &GTEST_FLAG(print_utf8)) ||
    %%%%%: 6364-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6365:         ParseInt32Flag(arg, kRandomSeedFlag, &GTEST_FLAG(random_seed)) ||
    %%%%%: 6365-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6366:         ParseInt32Flag(arg, kRepeatFlag, &GTEST_FLAG(repeat)) ||
    %%%%%: 6366-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6367:         ParseBoolFlag(arg, kShuffleFlag, &GTEST_FLAG(shuffle)) ||
    %%%%%: 6367-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6368:         ParseInt32Flag(arg, kStackTraceDepthFlag,
    %%%%%: 6368-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6369:                        &GTEST_FLAG(stack_trace_depth)) ||
    #####: 6370:         ParseStringFlag(arg, kStreamResultToFlag,
    %%%%%: 6370-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
       2*: 6371:                         &GTEST_FLAG(stream_result_to)) ||
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1: 6371-block  0
    %%%%%: 6371-block  1
       1*: 6372:         ParseBoolFlag(arg, kThrowOnFailureFlag, &GTEST_FLAG(throw_on_failure));
    %%%%%: 6372-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        1: 6372-block  1
        -: 6373:}
        -: 6374:
        -: 6375:#if GTEST_USE_OWN_FLAGFILE_FLAG_
function _ZN7testing8internalL17LoadFlagsFromFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 6376:static void LoadFlagsFromFile(const std::string& path) {
    #####: 6377:  FILE* flagfile = posix::FOpen(path.c_str(), "r");
    %%%%%: 6377-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6378:  if (!flagfile) {
    %%%%%: 6378-block  0
branch  0 never executed
branch  1 never executed
    #####: 6379:    GTEST_LOG_(FATAL) << "Unable to open file \"" << GTEST_FLAG(flagfile)
    %%%%%: 6379-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6379-block  1
call    3 never executed
    %%%%%: 6379-block  2
call    4 never executed
    $$$$$: 6379-block  3
call    5 never executed
    $$$$$: 6379-block  4
    #####: 6380:                      << "\"";
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6380-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 6380-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
        -: 6381:  }
    #####: 6382:  std::string contents(ReadEntireFile(flagfile));
    %%%%%: 6382-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$: 6382-block  1
call    4 never executed
    #####: 6383:  posix::FClose(flagfile);
    %%%%%: 6383-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6384:  std::vector<std::string> lines;
    %%%%%: 6384-block  0
call    0 never executed
    %%%%%: 6384-block  1
call    1 never executed
    $$$$$: 6384-block  2
call    2 never executed
    #####: 6385:  SplitString(contents, '\n', &lines);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6386:  for (size_t i = 0; i < lines.size(); ++i) {
    %%%%%: 6386-block  0
    %%%%%: 6386-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6386-block  2
    #####: 6387:    if (lines[i].empty())
    %%%%%: 6387-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####: 6388:      continue;
    %%%%%: 6388-block  0
    #####: 6389:    if (!ParseGoogleTestFlag(lines[i].c_str()))
    %%%%%: 6389-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 6389-block  1
branch  5 never executed
branch  6 never executed
    #####: 6390:      g_help_flag = true;
    %%%%%: 6390-block  0
        -: 6391:  }
    #####: 6392:}
        -: 6393:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -: 6394:
        -: 6395:// Parses the command line for Google Test flags, without initializing
        -: 6396:// other parts of Google Test.  The type parameter CharType can be
        -: 6397:// instantiated to either char or wchar_t.
        -: 6398:template <typename CharType>
       1*: 6399:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
       2*: 6400:  for (int i = 1; i < *argc; i++) {
       2*: 6401:    const std::string arg_string = StreamableToString(argv[i]);
       1*: 6402:    const char* const arg = arg_string.c_str();
        -: 6403:
        -: 6404:    using internal::ParseBoolFlag;
        -: 6405:    using internal::ParseInt32Flag;
        -: 6406:    using internal::ParseStringFlag;
        -: 6407:
       1*: 6408:    bool remove_flag = false;
       1*: 6409:    if (ParseGoogleTestFlag(arg)) {
       1*: 6410:      remove_flag = true;
        -: 6411:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6412:    } else if (ParseStringFlag(arg, kFlagfileFlag, &GTEST_FLAG(flagfile))) {
    #####: 6413:      LoadFlagsFromFile(GTEST_FLAG(flagfile));
    #####: 6414:      remove_flag = true;
        -: 6415:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6416:    } else if (arg_string == "--help" || arg_string == "-h" ||
    #####: 6417:               arg_string == "-?" || arg_string == "/?" ||
    #####: 6418:               HasGoogleTestFlagPrefix(arg)) {
        -: 6419:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6420:      // internal ones) trigger help display.
    #####: 6421:      g_help_flag = true;
        -: 6422:    }
        -: 6423:
       1*: 6424:    if (remove_flag) {
        -: 6425:      // Shift the remainder of the argv list left by one.  Note
        -: 6426:      // that argv has (*argc + 1) elements, the last one always being
        -: 6427:      // NULL.  The following loop moves the trailing NULL element as
        -: 6428:      // well.
       2*: 6429:      for (int j = i; j != *argc; j++) {
       1*: 6430:        argv[j] = argv[j + 1];
        -: 6431:      }
        -: 6432:
        -: 6433:      // Decrements the argument count.
       1*: 6434:      (*argc)--;
        -: 6435:
        -: 6436:      // We also need to decrement the iterator as we just removed
        -: 6437:      // an element.
       1*: 6438:      i--;
        -: 6439:    }
        -: 6440:  }
        -: 6441:
       1*: 6442:  if (g_help_flag) {
        -: 6443:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6444:    // latter may not be called at all if the user is using Google
        -: 6445:    // Test with another testing framework.
    #####: 6446:    PrintColorEncoded(kColorEncodedHelpMessage);
        -: 6447:  }
       1*: 6448:}
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6399:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
    #####: 6400:  for (int i = 1; i < *argc; i++) {
    %%%%%: 6400-block  0
    %%%%%: 6400-block  1
branch  0 never executed
branch  1 never executed
    #####: 6401:    const std::string arg_string = StreamableToString(argv[i]);
    %%%%%: 6401-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6401-block  1
call    3 never executed
    $$$$$: 6401-block  2
call    4 never executed
    #####: 6402:    const char* const arg = arg_string.c_str();
    %%%%%: 6402-block  0
call    0 never executed
        -: 6403:
        -: 6404:    using internal::ParseBoolFlag;
        -: 6405:    using internal::ParseInt32Flag;
        -: 6406:    using internal::ParseStringFlag;
        -: 6407:
    #####: 6408:    bool remove_flag = false;
    #####: 6409:    if (ParseGoogleTestFlag(arg)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6409-block  0
branch  3 never executed
branch  4 never executed
    #####: 6410:      remove_flag = true;
    %%%%%: 6410-block  0
        -: 6411:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6412:    } else if (ParseStringFlag(arg, kFlagfileFlag, &GTEST_FLAG(flagfile))) {
    %%%%%: 6412-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6412-block  1
branch  3 never executed
branch  4 never executed
    #####: 6413:      LoadFlagsFromFile(GTEST_FLAG(flagfile));
    %%%%%: 6413-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6414:      remove_flag = true;
    %%%%%: 6414-block  0
        -: 6415:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6416:    } else if (arg_string == "--help" || arg_string == "-h" ||
    %%%%%: 6416-block  0
call    0 never executed
    %%%%%: 6416-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6417:               arg_string == "-?" || arg_string == "/?" ||
branch  0 never executed
branch  1 never executed
    %%%%%: 6417-block  0
call    2 never executed
    %%%%%: 6417-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6417-block  2
    %%%%%: 6417-block  3
    %%%%%: 6417-block  4
branch  8 never executed
branch  9 never executed
    #####: 6418:               HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6418-block  0
call    0 never executed
        -: 6419:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6420:      // internal ones) trigger help display.
    #####: 6421:      g_help_flag = true;
    %%%%%: 6421-block  0
        -: 6422:    }
        -: 6423:
    #####: 6424:    if (remove_flag) {
    %%%%%: 6424-block  0
branch  0 never executed
branch  1 never executed
        -: 6425:      // Shift the remainder of the argv list left by one.  Note
        -: 6426:      // that argv has (*argc + 1) elements, the last one always being
        -: 6427:      // NULL.  The following loop moves the trailing NULL element as
        -: 6428:      // well.
    #####: 6429:      for (int j = i; j != *argc; j++) {
    %%%%%: 6429-block  0
    %%%%%: 6429-block  1
branch  0 never executed
branch  1 never executed
    #####: 6430:        argv[j] = argv[j + 1];
    %%%%%: 6430-block  0
        -: 6431:      }
        -: 6432:
        -: 6433:      // Decrements the argument count.
    #####: 6434:      (*argc)--;
        -: 6435:
        -: 6436:      // We also need to decrement the iterator as we just removed
        -: 6437:      // an element.
    #####: 6438:      i--;
    %%%%%: 6438-block  0
        -: 6439:    }
        -: 6440:  }
        -: 6441:
    #####: 6442:  if (g_help_flag) {
    %%%%%: 6442-block  0
branch  0 never executed
branch  1 never executed
        -: 6443:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6444:    // latter may not be called at all if the user is using Google
        -: 6445:    // Test with another testing framework.
    #####: 6446:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6446-block  0
call    0 never executed
        -: 6447:  }
    #####: 6448:}
    %%%%%: 6448-block  0
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_:
function _ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_ called 1 returned 100% blocks executed 45%
        1: 6399:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
        2: 6400:  for (int i = 1; i < *argc; i++) {
        1: 6400-block  0
        2: 6400-block  1
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        2: 6401:    const std::string arg_string = StreamableToString(argv[i]);
        1: 6401-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6401-block  1
call    3 returned 1
    $$$$$: 6401-block  2
call    4 never executed
        1: 6402:    const char* const arg = arg_string.c_str();
        1: 6402-block  0
call    0 returned 1
        -: 6403:
        -: 6404:    using internal::ParseBoolFlag;
        -: 6405:    using internal::ParseInt32Flag;
        -: 6406:    using internal::ParseStringFlag;
        -: 6407:
        1: 6408:    bool remove_flag = false;
        1: 6409:    if (ParseGoogleTestFlag(arg)) {
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 6409-block  0
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1: 6410:      remove_flag = true;
        1: 6410-block  0
        -: 6411:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6412:    } else if (ParseStringFlag(arg, kFlagfileFlag, &GTEST_FLAG(flagfile))) {
    %%%%%: 6412-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6412-block  1
branch  3 never executed
branch  4 never executed
    #####: 6413:      LoadFlagsFromFile(GTEST_FLAG(flagfile));
    %%%%%: 6413-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 6414:      remove_flag = true;
    %%%%%: 6414-block  0
        -: 6415:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6416:    } else if (arg_string == "--help" || arg_string == "-h" ||
    %%%%%: 6416-block  0
call    0 never executed
    %%%%%: 6416-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6417:               arg_string == "-?" || arg_string == "/?" ||
branch  0 never executed
branch  1 never executed
    %%%%%: 6417-block  0
call    2 never executed
    %%%%%: 6417-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 6417-block  2
    %%%%%: 6417-block  3
    %%%%%: 6417-block  4
branch  8 never executed
branch  9 never executed
    #####: 6418:               HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6418-block  0
call    0 never executed
        -: 6419:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6420:      // internal ones) trigger help display.
    #####: 6421:      g_help_flag = true;
    %%%%%: 6421-block  0
        -: 6422:    }
        -: 6423:
        1: 6424:    if (remove_flag) {
        1: 6424-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 6425:      // Shift the remainder of the argv list left by one.  Note
        -: 6426:      // that argv has (*argc + 1) elements, the last one always being
        -: 6427:      // NULL.  The following loop moves the trailing NULL element as
        -: 6428:      // well.
        2: 6429:      for (int j = i; j != *argc; j++) {
        1: 6429-block  0
        2: 6429-block  1
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1: 6430:        argv[j] = argv[j + 1];
        1: 6430-block  0
        -: 6431:      }
        -: 6432:
        -: 6433:      // Decrements the argument count.
        1: 6434:      (*argc)--;
        -: 6435:
        -: 6436:      // We also need to decrement the iterator as we just removed
        -: 6437:      // an element.
        1: 6438:      i--;
        1: 6438-block  0
        -: 6439:    }
        -: 6440:  }
        -: 6441:
        1: 6442:  if (g_help_flag) {
        1: 6442-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 6443:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6444:    // latter may not be called at all if the user is using Google
        -: 6445:    // Test with another testing framework.
    #####: 6446:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6446-block  0
call    0 never executed
        -: 6447:  }
        1: 6448:}
        1: 6448-block  0
------------------
        -: 6449:
        -: 6450:// Parses the command line for Google Test flags, without initializing
        -: 6451:// other parts of Google Test.
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPc called 1 returned 100% blocks executed 100%
        1: 6452:void ParseGoogleTestFlagsOnly(int* argc, char** argv) {
        1: 6453:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
        1: 6453-block  0
call    0 returned 1
        -: 6454:
        -: 6455:  // Fix the value of *_NSGetArgc() on macOS, but if and only if
        -: 6456:  // *_NSGetArgv() == argv
        -: 6457:  // Only applicable to char** version of argv
        -: 6458:#if GTEST_OS_MAC
        -: 6459:#ifndef GTEST_OS_IOS
        -: 6460:  if (*_NSGetArgv() == argv) {
        -: 6461:    *_NSGetArgc() = *argc;
        -: 6462:  }
        -: 6463:#endif
        -: 6464:#endif
        1: 6465:}
function _ZN7testing8internal24ParseGoogleTestFlagsOnlyEPiPPw called 0 returned 0% blocks executed 0%
    #####: 6466:void ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv) {
    #####: 6467:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
    %%%%%: 6467-block  0
call    0 never executed
    #####: 6468:}
        -: 6469:
        -: 6470:// The internal implementation of InitGoogleTest().
        -: 6471://
        -: 6472:// The type parameter CharType can be instantiated to either char or
        -: 6473:// wchar_t.
        -: 6474:template <typename CharType>
       1*: 6475:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6476:  // We don't want to run the initialization code twice.
       1*: 6477:  if (GTestIsInitialized()) return;
        -: 6478:
       1*: 6479:  if (*argc <= 0) return;
        -: 6480:
       1*: 6481:  g_argvs.clear();
       3*: 6482:  for (int i = 0; i != *argc; i++) {
       2*: 6483:    g_argvs.push_back(StreamableToString(argv[i]));
        -: 6484:  }
        -: 6485:
        -: 6486:#if GTEST_HAS_ABSL
        -: 6487:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6488:#endif  // GTEST_HAS_ABSL
        -: 6489:
       1*: 6490:  ParseGoogleTestFlagsOnly(argc, argv);
       1*: 6491:  GetUnitTestImpl()->PostFlagParsingInit();
        -: 6492:}
------------------
_ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_ called 0 returned 0% blocks executed 0%
    #####: 6475:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6476:  // We don't want to run the initialization code twice.
    #####: 6477:  if (GTestIsInitialized()) return;
    %%%%%: 6477-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6477-block  1
        -: 6478:
    #####: 6479:  if (*argc <= 0) return;
    %%%%%: 6479-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 6479-block  1
        -: 6480:
    #####: 6481:  g_argvs.clear();
    %%%%%: 6481-block  0
call    0 never executed
    #####: 6482:  for (int i = 0; i != *argc; i++) {
    %%%%%: 6482-block  0
branch  0 never executed
branch  1 never executed
    #####: 6483:    g_argvs.push_back(StreamableToString(argv[i]));
    %%%%%: 6483-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6483-block  1
call    4 never executed
    $$$$$: 6483-block  2
call    5 never executed
        -: 6484:  }
        -: 6485:
        -: 6486:#if GTEST_HAS_ABSL
        -: 6487:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6488:#endif  // GTEST_HAS_ABSL
        -: 6489:
    #####: 6490:  ParseGoogleTestFlagsOnly(argc, argv);
    %%%%%: 6490-block  0
call    0 never executed
    #####: 6491:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 never executed
call    1 never executed
        -: 6492:}
------------------
_ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_:
function _ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_ called 1 returned 100% blocks executed 79%
        1: 6475:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6476:  // We don't want to run the initialization code twice.
       1*: 6477:  if (GTestIsInitialized()) return;
        1: 6477-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%: 6477-block  1
        -: 6478:
       1*: 6479:  if (*argc <= 0) return;
        1: 6479-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%: 6479-block  1
        -: 6480:
        1: 6481:  g_argvs.clear();
        1: 6481-block  0
call    0 returned 1
        3: 6482:  for (int i = 0; i != *argc; i++) {
        3: 6482-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2: 6483:    g_argvs.push_back(StreamableToString(argv[i]));
        2: 6483-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2: 6483-block  1
call    4 returned 2
    $$$$$: 6483-block  2
call    5 never executed
        -: 6484:  }
        -: 6485:
        -: 6486:#if GTEST_HAS_ABSL
        -: 6487:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6488:#endif  // GTEST_HAS_ABSL
        -: 6489:
        1: 6490:  ParseGoogleTestFlagsOnly(argc, argv);
        1: 6490-block  0
call    0 returned 1
        1: 6491:  GetUnitTestImpl()->PostFlagParsingInit();
call    0 returned 1
call    1 returned 1
        -: 6492:}
------------------
        -: 6493:
        -: 6494:}  // namespace internal
        -: 6495:
        -: 6496:// Initializes Google Test.  This must be called before calling
        -: 6497:// RUN_ALL_TESTS().  In particular, it parses a command line for the
        -: 6498:// flags that Google Test recognizes.  Whenever a Google Test flag is
        -: 6499:// seen, it is removed from argv, and *argc is decremented.
        -: 6500://
        -: 6501:// No value is returned.  Instead, the Google Test flag variables are
        -: 6502:// updated.
        -: 6503://
        -: 6504:// Calling the function for the second time has no user-visible effect.
function _ZN7testing14InitGoogleTestEPiPPc called 1 returned 100% blocks executed 100%
        1: 6505:void InitGoogleTest(int* argc, char** argv) {
        -: 6506:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6507:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6508:#else  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 6509:  internal::InitGoogleTestImpl(argc, argv);
        1: 6509-block  0
call    0 returned 1
        -: 6510:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 6511:}
        -: 6512:
        -: 6513:// This overloaded version can be used in Windows programs compiled in
        -: 6514:// UNICODE mode.
function _ZN7testing14InitGoogleTestEPiPPw called 0 returned 0% blocks executed 0%
    #####: 6515:void InitGoogleTest(int* argc, wchar_t** argv) {
        -: 6516:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6517:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6518:#else  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6519:  internal::InitGoogleTestImpl(argc, argv);
    %%%%%: 6519-block  0
call    0 never executed
        -: 6520:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6521:}
        -: 6522:
        -: 6523:// This overloaded version can be used on Arduino/embedded platforms where
        -: 6524:// there is no argc/argv.
function _ZN7testing14InitGoogleTestEv called 0 returned 0% blocks executed 0%
    #####: 6525:void InitGoogleTest() {
        -: 6526:  // Since Arduino doesn't have a command line, fake out the argc/argv arguments
    #####: 6527:  int argc = 1;
    #####: 6528:  const auto arg0 = "dummy";
    #####: 6529:  char* argv0 = const_cast<char*>(arg0);
    #####: 6530:  char** argv = &argv0;
        -: 6531:
        -: 6532:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6533:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(&argc, argv);
        -: 6534:#else  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6535:  internal::InitGoogleTestImpl(&argc, argv);
    %%%%%: 6535-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 6536:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6537:}
    %%%%%: 6537-block  0
        -: 6538:
function _ZN7testing7TempDirB5cxx11Ev called 0 returned 0% blocks executed 0%
    #####: 6539:std::string TempDir() {
        -: 6540:#if defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_)
        -: 6541:  return GTEST_CUSTOM_TEMPDIR_FUNCTION_();
        -: 6542:#elif GTEST_OS_WINDOWS_MOBILE
        -: 6543:  return "\\temp\\";
        -: 6544:#elif GTEST_OS_WINDOWS
        -: 6545:  const char* temp_dir = internal::posix::GetEnv("TEMP");
        -: 6546:  if (temp_dir == nullptr || temp_dir[0] == '\0') {
        -: 6547:    return "\\temp\\";
        -: 6548:  } else if (temp_dir[strlen(temp_dir) - 1] == '\\') {
        -: 6549:    return temp_dir;
        -: 6550:  } else {
        -: 6551:    return std::string(temp_dir) + "\\";
        -: 6552:  }
        -: 6553:#elif GTEST_OS_LINUX_ANDROID
        -: 6554:  const char* temp_dir = internal::posix::GetEnv("TEST_TMPDIR");
        -: 6555:  if (temp_dir == nullptr || temp_dir[0] == '\0') {
        -: 6556:    return "/data/local/tmp/";
        -: 6557:  } else {
        -: 6558:    return temp_dir;
        -: 6559:  }
        -: 6560:#elif GTEST_OS_LINUX
    #####: 6561:  const char* temp_dir = internal::posix::GetEnv("TEST_TMPDIR");
    %%%%%: 6561-block  0
call    0 never executed
    #####: 6562:  if (temp_dir == nullptr || temp_dir[0] == '\0') {
branch  0 never executed
branch  1 never executed
    %%%%%: 6562-block  0
branch  2 never executed
branch  3 never executed
    #####: 6563:    return "/tmp/";
    %%%%%: 6563-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6563-block  1
call    4 never executed
    $$$$$: 6563-block  2
call    5 never executed
    $$$$$: 6563-block  3
        -: 6564:  } else {
    #####: 6565:    return temp_dir;
    %%%%%: 6565-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 6565-block  1
call    4 never executed
    $$$$$: 6565-block  2
call    5 never executed
    $$$$$: 6565-block  3
        -: 6566:  }
        -: 6567:#else
        -: 6568:  return "/tmp/";
        -: 6569:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 6570:}
        -: 6571:
        -: 6572:// Class ScopedTrace
        -: 6573:
        -: 6574:// Pushes the given source file location and message onto a per-thread
        -: 6575:// trace stack maintained by Google Test.
function _ZN7testing11ScopedTrace9PushTraceEPKciNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####: 6576:void ScopedTrace::PushTrace(const char* file, int line, std::string message) {
    #####: 6577:  internal::TraceInfo trace;
    %%%%%: 6577-block  0
call    0 never executed
    %%%%%: 6577-block  1
call    1 never executed
    $$$$$: 6577-block  2
call    2 never executed
    #####: 6578:  trace.file = file;
    #####: 6579:  trace.line = line;
    #####: 6580:  trace.message.swap(message);
call    0 never executed
        -: 6581:
    #####: 6582:  UnitTest::GetInstance()->PushGTestTrace(trace);
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 6582-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 6583:}
        -: 6584:
        -: 6585:// Pops the info pushed by the c'tor.
function _ZN7testing11ScopedTraceD2Ev called 0 returned 0% blocks executed 0%
    #####: 6586:ScopedTrace::~ScopedTrace()
        -: 6587:    GTEST_LOCK_EXCLUDED_(&UnitTest::mutex_) {
    #####: 6588:  UnitTest::GetInstance()->PopGTestTrace();
    %%%%%: 6588-block  0
call    0 never executed
call    1 never executed
    #####: 6589:}
        -: 6590:
        -: 6591:}  // namespace testing
